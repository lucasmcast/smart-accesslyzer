import builtins as _mod_builtins

ACCESS_FAST = 67108864
ACCESS_MASK = 50331648
ACCESS_READ = 16777216
ACCESS_RW = 50331648
ACCESS_WRITE = 33554432
ADAPTIVE_THRESH_GAUSSIAN_C = 1
ADAPTIVE_THRESH_MEAN_C = 0
AGAST_FEATURE_DETECTOR_AGAST_5_8 = 0
AGAST_FEATURE_DETECTOR_AGAST_7_12D = 1
AGAST_FEATURE_DETECTOR_AGAST_7_12S = 2
AGAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION = 10001
AGAST_FEATURE_DETECTOR_OAST_9_16 = 3
AGAST_FEATURE_DETECTOR_THRESHOLD = 10000
class AKAZE(Feature2D):
    __class__ = AKAZE
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, descriptor_type=None, descriptor_size=None, descriptor_channels=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None):
        'create([, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]) -> retval\n.   @brief The AKAZE constructor\n.   \n.   @param descriptor_type Type of the extracted descriptor: DESCRIPTOR_KAZE,\n.   DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT.\n.   @param descriptor_size Size of the descriptor in bits. 0 -\\> Full size\n.   @param descriptor_channels Number of channels in the descriptor (1, 2, 3)\n.   @param threshold Detector response threshold to accept point\n.   @param nOctaves Maximum octave evolution of the image\n.   @param nOctaveLayers Default number of sublevels per scale level\n.   @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or\n.   DIFF_CHARBONNIER'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getDescriptorChannels(self):
        'getDescriptorChannels() -> retval\n.'
        pass
    
    def getDescriptorSize(self):
        'getDescriptorSize() -> retval\n.'
        pass
    
    def getDescriptorType(self):
        'getDescriptorType() -> retval\n.'
        pass
    
    def getDiffusivity(self):
        'getDiffusivity() -> retval\n.'
        pass
    
    def getNOctaveLayers(self):
        'getNOctaveLayers() -> retval\n.'
        pass
    
    def getNOctaves(self):
        'getNOctaves() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def setDescriptorChannels(self, dch):
        'setDescriptorChannels(dch) -> None\n.'
        pass
    
    def setDescriptorSize(self, dsize):
        'setDescriptorSize(dsize) -> None\n.'
        pass
    
    def setDescriptorType(self, dtype):
        'setDescriptorType(dtype) -> None\n.'
        pass
    
    def setDiffusivity(self, diff):
        'setDiffusivity(diff) -> None\n.'
        pass
    
    def setNOctaveLayers(self, octaveLayers):
        'setNOctaveLayers(octaveLayers) -> None\n.'
        pass
    
    def setNOctaves(self, octaves):
        'setNOctaves(octaves) -> None\n.'
        pass
    
    def setThreshold(self, threshold):
        'setThreshold(threshold) -> None\n.'
        pass
    

AKAZE_DESCRIPTOR_KAZE = 3
AKAZE_DESCRIPTOR_KAZE_UPRIGHT = 2
AKAZE_DESCRIPTOR_MLDB = 5
AKAZE_DESCRIPTOR_MLDB_UPRIGHT = 4
def AKAZE_create(descriptor_type=None, descriptor_size=None, descriptor_channels=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None):
    'AKAZE_create([, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]) -> retval\n.   @brief The AKAZE constructor\n.   \n.   @param descriptor_type Type of the extracted descriptor: DESCRIPTOR_KAZE,\n.   DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT.\n.   @param descriptor_size Size of the descriptor in bits. 0 -\\> Full size\n.   @param descriptor_channels Number of channels in the descriptor (1, 2, 3)\n.   @param threshold Detector response threshold to accept point\n.   @param nOctaves Maximum octave evolution of the image\n.   @param nOctaveLayers Default number of sublevels per scale level\n.   @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or\n.   DIFF_CHARBONNIER'
    pass

class AffineTransformer(ShapeTransformer):
    __class__ = AffineTransformer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getFullAffine(self):
        'getFullAffine() -> retval\n.'
        pass
    
    def setFullAffine(self, fullAffine):
        'setFullAffine(fullAffine) -> None\n.'
        pass
    

class AgastFeatureDetector(Feature2D):
    __class__ = AgastFeatureDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, threshold=None, nonmaxSuppression=None, type=None):
        'create([, threshold[, nonmaxSuppression[, type]]]) -> retval\n.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getNonmaxSuppression(self):
        'getNonmaxSuppression() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def getType(self):
        'getType() -> retval\n.'
        pass
    
    def setNonmaxSuppression(self, f):
        'setNonmaxSuppression(f) -> None\n.'
        pass
    
    def setThreshold(self, threshold):
        'setThreshold(threshold) -> None\n.'
        pass
    
    def setType(self, type):
        'setType(type) -> None\n.'
        pass
    

AgastFeatureDetector_AGAST_5_8 = 0
AgastFeatureDetector_AGAST_7_12d = 1
AgastFeatureDetector_AGAST_7_12s = 2
AgastFeatureDetector_NONMAX_SUPPRESSION = 10001
AgastFeatureDetector_OAST_9_16 = 3
AgastFeatureDetector_THRESHOLD = 10000
def AgastFeatureDetector_create(threshold=None, nonmaxSuppression=None, type=None):
    'AgastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval\n.'
    pass

class Algorithm(_mod_builtins.object):
    __class__ = Algorithm
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def clear(self):
        'clear() -> None\n.   @brief Clears the algorithm state'
        pass
    
    def empty(self):
        'empty() -> retval\n.   @brief Returns true if the Algorithm is empty (e.g. in the very beginning or after unsuccessful read'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.   Returns the algorithm string identifier.\n.   This string is used as top level xml/yml node tag when the object is saved to a file or string.'
        pass
    
    def read(self, fn):
        'read(fn) -> None\n.   @brief Reads algorithm parameters from a file storage'
        pass
    
    def save(self, filename):
        'save(filename) -> None\n.   Saves the algorithm to a file.\n.   In order to make this method work, the derived class must implement Algorithm::write(FileStorage& fs).'
        pass
    
    def write(self, fs, name=None):
        'write(fs[, name]) -> None\n.   @brief simplified API for language bindings\n.   * @overload'
        pass
    

class AlignExposures(Algorithm):
    __class__ = AlignExposures
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def process(self, src, dst, times, response):
        'process(src, dst, times, response) -> None\n.   @brief Aligns images\n.   \n.   @param src vector of input images\n.   @param dst vector of aligned images\n.   @param times vector of exposure time values for each image\n.   @param response 256x1 matrix with inverse camera response function for each pixel value, it should\n.   have the same number of channels as images.'
        pass
    

class AlignMTB(AlignExposures):
    __class__ = AlignMTB
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculateShift(self, img0, img1):
        'calculateShift(img0, img1) -> retval\n.   @brief Calculates shift between two images, i. e. how to shift the second image to correspond it with the\n.   first.\n.   \n.   @param img0 first image\n.   @param img1 second image'
        pass
    
    def computeBitmaps(self, img, tb=None, eb=None):
        'computeBitmaps(img[, tb[, eb]]) -> tb, eb\n.   @brief Computes median threshold and exclude bitmaps of given image.\n.   \n.   @param img input image\n.   @param tb median threshold bitmap\n.   @param eb exclude bitmap'
        pass
    
    def getCut(self):
        'getCut() -> retval\n.'
        pass
    
    def getExcludeRange(self):
        'getExcludeRange() -> retval\n.'
        pass
    
    def getMaxBits(self):
        'getMaxBits() -> retval\n.'
        pass
    
    def process(self, src, dst, times, response):
        "process(src, dst, times, response) -> None\n.   \n\n\n\nprocess(src, dst) -> None\n.   @brief Short version of process, that doesn't take extra arguments.\n.   \n.   @param src vector of input images\n.   @param dst vector of aligned images"
        pass
    
    def setCut(self, value):
        'setCut(value) -> None\n.'
        pass
    
    def setExcludeRange(self, exclude_range):
        'setExcludeRange(exclude_range) -> None\n.'
        pass
    
    def setMaxBits(self, max_bits):
        'setMaxBits(max_bits) -> None\n.'
        pass
    
    def shiftMat(self, src, shift, dst=None):
        'shiftMat(src, shift[, dst]) -> dst\n.   @brief Helper function, that shift Mat filling new regions with zeros.\n.   \n.   @param src input image\n.   @param dst result image\n.   @param shift shift value'
        pass
    

class BFMatcher(DescriptorMatcher):
    __class__ = BFMatcher
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, normType=None, crossCheck=None):
        "create([, normType[, crossCheck]]) -> retval\n.   @brief Brute-force matcher create method.\n.   @param normType One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2. L1 and L2 norms are\n.   preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and\n.   BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor\n.   description).\n.   @param crossCheck If it is false, this is will be default BFMatcher behaviour when it finds the k\n.   nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with\n.   k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the\n.   matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent\n.   pairs. Such technique usually produces best results with minimal number of outliers when there are\n.   enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper."
        pass
    

def BFMatcher_create(normType=None, crossCheck=None):
    "BFMatcher_create([, normType[, crossCheck]]) -> retval\n.   @brief Brute-force matcher create method.\n.   @param normType One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2. L1 and L2 norms are\n.   preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be used with ORB, BRISK and\n.   BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see ORB::ORB constructor\n.   description).\n.   @param crossCheck If it is false, this is will be default BFMatcher behaviour when it finds the k\n.   nearest neighbors for each query descriptor. If crossCheck==true, then the knnMatch() method with\n.   k=1 will only return pairs (i,j) such that for i-th query descriptor the j-th descriptor in the\n.   matcher's collection is the nearest and vice versa, i.e. the BFMatcher will only return consistent\n.   pairs. Such technique usually produces best results with minimal number of outliers when there are\n.   enough matches. This is alternative to the ratio test, used by D. Lowe in SIFT paper."
    pass

BORDER_CONSTANT = 0
BORDER_DEFAULT = 4
BORDER_ISOLATED = 16
BORDER_REFLECT = 2
BORDER_REFLECT101 = 4
BORDER_REFLECT_101 = 4
BORDER_REPLICATE = 1
BORDER_TRANSPARENT = 5
BORDER_WRAP = 3
class BOWImgDescriptorExtractor(_mod_builtins.object):
    __class__ = BOWImgDescriptorExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compute(self, image, keypoints, imgDescriptor=None):
        'compute(image, keypoints[, imgDescriptor]) -> imgDescriptor\n.   @overload\n.   @param keypointDescriptors Computed descriptors to match with vocabulary.\n.   @param imgDescriptor Computed output image descriptor.\n.   @param pointIdxsOfClusters Indices of keypoints that belong to the cluster. This means that\n.   pointIdxsOfClusters[i] are keypoint indices that belong to the i -th cluster (word of vocabulary)\n.   returned if it is non-zero.'
        pass
    
    def descriptorSize(self):
        'descriptorSize() -> retval\n.   @brief Returns an image descriptor size if the vocabulary is set. Otherwise, it returns 0.'
        pass
    
    def descriptorType(self):
        'descriptorType() -> retval\n.   @brief Returns an image descriptor type.'
        pass
    
    def getVocabulary(self):
        'getVocabulary() -> retval\n.   @brief Returns the set vocabulary.'
        pass
    
    def setVocabulary(self, vocabulary):
        'setVocabulary(vocabulary) -> None\n.   @brief Sets a visual vocabulary.\n.   \n.   @param vocabulary Vocabulary (can be trained using the inheritor of BOWTrainer ). Each row of the\n.   vocabulary is a visual word (cluster center).'
        pass
    

class BOWKMeansTrainer(BOWTrainer):
    __class__ = BOWKMeansTrainer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def cluster(self):
        'cluster() -> retval\n.   \n\n\n\ncluster(descriptors) -> retval\n.'
        pass
    

class BOWTrainer(_mod_builtins.object):
    __class__ = BOWTrainer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def add(self, descriptors):
        'add(descriptors) -> None\n.   @brief Adds descriptors to a training set.\n.   \n.   @param descriptors Descriptors to add to a training set. Each row of the descriptors matrix is a\n.   descriptor.\n.   \n.   The training set is clustered using clustermethod to construct the vocabulary.'
        pass
    
    def clear(self):
        'clear() -> None\n.'
        pass
    
    def cluster(self):
        'cluster() -> retval\n.   @overload\n\n\n\ncluster(descriptors) -> retval\n.   @brief Clusters train descriptors.\n.   \n.   @param descriptors Descriptors to cluster. Each row of the descriptors matrix is a descriptor.\n.   Descriptors are not added to the inner train descriptor set.\n.   \n.   The vocabulary consists of cluster centers. So, this method returns the vocabulary. In the first\n.   variant of the method, train descriptors stored in the object are clustered. In the second variant,\n.   input descriptors are clustered.'
        pass
    
    def descriptorsCount(self):
        'descriptorsCount() -> retval\n.   @brief Returns the count of all descriptors stored in the training set.'
        pass
    
    def getDescriptors(self):
        'getDescriptors() -> retval\n.   @brief Returns a training set of descriptors.'
        pass
    

class BRISK(Feature2D):
    __class__ = BRISK
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, thresh=None, octaves=None, patternScale=None):
        'create([, thresh[, octaves[, patternScale]]]) -> retval\n.   @brief The BRISK constructor\n.   \n.   @param thresh AGAST detection threshold score.\n.   @param octaves detection octaves. Use 0 to do single scale.\n.   @param patternScale apply this scale to the pattern used for sampling the neighbourhood of a\n.   keypoint.\n\n\n\ncreate(radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval\n.   @brief The BRISK constructor for a custom pattern\n.   \n.   @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for\n.   keypoint scale 1).\n.   @param numberList defines the number of sampling points on the sampling circle. Must be the same\n.   size as radiusList..\n.   @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint\n.   scale 1).\n.   @param dMin threshold for the long pairings used for orientation determination (in pixels for\n.   keypoint scale 1).\n.   @param indexChange index remapping of the bits.\n\n\n\ncreate(thresh, octaves, radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval\n.   @brief The BRISK constructor for a custom pattern, detection threshold and octaves\n.   \n.   @param thresh AGAST detection threshold score.\n.   @param octaves detection octaves. Use 0 to do single scale.\n.   @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for\n.   keypoint scale 1).\n.   @param numberList defines the number of sampling points on the sampling circle. Must be the same\n.   size as radiusList..\n.   @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint\n.   scale 1).\n.   @param dMin threshold for the long pairings used for orientation determination (in pixels for\n.   keypoint scale 1).\n.   @param indexChange index remapping of the bits.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    

def BRISK_create(thresh=None, octaves=None, patternScale=None):
    'BRISK_create([, thresh[, octaves[, patternScale]]]) -> retval\n.   @brief The BRISK constructor\n.   \n.   @param thresh AGAST detection threshold score.\n.   @param octaves detection octaves. Use 0 to do single scale.\n.   @param patternScale apply this scale to the pattern used for sampling the neighbourhood of a\n.   keypoint.\n\n\n\nBRISK_create(radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval\n.   @brief The BRISK constructor for a custom pattern\n.   \n.   @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for\n.   keypoint scale 1).\n.   @param numberList defines the number of sampling points on the sampling circle. Must be the same\n.   size as radiusList..\n.   @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint\n.   scale 1).\n.   @param dMin threshold for the long pairings used for orientation determination (in pixels for\n.   keypoint scale 1).\n.   @param indexChange index remapping of the bits.\n\n\n\nBRISK_create(thresh, octaves, radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval\n.   @brief The BRISK constructor for a custom pattern, detection threshold and octaves\n.   \n.   @param thresh AGAST detection threshold score.\n.   @param octaves detection octaves. Use 0 to do single scale.\n.   @param radiusList defines the radii (in pixels) where the samples around a keypoint are taken (for\n.   keypoint scale 1).\n.   @param numberList defines the number of sampling points on the sampling circle. Must be the same\n.   size as radiusList..\n.   @param dMax threshold for the short pairings used for descriptor formation (in pixels for keypoint\n.   scale 1).\n.   @param dMin threshold for the long pairings used for orientation determination (in pixels for\n.   keypoint scale 1).\n.   @param indexChange index remapping of the bits.'
    pass

class BackgroundSubtractor(Algorithm):
    __class__ = BackgroundSubtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, image, fgmask=None, learningRate=None):
        'apply(image[, fgmask[, learningRate]]) -> fgmask\n.   @brief Computes a foreground mask.\n.   \n.   @param image Next video frame.\n.   @param fgmask The output foreground mask as an 8-bit binary image.\n.   @param learningRate The value between 0 and 1 that indicates how fast the background model is\n.   learnt. Negative parameter value makes the algorithm to use some automatically chosen learning\n.   rate. 0 means that the background model is not updated at all, 1 means that the background model\n.   is completely reinitialized from the last frame.'
        pass
    
    def getBackgroundImage(self, backgroundImage=None):
        'getBackgroundImage([, backgroundImage]) -> backgroundImage\n.   @brief Computes a background image.\n.   \n.   @param backgroundImage The output background image.\n.   \n.   @note Sometimes the background image can be very blurry, as it contain the average background\n.   statistics.'
        pass
    

class BackgroundSubtractorKNN(BackgroundSubtractor):
    __class__ = BackgroundSubtractorKNN
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getDetectShadows(self):
        'getDetectShadows() -> retval\n.   @brief Returns the shadow detection flag\n.   \n.   If true, the algorithm detects shadows and marks them. See createBackgroundSubtractorKNN for\n.   details.'
        pass
    
    def getDist2Threshold(self):
        'getDist2Threshold() -> retval\n.   @brief Returns the threshold on the squared distance between the pixel and the sample\n.   \n.   The threshold on the squared distance between the pixel and the sample to decide whether a pixel is\n.   close to a data sample.'
        pass
    
    def getHistory(self):
        'getHistory() -> retval\n.   @brief Returns the number of last frames that affect the background model'
        pass
    
    def getNSamples(self):
        'getNSamples() -> retval\n.   @brief Returns the number of data samples in the background model'
        pass
    
    def getShadowThreshold(self):
        'getShadowThreshold() -> retval\n.   @brief Returns the shadow threshold\n.   \n.   A shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in\n.   the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel\n.   is more than twice darker then it is not shadow. See Prati, Mikic, Trivedi and Cucchiara,\n.   *Detecting Moving Shadows...*, IEEE PAMI,2003.'
        pass
    
    def getShadowValue(self):
        'getShadowValue() -> retval\n.   @brief Returns the shadow value\n.   \n.   Shadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0\n.   in the mask always means background, 255 means foreground.'
        pass
    
    def getkNNSamples(self):
        'getkNNSamples() -> retval\n.   @brief Returns the number of neighbours, the k in the kNN.\n.   \n.   K is the number of samples that need to be within dist2Threshold in order to decide that that\n.   pixel is matching the kNN background model.'
        pass
    
    def setDetectShadows(self, detectShadows):
        'setDetectShadows(detectShadows) -> None\n.   @brief Enables or disables shadow detection'
        pass
    
    def setDist2Threshold(self, _dist2Threshold):
        'setDist2Threshold(_dist2Threshold) -> None\n.   @brief Sets the threshold on the squared distance'
        pass
    
    def setHistory(self, history):
        'setHistory(history) -> None\n.   @brief Sets the number of last frames that affect the background model'
        pass
    
    def setNSamples(self, _nN):
        'setNSamples(_nN) -> None\n.   @brief Sets the number of data samples in the background model.\n.   \n.   The model needs to be reinitalized to reserve memory.'
        pass
    
    def setShadowThreshold(self, threshold):
        'setShadowThreshold(threshold) -> None\n.   @brief Sets the shadow threshold'
        pass
    
    def setShadowValue(self, value):
        'setShadowValue(value) -> None\n.   @brief Sets the shadow value'
        pass
    
    def setkNNSamples(self, _nkNN):
        'setkNNSamples(_nkNN) -> None\n.   @brief Sets the k in the kNN. How many nearest neighbours need to match.'
        pass
    

class BackgroundSubtractorMOG2(BackgroundSubtractor):
    __class__ = BackgroundSubtractorMOG2
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, image, fgmask=None, learningRate=None):
        'apply(image[, fgmask[, learningRate]]) -> fgmask\n.   @brief Computes a foreground mask.\n.   \n.   @param image Next video frame. Floating point frame will be used without scaling and should be in range \\f$[0,255]\\f$.\n.   @param fgmask The output foreground mask as an 8-bit binary image.\n.   @param learningRate The value between 0 and 1 that indicates how fast the background model is\n.   learnt. Negative parameter value makes the algorithm to use some automatically chosen learning\n.   rate. 0 means that the background model is not updated at all, 1 means that the background model\n.   is completely reinitialized from the last frame.'
        pass
    
    def getBackgroundRatio(self):
        'getBackgroundRatio() -> retval\n.   @brief Returns the "background ratio" parameter of the algorithm\n.   \n.   If a foreground pixel keeps semi-constant value for about backgroundRatio\\*history frames, it\'s\n.   considered background and added to the model as a center of a new component. It corresponds to TB\n.   parameter in the paper.'
        pass
    
    def getComplexityReductionThreshold(self):
        'getComplexityReductionThreshold() -> retval\n.   @brief Returns the complexity reduction threshold\n.   \n.   This parameter defines the number of samples needed to accept to prove the component exists. CT=0.05\n.   is a default value for all the samples. By setting CT=0 you get an algorithm very similar to the\n.   standard Stauffer&Grimson algorithm.'
        pass
    
    def getDetectShadows(self):
        'getDetectShadows() -> retval\n.   @brief Returns the shadow detection flag\n.   \n.   If true, the algorithm detects shadows and marks them. See createBackgroundSubtractorMOG2 for\n.   details.'
        pass
    
    def getHistory(self):
        'getHistory() -> retval\n.   @brief Returns the number of last frames that affect the background model'
        pass
    
    def getNMixtures(self):
        'getNMixtures() -> retval\n.   @brief Returns the number of gaussian components in the background model'
        pass
    
    def getShadowThreshold(self):
        'getShadowThreshold() -> retval\n.   @brief Returns the shadow threshold\n.   \n.   A shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in\n.   the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel\n.   is more than twice darker then it is not shadow. See Prati, Mikic, Trivedi and Cucchiara,\n.   *Detecting Moving Shadows...*, IEEE PAMI,2003.'
        pass
    
    def getShadowValue(self):
        'getShadowValue() -> retval\n.   @brief Returns the shadow value\n.   \n.   Shadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0\n.   in the mask always means background, 255 means foreground.'
        pass
    
    def getVarInit(self):
        'getVarInit() -> retval\n.   @brief Returns the initial variance of each gaussian component'
        pass
    
    def getVarMax(self):
        'getVarMax() -> retval\n.'
        pass
    
    def getVarMin(self):
        'getVarMin() -> retval\n.'
        pass
    
    def getVarThreshold(self):
        'getVarThreshold() -> retval\n.   @brief Returns the variance threshold for the pixel-model match\n.   \n.   The main threshold on the squared Mahalanobis distance to decide if the sample is well described by\n.   the background model or not. Related to Cthr from the paper.'
        pass
    
    def getVarThresholdGen(self):
        'getVarThresholdGen() -> retval\n.   @brief Returns the variance threshold for the pixel-model match used for new mixture component generation\n.   \n.   Threshold for the squared Mahalanobis distance that helps decide when a sample is close to the\n.   existing components (corresponds to Tg in the paper). If a pixel is not close to any component, it\n.   is considered foreground or added as a new component. 3 sigma =\\> Tg=3\\*3=9 is default. A smaller Tg\n.   value generates more components. A higher Tg value may result in a small number of components but\n.   they can grow too large.'
        pass
    
    def setBackgroundRatio(self, ratio):
        'setBackgroundRatio(ratio) -> None\n.   @brief Sets the "background ratio" parameter of the algorithm'
        pass
    
    def setComplexityReductionThreshold(self, ct):
        'setComplexityReductionThreshold(ct) -> None\n.   @brief Sets the complexity reduction threshold'
        pass
    
    def setDetectShadows(self, detectShadows):
        'setDetectShadows(detectShadows) -> None\n.   @brief Enables or disables shadow detection'
        pass
    
    def setHistory(self, history):
        'setHistory(history) -> None\n.   @brief Sets the number of last frames that affect the background model'
        pass
    
    def setNMixtures(self, nmixtures):
        'setNMixtures(nmixtures) -> None\n.   @brief Sets the number of gaussian components in the background model.\n.   \n.   The model needs to be reinitalized to reserve memory.'
        pass
    
    def setShadowThreshold(self, threshold):
        'setShadowThreshold(threshold) -> None\n.   @brief Sets the shadow threshold'
        pass
    
    def setShadowValue(self, value):
        'setShadowValue(value) -> None\n.   @brief Sets the shadow value'
        pass
    
    def setVarInit(self, varInit):
        'setVarInit(varInit) -> None\n.   @brief Sets the initial variance of each gaussian component'
        pass
    
    def setVarMax(self, varMax):
        'setVarMax(varMax) -> None\n.'
        pass
    
    def setVarMin(self, varMin):
        'setVarMin(varMin) -> None\n.'
        pass
    
    def setVarThreshold(self, varThreshold):
        'setVarThreshold(varThreshold) -> None\n.   @brief Sets the variance threshold for the pixel-model match'
        pass
    
    def setVarThresholdGen(self, varThresholdGen):
        'setVarThresholdGen(varThresholdGen) -> None\n.   @brief Sets the variance threshold for the pixel-model match used for new mixture component generation'
        pass
    

class BaseCascadeClassifier(Algorithm):
    __class__ = BaseCascadeClassifier
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

CALIB_CB_ADAPTIVE_THRESH = 1
CALIB_CB_ASYMMETRIC_GRID = 2
CALIB_CB_CLUSTERING = 4
CALIB_CB_FAST_CHECK = 8
CALIB_CB_FILTER_QUADS = 4
CALIB_CB_NORMALIZE_IMAGE = 2
CALIB_CB_SYMMETRIC_GRID = 1
CALIB_FIX_ASPECT_RATIO = 2
CALIB_FIX_FOCAL_LENGTH = 16
CALIB_FIX_INTRINSIC = 256
CALIB_FIX_K1 = 32
CALIB_FIX_K2 = 64
CALIB_FIX_K3 = 128
CALIB_FIX_K4 = 2048
CALIB_FIX_K5 = 4096
CALIB_FIX_K6 = 8192
CALIB_FIX_PRINCIPAL_POINT = 4
CALIB_FIX_S1_S2_S3_S4 = 65536
CALIB_FIX_TANGENT_DIST = 2097152
CALIB_FIX_TAUX_TAUY = 524288
CALIB_RATIONAL_MODEL = 16384
CALIB_SAME_FOCAL_LENGTH = 512
CALIB_THIN_PRISM_MODEL = 32768
CALIB_TILTED_MODEL = 262144
CALIB_USE_EXTRINSIC_GUESS = 4194304
CALIB_USE_INTRINSIC_GUESS = 1
CALIB_USE_LU = 131072
CALIB_USE_QR = 1048576
CALIB_ZERO_DISPARITY = 1024
CALIB_ZERO_TANGENT_DIST = 8
CAP_ANDROID = 1000
CAP_ANY = 0
CAP_ARAVIS = 2100
CAP_AVFOUNDATION = 1200
CAP_CMU1394 = 300
CAP_DC1394 = 300
CAP_DSHOW = 700
CAP_FFMPEG = 1900
CAP_FIREWARE = 300
CAP_FIREWIRE = 300
CAP_GIGANETIX = 1300
CAP_GPHOTO2 = 1700
CAP_GSTREAMER = 1800
CAP_IEEE1394 = 300
CAP_IMAGES = 2000
CAP_INTELPERC = 1500
CAP_INTELPERC_DEPTH_GENERATOR = 536870912
CAP_INTELPERC_DEPTH_MAP = 0
CAP_INTELPERC_GENERATORS_MASK = 805306368
CAP_INTELPERC_IMAGE = 3
CAP_INTELPERC_IMAGE_GENERATOR = 268435456
CAP_INTELPERC_IR_MAP = 2
CAP_INTELPERC_UVDEPTH_MAP = 1
CAP_INTEL_MFX = 2300
CAP_MODE_BGR = 0
CAP_MODE_GRAY = 2
CAP_MODE_RGB = 1
CAP_MODE_YUYV = 3
CAP_MSMF = 1400
CAP_OPENCV_MJPEG = 2200
CAP_OPENNI = 900
CAP_OPENNI2 = 1600
CAP_OPENNI2_ASUS = 1610
CAP_OPENNI_ASUS = 910
CAP_OPENNI_BGR_IMAGE = 5
CAP_OPENNI_DEPTH_GENERATOR = -2147483648
CAP_OPENNI_DEPTH_GENERATOR_BASELINE = -2147483546
CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH = -2147483545
CAP_OPENNI_DEPTH_GENERATOR_PRESENT = -2147483539
CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION = -2147483544
CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = -2147483544
CAP_OPENNI_DEPTH_MAP = 0
CAP_OPENNI_DISPARITY_MAP = 2
CAP_OPENNI_DISPARITY_MAP_32F = 3
CAP_OPENNI_GENERATORS_MASK = -536870912
CAP_OPENNI_GRAY_IMAGE = 6
CAP_OPENNI_IMAGE_GENERATOR = 1073741824
CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE = 1073741924
CAP_OPENNI_IMAGE_GENERATOR_PRESENT = 1073741933
CAP_OPENNI_IR_GENERATOR = 536870912
CAP_OPENNI_IR_GENERATOR_PRESENT = 536871021
CAP_OPENNI_IR_IMAGE = 7
CAP_OPENNI_POINT_CLOUD_MAP = 1
CAP_OPENNI_QVGA_30HZ = 3
CAP_OPENNI_QVGA_60HZ = 4
CAP_OPENNI_SXGA_15HZ = 1
CAP_OPENNI_SXGA_30HZ = 2
CAP_OPENNI_VALID_DEPTH_MASK = 4
CAP_OPENNI_VGA_30HZ = 0
CAP_PROP_APERTURE = 17008
CAP_PROP_AUTOFOCUS = 39
CAP_PROP_AUTO_EXPOSURE = 21
CAP_PROP_BACKLIGHT = 32
CAP_PROP_BRIGHTNESS = 10
CAP_PROP_BUFFERSIZE = 38
CAP_PROP_CONTRAST = 11
CAP_PROP_CONVERT_RGB = 16
CAP_PROP_DC1394_MAX = 31
CAP_PROP_DC1394_MODE_AUTO = -2
CAP_PROP_DC1394_MODE_MANUAL = -3
CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1
CAP_PROP_DC1394_OFF = -4
CAP_PROP_EXPOSURE = 15
CAP_PROP_EXPOSUREPROGRAM = 17009
CAP_PROP_FOCUS = 28
CAP_PROP_FORMAT = 8
CAP_PROP_FOURCC = 6
CAP_PROP_FPS = 5
CAP_PROP_FRAME_COUNT = 7
CAP_PROP_FRAME_HEIGHT = 4
CAP_PROP_FRAME_WIDTH = 3
CAP_PROP_GAIN = 14
CAP_PROP_GAMMA = 22
CAP_PROP_GIGA_FRAME_HEIGH_MAX = 10004
CAP_PROP_GIGA_FRAME_OFFSET_X = 10001
CAP_PROP_GIGA_FRAME_OFFSET_Y = 10002
CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006
CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005
CAP_PROP_GIGA_FRAME_WIDTH_MAX = 10003
CAP_PROP_GPHOTO2_COLLECT_MSGS = 17005
CAP_PROP_GPHOTO2_FLUSH_MSGS = 17006
CAP_PROP_GPHOTO2_PREVIEW = 17001
CAP_PROP_GPHOTO2_RELOAD_CONFIG = 17003
CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE = 17004
CAP_PROP_GPHOTO2_WIDGET_ENUMERATE = 17002
CAP_PROP_GSTREAMER_QUEUE_LENGTH = 200
CAP_PROP_GUID = 29
CAP_PROP_HUE = 13
CAP_PROP_IMAGES_BASE = 18000
CAP_PROP_IMAGES_LAST = 19000
CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD = 11005
CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ = 11006
CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT = 11007
CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE = 11003
CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE = 11004
CAP_PROP_INTELPERC_PROFILE_COUNT = 11001
CAP_PROP_INTELPERC_PROFILE_IDX = 11002
CAP_PROP_IOS_DEVICE_EXPOSURE = 9002
CAP_PROP_IOS_DEVICE_FLASH = 9003
CAP_PROP_IOS_DEVICE_FOCUS = 9001
CAP_PROP_IOS_DEVICE_TORCH = 9005
CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004
CAP_PROP_IRIS = 36
CAP_PROP_ISO_SPEED = 30
CAP_PROP_MODE = 9
CAP_PROP_MONOCHROME = 19
CAP_PROP_OPENNI2_MIRROR = 111
CAP_PROP_OPENNI2_SYNC = 110
CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105
CAP_PROP_OPENNI_BASELINE = 102
CAP_PROP_OPENNI_CIRCLE_BUFFER = 107
CAP_PROP_OPENNI_FOCAL_LENGTH = 103
CAP_PROP_OPENNI_FRAME_MAX_DEPTH = 101
CAP_PROP_OPENNI_GENERATOR_PRESENT = 109
CAP_PROP_OPENNI_MAX_BUFFER_SIZE = 106
CAP_PROP_OPENNI_MAX_TIME_DURATION = 108
CAP_PROP_OPENNI_OUTPUT_MODE = 100
CAP_PROP_OPENNI_REGISTRATION = 104
CAP_PROP_OPENNI_REGISTRATION_ON = 104
CAP_PROP_PAN = 33
CAP_PROP_POS_AVI_RATIO = 2
CAP_PROP_POS_FRAMES = 1
CAP_PROP_POS_MSEC = 0
CAP_PROP_PVAPI_BINNINGX = 304
CAP_PROP_PVAPI_BINNINGY = 305
CAP_PROP_PVAPI_DECIMATIONHORIZONTAL = 302
CAP_PROP_PVAPI_DECIMATIONVERTICAL = 303
CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE = 301
CAP_PROP_PVAPI_MULTICASTIP = 300
CAP_PROP_PVAPI_PIXELFORMAT = 306
CAP_PROP_RECTIFICATION = 18
CAP_PROP_ROLL = 35
CAP_PROP_SAR_DEN = 41
CAP_PROP_SAR_NUM = 40
CAP_PROP_SATURATION = 12
CAP_PROP_SETTINGS = 37
CAP_PROP_SHARPNESS = 20
CAP_PROP_SPEED = 17007
CAP_PROP_TEMPERATURE = 23
CAP_PROP_TILT = 34
CAP_PROP_TRIGGER = 24
CAP_PROP_TRIGGER_DELAY = 25
CAP_PROP_VIEWFINDER = 17010
CAP_PROP_WHITE_BALANCE_BLUE_U = 17
CAP_PROP_WHITE_BALANCE_RED_V = 26
CAP_PROP_XI_ACQ_BUFFER_SIZE = 548
CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT = 549
CAP_PROP_XI_ACQ_FRAME_BURST_COUNT = 499
CAP_PROP_XI_ACQ_TIMING_MODE = 538
CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT = 552
CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE = 550
CAP_PROP_XI_AEAG = 415
CAP_PROP_XI_AEAG_LEVEL = 419
CAP_PROP_XI_AEAG_ROI_HEIGHT = 442
CAP_PROP_XI_AEAG_ROI_OFFSET_X = 439
CAP_PROP_XI_AEAG_ROI_OFFSET_Y = 440
CAP_PROP_XI_AEAG_ROI_WIDTH = 441
CAP_PROP_XI_AE_MAX_LIMIT = 417
CAP_PROP_XI_AG_MAX_LIMIT = 418
CAP_PROP_XI_APPLY_CMS = 471
CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION = 573
CAP_PROP_XI_AUTO_WB = 414
CAP_PROP_XI_AVAILABLE_BANDWIDTH = 539
CAP_PROP_XI_BINNING_HORIZONTAL = 429
CAP_PROP_XI_BINNING_PATTERN = 430
CAP_PROP_XI_BINNING_SELECTOR = 427
CAP_PROP_XI_BINNING_VERTICAL = 428
CAP_PROP_XI_BPC = 445
CAP_PROP_XI_BUFFERS_QUEUE_SIZE = 551
CAP_PROP_XI_BUFFER_POLICY = 540
CAP_PROP_XI_CC_MATRIX_00 = 479
CAP_PROP_XI_CC_MATRIX_01 = 480
CAP_PROP_XI_CC_MATRIX_02 = 481
CAP_PROP_XI_CC_MATRIX_03 = 482
CAP_PROP_XI_CC_MATRIX_10 = 483
CAP_PROP_XI_CC_MATRIX_11 = 484
CAP_PROP_XI_CC_MATRIX_12 = 485
CAP_PROP_XI_CC_MATRIX_13 = 486
CAP_PROP_XI_CC_MATRIX_20 = 487
CAP_PROP_XI_CC_MATRIX_21 = 488
CAP_PROP_XI_CC_MATRIX_22 = 489
CAP_PROP_XI_CC_MATRIX_23 = 490
CAP_PROP_XI_CC_MATRIX_30 = 491
CAP_PROP_XI_CC_MATRIX_31 = 492
CAP_PROP_XI_CC_MATRIX_32 = 493
CAP_PROP_XI_CC_MATRIX_33 = 494
CAP_PROP_XI_CHIP_TEMP = 468
CAP_PROP_XI_CMS = 470
CAP_PROP_XI_COLOR_FILTER_ARRAY = 475
CAP_PROP_XI_COLUMN_FPN_CORRECTION = 555
CAP_PROP_XI_COOLING = 466
CAP_PROP_XI_COUNTER_SELECTOR = 536
CAP_PROP_XI_COUNTER_VALUE = 537
CAP_PROP_XI_DATA_FORMAT = 401
CAP_PROP_XI_DEBOUNCE_EN = 507
CAP_PROP_XI_DEBOUNCE_POL = 510
CAP_PROP_XI_DEBOUNCE_T0 = 508
CAP_PROP_XI_DEBOUNCE_T1 = 509
CAP_PROP_XI_DEBUG_LEVEL = 572
CAP_PROP_XI_DECIMATION_HORIZONTAL = 433
CAP_PROP_XI_DECIMATION_PATTERN = 434
CAP_PROP_XI_DECIMATION_SELECTOR = 431
CAP_PROP_XI_DECIMATION_VERTICAL = 432
CAP_PROP_XI_DEFAULT_CC_MATRIX = 495
CAP_PROP_XI_DEVICE_MODEL_ID = 521
CAP_PROP_XI_DEVICE_RESET = 554
CAP_PROP_XI_DEVICE_SN = 522
CAP_PROP_XI_DOWNSAMPLING = 400
CAP_PROP_XI_DOWNSAMPLING_TYPE = 426
CAP_PROP_XI_EXPOSURE = 421
CAP_PROP_XI_EXPOSURE_BURST_COUNT = 422
CAP_PROP_XI_EXP_PRIORITY = 416
CAP_PROP_XI_FFS_ACCESS_KEY = 583
CAP_PROP_XI_FFS_FILE_ID = 594
CAP_PROP_XI_FFS_FILE_SIZE = 580
CAP_PROP_XI_FRAMERATE = 535
CAP_PROP_XI_FREE_FFS_SIZE = 581
CAP_PROP_XI_GAIN = 424
CAP_PROP_XI_GAIN_SELECTOR = 423
CAP_PROP_XI_GAMMAC = 477
CAP_PROP_XI_GAMMAY = 476
CAP_PROP_XI_GPI_LEVEL = 408
CAP_PROP_XI_GPI_MODE = 407
CAP_PROP_XI_GPI_SELECTOR = 406
CAP_PROP_XI_GPO_MODE = 410
CAP_PROP_XI_GPO_SELECTOR = 409
CAP_PROP_XI_HDR = 559
CAP_PROP_XI_HDR_KNEEPOINT_COUNT = 560
CAP_PROP_XI_HDR_T1 = 561
CAP_PROP_XI_HDR_T2 = 562
CAP_PROP_XI_HEIGHT = 452
CAP_PROP_XI_HOUS_BACK_SIDE_TEMP = 590
CAP_PROP_XI_HOUS_TEMP = 469
CAP_PROP_XI_HW_REVISION = 571
CAP_PROP_XI_IMAGE_BLACK_LEVEL = 565
CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH = 462
CAP_PROP_XI_IMAGE_DATA_FORMAT = 435
CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA = 529
CAP_PROP_XI_IMAGE_IS_COLOR = 474
CAP_PROP_XI_IMAGE_PAYLOAD_SIZE = 530
CAP_PROP_XI_IS_COOLED = 465
CAP_PROP_XI_IS_DEVICE_EXIST = 547
CAP_PROP_XI_KNEEPOINT1 = 563
CAP_PROP_XI_KNEEPOINT2 = 564
CAP_PROP_XI_LED_MODE = 412
CAP_PROP_XI_LED_SELECTOR = 411
CAP_PROP_XI_LENS_APERTURE_VALUE = 512
CAP_PROP_XI_LENS_FEATURE = 518
CAP_PROP_XI_LENS_FEATURE_SELECTOR = 517
CAP_PROP_XI_LENS_FOCAL_LENGTH = 516
CAP_PROP_XI_LENS_FOCUS_DISTANCE = 515
CAP_PROP_XI_LENS_FOCUS_MOVE = 514
CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE = 513
CAP_PROP_XI_LENS_MODE = 511
CAP_PROP_XI_LIMIT_BANDWIDTH = 459
CAP_PROP_XI_LUT_EN = 541
CAP_PROP_XI_LUT_INDEX = 542
CAP_PROP_XI_LUT_VALUE = 543
CAP_PROP_XI_MANUAL_WB = 413
CAP_PROP_XI_OFFSET_X = 402
CAP_PROP_XI_OFFSET_Y = 403
CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH = 461
CAP_PROP_XI_OUTPUT_DATA_PACKING = 463
CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE = 464
CAP_PROP_XI_RECENT_FRAME = 553
CAP_PROP_XI_REGION_MODE = 595
CAP_PROP_XI_REGION_SELECTOR = 589
CAP_PROP_XI_ROW_FPN_CORRECTION = 591
CAP_PROP_XI_SENSOR_BOARD_TEMP = 596
CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ = 532
CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX = 533
CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH = 460
CAP_PROP_XI_SENSOR_FEATURE_SELECTOR = 585
CAP_PROP_XI_SENSOR_FEATURE_VALUE = 586
CAP_PROP_XI_SENSOR_MODE = 558
CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT = 534
CAP_PROP_XI_SENSOR_TAPS = 437
CAP_PROP_XI_SHARPNESS = 478
CAP_PROP_XI_SHUTTER_TYPE = 436
CAP_PROP_XI_TARGET_TEMP = 467
CAP_PROP_XI_TEST_PATTERN = 588
CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR = 587
CAP_PROP_XI_TIMEOUT = 420
CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT = 531
CAP_PROP_XI_TRG_DELAY = 544
CAP_PROP_XI_TRG_SELECTOR = 498
CAP_PROP_XI_TRG_SOFTWARE = 405
CAP_PROP_XI_TRG_SOURCE = 404
CAP_PROP_XI_TS_RST_MODE = 545
CAP_PROP_XI_TS_RST_SOURCE = 546
CAP_PROP_XI_USED_FFS_SIZE = 582
CAP_PROP_XI_WB_KB = 450
CAP_PROP_XI_WB_KG = 449
CAP_PROP_XI_WB_KR = 448
CAP_PROP_XI_WIDTH = 451
CAP_PROP_ZOOM = 27
CAP_PVAPI = 800
CAP_PVAPI_DECIMATION_2OUTOF16 = 8
CAP_PVAPI_DECIMATION_2OUTOF4 = 2
CAP_PVAPI_DECIMATION_2OUTOF8 = 4
CAP_PVAPI_DECIMATION_OFF = 1
CAP_PVAPI_FSTRIGMODE_FIXEDRATE = 3
CAP_PVAPI_FSTRIGMODE_FREERUN = 0
CAP_PVAPI_FSTRIGMODE_SOFTWARE = 4
CAP_PVAPI_FSTRIGMODE_SYNCIN1 = 1
CAP_PVAPI_FSTRIGMODE_SYNCIN2 = 2
CAP_PVAPI_PIXELFORMAT_BAYER16 = 4
CAP_PVAPI_PIXELFORMAT_BAYER8 = 3
CAP_PVAPI_PIXELFORMAT_BGR24 = 6
CAP_PVAPI_PIXELFORMAT_BGRA32 = 8
CAP_PVAPI_PIXELFORMAT_MONO16 = 2
CAP_PVAPI_PIXELFORMAT_MONO8 = 1
CAP_PVAPI_PIXELFORMAT_RGB24 = 5
CAP_PVAPI_PIXELFORMAT_RGBA32 = 7
CAP_QT = 500
CAP_UNICAP = 600
CAP_V4L = 200
CAP_V4L2 = 200
CAP_VFW = 200
CAP_WINRT = 1410
CAP_XIAPI = 1100
CAP_XINE = 2400
CASCADE_DO_CANNY_PRUNING = 1
CASCADE_DO_ROUGH_SEARCH = 8
CASCADE_FIND_BIGGEST_OBJECT = 4
CASCADE_SCALE_IMAGE = 2
CCL_DEFAULT = -1
CCL_GRANA = 1
CCL_WU = 0
CC_STAT_AREA = 4
CC_STAT_HEIGHT = 3
CC_STAT_LEFT = 0
CC_STAT_MAX = 5
CC_STAT_TOP = 1
CC_STAT_WIDTH = 2
CHAIN_APPROX_NONE = 1
CHAIN_APPROX_SIMPLE = 2
CHAIN_APPROX_TC89_KCOS = 4
CHAIN_APPROX_TC89_L1 = 3
CIRCLES_GRID_FINDER_PARAMETERS_ASYMMETRIC_GRID = 1
CIRCLES_GRID_FINDER_PARAMETERS_SYMMETRIC_GRID = 0
class CLAHE(Algorithm):
    __class__ = CLAHE
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, src, dst=None):
        'apply(src[, dst]) -> dst\n.   @brief Equalizes the histogram of a grayscale image using Contrast Limited Adaptive Histogram Equalization.\n.   \n.   @param src Source image with CV_8UC1 type.\n.   @param dst Destination image.'
        pass
    
    def collectGarbage(self):
        'collectGarbage() -> None\n.'
        pass
    
    def getClipLimit(self):
        'getClipLimit() -> retval\n.'
        pass
    
    def getTilesGridSize(self):
        'getTilesGridSize() -> retval\n.'
        pass
    
    def setClipLimit(self, clipLimit):
        'setClipLimit(clipLimit) -> None\n.   @brief Sets threshold for contrast limiting.\n.   \n.   @param clipLimit threshold value.'
        pass
    
    def setTilesGridSize(self, tileGridSize):
        'setTilesGridSize(tileGridSize) -> None\n.   @brief Sets size of grid for histogram equalization. Input image will be divided into\n.   equally sized rectangular tiles.\n.   \n.   @param tileGridSize defines the number of tiles in row and column.'
        pass
    

CMP_EQ = 0
CMP_GE = 2
CMP_GT = 1
CMP_LE = 4
CMP_LT = 3
CMP_NE = 5
COLORMAP_AUTUMN = 0
COLORMAP_BONE = 1
COLORMAP_COOL = 8
COLORMAP_HOT = 11
COLORMAP_HSV = 9
COLORMAP_JET = 2
COLORMAP_OCEAN = 5
COLORMAP_PARULA = 12
COLORMAP_PINK = 10
COLORMAP_RAINBOW = 4
COLORMAP_SPRING = 7
COLORMAP_SUMMER = 6
COLORMAP_WINTER = 3
COLOR_BAYER_BG2BGR = 46
COLOR_BAYER_BG2BGRA = 139
COLOR_BAYER_BG2BGR_EA = 135
COLOR_BAYER_BG2BGR_VNG = 62
COLOR_BAYER_BG2GRAY = 86
COLOR_BAYER_BG2RGB = 48
COLOR_BAYER_BG2RGBA = 141
COLOR_BAYER_BG2RGB_EA = 137
COLOR_BAYER_BG2RGB_VNG = 64
COLOR_BAYER_GB2BGR = 47
COLOR_BAYER_GB2BGRA = 140
COLOR_BAYER_GB2BGR_EA = 136
COLOR_BAYER_GB2BGR_VNG = 63
COLOR_BAYER_GB2GRAY = 87
COLOR_BAYER_GB2RGB = 49
COLOR_BAYER_GB2RGBA = 142
COLOR_BAYER_GB2RGB_EA = 138
COLOR_BAYER_GB2RGB_VNG = 65
COLOR_BAYER_GR2BGR = 49
COLOR_BAYER_GR2BGRA = 142
COLOR_BAYER_GR2BGR_EA = 138
COLOR_BAYER_GR2BGR_VNG = 65
COLOR_BAYER_GR2GRAY = 89
COLOR_BAYER_GR2RGB = 47
COLOR_BAYER_GR2RGBA = 140
COLOR_BAYER_GR2RGB_EA = 136
COLOR_BAYER_GR2RGB_VNG = 63
COLOR_BAYER_RG2BGR = 48
COLOR_BAYER_RG2BGRA = 141
COLOR_BAYER_RG2BGR_EA = 137
COLOR_BAYER_RG2BGR_VNG = 64
COLOR_BAYER_RG2GRAY = 88
COLOR_BAYER_RG2RGB = 46
COLOR_BAYER_RG2RGBA = 139
COLOR_BAYER_RG2RGB_EA = 135
COLOR_BAYER_RG2RGB_VNG = 62
COLOR_BGR2BGR555 = 22
COLOR_BGR2BGR565 = 12
COLOR_BGR2BGRA = 0
COLOR_BGR2GRAY = 6
COLOR_BGR2HLS = 52
COLOR_BGR2HLS_FULL = 68
COLOR_BGR2HSV = 40
COLOR_BGR2HSV_FULL = 66
COLOR_BGR2LAB = 44
COLOR_BGR2LUV = 50
COLOR_BGR2Lab = 44
COLOR_BGR2Luv = 50
COLOR_BGR2RGB = 4
COLOR_BGR2RGBA = 2
COLOR_BGR2XYZ = 32
COLOR_BGR2YCR_CB = 36
COLOR_BGR2YCrCb = 36
COLOR_BGR2YUV = 82
COLOR_BGR2YUV_I420 = 128
COLOR_BGR2YUV_IYUV = 128
COLOR_BGR2YUV_YV12 = 132
COLOR_BGR5552BGR = 24
COLOR_BGR5552BGRA = 28
COLOR_BGR5552GRAY = 31
COLOR_BGR5552RGB = 25
COLOR_BGR5552RGBA = 29
COLOR_BGR5652BGR = 14
COLOR_BGR5652BGRA = 18
COLOR_BGR5652GRAY = 21
COLOR_BGR5652RGB = 15
COLOR_BGR5652RGBA = 19
COLOR_BGRA2BGR = 1
COLOR_BGRA2BGR555 = 26
COLOR_BGRA2BGR565 = 16
COLOR_BGRA2GRAY = 10
COLOR_BGRA2RGB = 3
COLOR_BGRA2RGBA = 5
COLOR_BGRA2YUV_I420 = 130
COLOR_BGRA2YUV_IYUV = 130
COLOR_BGRA2YUV_YV12 = 134
COLOR_BayerBG2BGR = 46
COLOR_BayerBG2BGRA = 139
COLOR_BayerBG2BGR_EA = 135
COLOR_BayerBG2BGR_VNG = 62
COLOR_BayerBG2GRAY = 86
COLOR_BayerBG2RGB = 48
COLOR_BayerBG2RGBA = 141
COLOR_BayerBG2RGB_EA = 137
COLOR_BayerBG2RGB_VNG = 64
COLOR_BayerGB2BGR = 47
COLOR_BayerGB2BGRA = 140
COLOR_BayerGB2BGR_EA = 136
COLOR_BayerGB2BGR_VNG = 63
COLOR_BayerGB2GRAY = 87
COLOR_BayerGB2RGB = 49
COLOR_BayerGB2RGBA = 142
COLOR_BayerGB2RGB_EA = 138
COLOR_BayerGB2RGB_VNG = 65
COLOR_BayerGR2BGR = 49
COLOR_BayerGR2BGRA = 142
COLOR_BayerGR2BGR_EA = 138
COLOR_BayerGR2BGR_VNG = 65
COLOR_BayerGR2GRAY = 89
COLOR_BayerGR2RGB = 47
COLOR_BayerGR2RGBA = 140
COLOR_BayerGR2RGB_EA = 136
COLOR_BayerGR2RGB_VNG = 63
COLOR_BayerRG2BGR = 48
COLOR_BayerRG2BGRA = 141
COLOR_BayerRG2BGR_EA = 137
COLOR_BayerRG2BGR_VNG = 64
COLOR_BayerRG2GRAY = 88
COLOR_BayerRG2RGB = 46
COLOR_BayerRG2RGBA = 139
COLOR_BayerRG2RGB_EA = 135
COLOR_BayerRG2RGB_VNG = 62
COLOR_COLORCVT_MAX = 143
COLOR_GRAY2BGR = 8
COLOR_GRAY2BGR555 = 30
COLOR_GRAY2BGR565 = 20
COLOR_GRAY2BGRA = 9
COLOR_GRAY2RGB = 8
COLOR_GRAY2RGBA = 9
COLOR_HLS2BGR = 60
COLOR_HLS2BGR_FULL = 72
COLOR_HLS2RGB = 61
COLOR_HLS2RGB_FULL = 73
COLOR_HSV2BGR = 54
COLOR_HSV2BGR_FULL = 70
COLOR_HSV2RGB = 55
COLOR_HSV2RGB_FULL = 71
COLOR_LAB2BGR = 56
COLOR_LAB2LBGR = 78
COLOR_LAB2LRGB = 79
COLOR_LAB2RGB = 57
COLOR_LBGR2LAB = 74
COLOR_LBGR2LUV = 76
COLOR_LBGR2Lab = 74
COLOR_LBGR2Luv = 76
COLOR_LRGB2LAB = 75
COLOR_LRGB2LUV = 77
COLOR_LRGB2Lab = 75
COLOR_LRGB2Luv = 77
COLOR_LUV2BGR = 58
COLOR_LUV2LBGR = 80
COLOR_LUV2LRGB = 81
COLOR_LUV2RGB = 59
COLOR_Lab2BGR = 56
COLOR_Lab2LBGR = 78
COLOR_Lab2LRGB = 79
COLOR_Lab2RGB = 57
COLOR_Luv2BGR = 58
COLOR_Luv2LBGR = 80
COLOR_Luv2LRGB = 81
COLOR_Luv2RGB = 59
COLOR_M_RGBA2RGBA = 126
COLOR_RGB2BGR = 4
COLOR_RGB2BGR555 = 23
COLOR_RGB2BGR565 = 13
COLOR_RGB2BGRA = 2
COLOR_RGB2GRAY = 7
COLOR_RGB2HLS = 53
COLOR_RGB2HLS_FULL = 69
COLOR_RGB2HSV = 41
COLOR_RGB2HSV_FULL = 67
COLOR_RGB2LAB = 45
COLOR_RGB2LUV = 51
COLOR_RGB2Lab = 45
COLOR_RGB2Luv = 51
COLOR_RGB2RGBA = 0
COLOR_RGB2XYZ = 33
COLOR_RGB2YCR_CB = 37
COLOR_RGB2YCrCb = 37
COLOR_RGB2YUV = 83
COLOR_RGB2YUV_I420 = 127
COLOR_RGB2YUV_IYUV = 127
COLOR_RGB2YUV_YV12 = 131
COLOR_RGBA2BGR = 3
COLOR_RGBA2BGR555 = 27
COLOR_RGBA2BGR565 = 17
COLOR_RGBA2BGRA = 5
COLOR_RGBA2GRAY = 11
COLOR_RGBA2M_RGBA = 125
COLOR_RGBA2RGB = 1
COLOR_RGBA2YUV_I420 = 129
COLOR_RGBA2YUV_IYUV = 129
COLOR_RGBA2YUV_YV12 = 133
COLOR_RGBA2mRGBA = 125
COLOR_XYZ2BGR = 34
COLOR_XYZ2RGB = 35
COLOR_YCR_CB2BGR = 38
COLOR_YCR_CB2RGB = 39
COLOR_YCrCb2BGR = 38
COLOR_YCrCb2RGB = 39
COLOR_YUV2BGR = 84
COLOR_YUV2BGRA_I420 = 105
COLOR_YUV2BGRA_IYUV = 105
COLOR_YUV2BGRA_NV12 = 95
COLOR_YUV2BGRA_NV21 = 97
COLOR_YUV2BGRA_UYNV = 112
COLOR_YUV2BGRA_UYVY = 112
COLOR_YUV2BGRA_Y422 = 112
COLOR_YUV2BGRA_YUNV = 120
COLOR_YUV2BGRA_YUY2 = 120
COLOR_YUV2BGRA_YUYV = 120
COLOR_YUV2BGRA_YV12 = 103
COLOR_YUV2BGRA_YVYU = 122
COLOR_YUV2BGR_I420 = 101
COLOR_YUV2BGR_IYUV = 101
COLOR_YUV2BGR_NV12 = 91
COLOR_YUV2BGR_NV21 = 93
COLOR_YUV2BGR_UYNV = 108
COLOR_YUV2BGR_UYVY = 108
COLOR_YUV2BGR_Y422 = 108
COLOR_YUV2BGR_YUNV = 116
COLOR_YUV2BGR_YUY2 = 116
COLOR_YUV2BGR_YUYV = 116
COLOR_YUV2BGR_YV12 = 99
COLOR_YUV2BGR_YVYU = 118
COLOR_YUV2GRAY_420 = 106
COLOR_YUV2GRAY_I420 = 106
COLOR_YUV2GRAY_IYUV = 106
COLOR_YUV2GRAY_NV12 = 106
COLOR_YUV2GRAY_NV21 = 106
COLOR_YUV2GRAY_UYNV = 123
COLOR_YUV2GRAY_UYVY = 123
COLOR_YUV2GRAY_Y422 = 123
COLOR_YUV2GRAY_YUNV = 124
COLOR_YUV2GRAY_YUY2 = 124
COLOR_YUV2GRAY_YUYV = 124
COLOR_YUV2GRAY_YV12 = 106
COLOR_YUV2GRAY_YVYU = 124
COLOR_YUV2RGB = 85
COLOR_YUV2RGBA_I420 = 104
COLOR_YUV2RGBA_IYUV = 104
COLOR_YUV2RGBA_NV12 = 94
COLOR_YUV2RGBA_NV21 = 96
COLOR_YUV2RGBA_UYNV = 111
COLOR_YUV2RGBA_UYVY = 111
COLOR_YUV2RGBA_Y422 = 111
COLOR_YUV2RGBA_YUNV = 119
COLOR_YUV2RGBA_YUY2 = 119
COLOR_YUV2RGBA_YUYV = 119
COLOR_YUV2RGBA_YV12 = 102
COLOR_YUV2RGBA_YVYU = 121
COLOR_YUV2RGB_I420 = 100
COLOR_YUV2RGB_IYUV = 100
COLOR_YUV2RGB_NV12 = 90
COLOR_YUV2RGB_NV21 = 92
COLOR_YUV2RGB_UYNV = 107
COLOR_YUV2RGB_UYVY = 107
COLOR_YUV2RGB_Y422 = 107
COLOR_YUV2RGB_YUNV = 115
COLOR_YUV2RGB_YUY2 = 115
COLOR_YUV2RGB_YUYV = 115
COLOR_YUV2RGB_YV12 = 98
COLOR_YUV2RGB_YVYU = 117
COLOR_YUV420P2BGR = 99
COLOR_YUV420P2BGRA = 103
COLOR_YUV420P2GRAY = 106
COLOR_YUV420P2RGB = 98
COLOR_YUV420P2RGBA = 102
COLOR_YUV420SP2BGR = 93
COLOR_YUV420SP2BGRA = 97
COLOR_YUV420SP2GRAY = 106
COLOR_YUV420SP2RGB = 92
COLOR_YUV420SP2RGBA = 96
COLOR_YUV420p2BGR = 99
COLOR_YUV420p2BGRA = 103
COLOR_YUV420p2GRAY = 106
COLOR_YUV420p2RGB = 98
COLOR_YUV420p2RGBA = 102
COLOR_YUV420sp2BGR = 93
COLOR_YUV420sp2BGRA = 97
COLOR_YUV420sp2GRAY = 106
COLOR_YUV420sp2RGB = 92
COLOR_YUV420sp2RGBA = 96
COLOR_mRGBA2RGBA = 126
CONTOURS_MATCH_I1 = 1
CONTOURS_MATCH_I2 = 2
CONTOURS_MATCH_I3 = 3
COVAR_COLS = 16
COVAR_NORMAL = 1
COVAR_ROWS = 8
COVAR_SCALE = 4
COVAR_SCRAMBLED = 0
COVAR_USE_AVG = 2
CV_16S = 3
CV_16SC1 = 3
CV_16SC2 = 11
CV_16SC3 = 19
CV_16SC4 = 27
CV_16U = 2
CV_16UC1 = 2
CV_16UC2 = 10
CV_16UC3 = 18
CV_16UC4 = 26
CV_32F = 5
CV_32FC1 = 5
CV_32FC2 = 13
CV_32FC3 = 21
CV_32FC4 = 29
CV_32S = 4
CV_32SC1 = 4
CV_32SC2 = 12
CV_32SC3 = 20
CV_32SC4 = 28
CV_64F = 6
CV_64FC1 = 6
CV_64FC2 = 14
CV_64FC3 = 22
CV_64FC4 = 30
CV_8S = 1
CV_8SC1 = 1
CV_8SC2 = 9
CV_8SC3 = 17
CV_8SC4 = 25
CV_8U = 0
CV_8UC1 = 0
CV_8UC2 = 8
CV_8UC3 = 16
CV_8UC4 = 24
CV_FEATURE_PARAMS_HAAR = 0
CV_FEATURE_PARAMS_HOG = 2
CV_FEATURE_PARAMS_LBP = 1
class CalibrateCRF(Algorithm):
    __class__ = CalibrateCRF
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def process(self, src, times, dst=None):
        'process(src, times[, dst]) -> dst\n.   @brief Recovers inverse camera response.\n.   \n.   @param src vector of input images\n.   @param dst 256x1 matrix with inverse camera response function\n.   @param times vector of exposure time values for each image'
        pass
    

class CalibrateDebevec(CalibrateCRF):
    __class__ = CalibrateDebevec
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getLambda(self):
        'getLambda() -> retval\n.'
        pass
    
    def getRandom(self):
        'getRandom() -> retval\n.'
        pass
    
    def getSamples(self):
        'getSamples() -> retval\n.'
        pass
    
    def setLambda(self, lambda_):
        'setLambda(lambda) -> None\n.'
        pass
    
    def setRandom(self, random):
        'setRandom(random) -> None\n.'
        pass
    
    def setSamples(self, samples):
        'setSamples(samples) -> None\n.'
        pass
    

class CalibrateRobertson(CalibrateCRF):
    __class__ = CalibrateRobertson
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getMaxIter(self):
        'getMaxIter() -> retval\n.'
        pass
    
    def getRadiance(self):
        'getRadiance() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def setMaxIter(self, max_iter):
        'setMaxIter(max_iter) -> None\n.'
        pass
    
    def setThreshold(self, threshold):
        'setThreshold(threshold) -> None\n.'
        pass
    

def CamShift(probImage, window, criteria):
    'CamShift(probImage, window, criteria) -> retval, window\n.   @brief Finds an object center, size, and orientation.\n.   \n.   @param probImage Back projection of the object histogram. See calcBackProject.\n.   @param window Initial search window.\n.   @param criteria Stop criteria for the underlying meanShift.\n.   returns\n.   (in old interfaces) Number of iterations CAMSHIFT took to converge\n.   The function implements the CAMSHIFT object tracking algorithm @cite Bradski98 . First, it finds an\n.   object center using meanShift and then adjusts the window size and finds the optimal rotation. The\n.   function returns the rotated rectangle structure that includes the object position, size, and\n.   orientation. The next position of the search window can be obtained with RotatedRect::boundingRect()\n.   \n.   See the OpenCV sample camshiftdemo.c that tracks colored objects.\n.   \n.   @note\n.   -   (Python) A sample explaining the camshift tracking algorithm can be found at\n.   opencv_source_code/samples/python/camshift.py'
    pass

def Canny(image, threshold1, threshold2, edges=None, apertureSize=None, L2gradient=None):
    'Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]) -> edges\n.   @brief Finds edges in an image using the Canny algorithm @cite Canny86 .\n.   \n.   The function finds edges in the input image and marks them in the output map edges using the\n.   Canny algorithm. The smallest value between threshold1 and threshold2 is used for edge linking. The\n.   largest value is used to find initial segments of strong edges. See\n.   <http://en.wikipedia.org/wiki/Canny_edge_detector>\n.   \n.   @param image 8-bit input image.\n.   @param edges output edge map; single channels 8-bit image, which has the same size as image .\n.   @param threshold1 first threshold for the hysteresis procedure.\n.   @param threshold2 second threshold for the hysteresis procedure.\n.   @param apertureSize aperture size for the Sobel operator.\n.   @param L2gradient a flag, indicating whether a more accurate \\f$L_2\\f$ norm\n.   \\f$=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\f$ should be used to calculate the image gradient magnitude (\n.   L2gradient=true ), or whether the default \\f$L_1\\f$ norm \\f$=|dI/dx|+|dI/dy|\\f$ is enough (\n.   L2gradient=false ).\n\n\n\nCanny(dx, dy, threshold1, threshold2[, edges[, L2gradient]]) -> edges\n.   \\overload\n.   \n.   Finds edges in an image using the Canny algorithm with custom image gradient.\n.   \n.   @param dx 16-bit x derivative of input image (CV_16SC1 or CV_16SC3).\n.   @param dy 16-bit y derivative of input image (same type as dx).\n.   @param edges output edge map; single channels 8-bit image, which has the same size as image .\n.   @param threshold1 first threshold for the hysteresis procedure.\n.   @param threshold2 second threshold for the hysteresis procedure.\n.   @param L2gradient a flag, indicating whether a more accurate \\f$L_2\\f$ norm\n.   \\f$=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\f$ should be used to calculate the image gradient magnitude (\n.   L2gradient=true ), or whether the default \\f$L_1\\f$ norm \\f$=|dI/dx|+|dI/dy|\\f$ is enough (\n.   L2gradient=false ).'
    pass

class CascadeClassifier(_mod_builtins.object):
    __class__ = CascadeClassifier
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def convert(cls, oldcascade, newcascade):
        'convert(oldcascade, newcascade) -> retval\n.'
        pass
    
    def detectMultiScale(self, image, scaleFactor=None, minNeighbors=None, flags=None, minSize=None, maxSize=None):
        'detectMultiScale(image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize]]]]]) -> objects\n.   @brief Detects objects of different sizes in the input image. The detected objects are returned as a list\n.   of rectangles.\n.   \n.   @param image Matrix of the type CV_8U containing an image where objects are detected.\n.   @param objects Vector of rectangles where each rectangle contains the detected object, the\n.   rectangles may be partially outside the original image.\n.   @param scaleFactor Parameter specifying how much the image size is reduced at each image scale.\n.   @param minNeighbors Parameter specifying how many neighbors each candidate rectangle should have\n.   to retain it.\n.   @param flags Parameter with the same meaning for an old cascade as in the function\n.   cvHaarDetectObjects. It is not used for a new cascade.\n.   @param minSize Minimum possible object size. Objects smaller than that are ignored.\n.   @param maxSize Maximum possible object size. Objects larger than that are ignored. If `maxSize == minSize` model is evaluated on single scale.\n.   \n.   The function is parallelized with the TBB library.\n.   \n.   @note\n.   -   (Python) A face detection example using cascade classifiers can be found at\n.   opencv_source_code/samples/python/facedetect.py'
        pass
    
    def detectMultiScale2(self, image, scaleFactor=None, minNeighbors=None, flags=None, minSize=None, maxSize=None):
        "detectMultiScale2(image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize]]]]]) -> objects, numDetections\n.   @overload\n.   @param image Matrix of the type CV_8U containing an image where objects are detected.\n.   @param objects Vector of rectangles where each rectangle contains the detected object, the\n.   rectangles may be partially outside the original image.\n.   @param numDetections Vector of detection numbers for the corresponding objects. An object's number\n.   of detections is the number of neighboring positively classified rectangles that were joined\n.   together to form the object.\n.   @param scaleFactor Parameter specifying how much the image size is reduced at each image scale.\n.   @param minNeighbors Parameter specifying how many neighbors each candidate rectangle should have\n.   to retain it.\n.   @param flags Parameter with the same meaning for an old cascade as in the function\n.   cvHaarDetectObjects. It is not used for a new cascade.\n.   @param minSize Minimum possible object size. Objects smaller than that are ignored.\n.   @param maxSize Maximum possible object size. Objects larger than that are ignored. If `maxSize == minSize` model is evaluated on single scale."
        pass
    
    def detectMultiScale3(self, image, scaleFactor=None, minNeighbors=None, flags=None, minSize=None, maxSize=None, outputRejectLevels=None):
        'detectMultiScale3(image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize[, outputRejectLevels]]]]]]) -> objects, rejectLevels, levelWeights\n.   @overload\n.   This function allows you to retrieve the final stage decision certainty of classification.\n.   For this, one needs to set `outputRejectLevels` on true and provide the `rejectLevels` and `levelWeights` parameter.\n.   For each resulting detection, `levelWeights` will then contain the certainty of classification at the final stage.\n.   This value can then be used to separate strong from weaker classifications.\n.   \n.   A code sample on how to use it efficiently can be found below:\n.   @code\n.   Mat img;\n.   vector<double> weights;\n.   vector<int> levels;\n.   vector<Rect> detections;\n.   CascadeClassifier model("/path/to/your/model.xml");\n.   model.detectMultiScale(img, detections, levels, weights, 1.1, 3, 0, Size(), Size(), true);\n.   cerr << "Detection " << detections[0] << " with weight " << weights[0] << endl;\n.   @endcode'
        pass
    
    def empty(self):
        'empty() -> retval\n.   @brief Checks whether the classifier has been loaded.'
        pass
    
    def getFeatureType(self):
        'getFeatureType() -> retval\n.'
        pass
    
    def getOriginalWindowSize(self):
        'getOriginalWindowSize() -> retval\n.'
        pass
    
    def isOldFormatCascade(self):
        'isOldFormatCascade() -> retval\n.'
        pass
    
    def load(self, filename):
        'load(filename) -> retval\n.   @brief Loads a classifier from a file.\n.   \n.   @param filename Name of the file from which the classifier is loaded. The file may contain an old\n.   HAAR classifier trained by the haartraining application or a new cascade classifier trained by the\n.   traincascade application.'
        pass
    
    def read(self, node):
        'read(node) -> retval\n.   @brief Reads a classifier from a FileStorage node.\n.   \n.   @note The file may contain a new cascade classifier (trained traincascade application) only.'
        pass
    

def CascadeClassifier_convert(oldcascade, newcascade):
    'CascadeClassifier_convert(oldcascade, newcascade) -> retval\n.'
    pass

class ChiHistogramCostExtractor(HistogramCostExtractor):
    __class__ = ChiHistogramCostExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class CirclesGridFinderParameters(_mod_builtins.object):
    __class__ = CirclesGridFinderParameters
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def convexHullFactor(self):
        'convexHullFactor'
        pass
    
    @property
    def densityNeighborhoodSize(self):
        'densityNeighborhoodSize'
        pass
    
    @property
    def edgeGain(self):
        'edgeGain'
        pass
    
    @property
    def edgePenalty(self):
        'edgePenalty'
        pass
    
    @property
    def existingVertexGain(self):
        'existingVertexGain'
        pass
    
    @property
    def keypointScale(self):
        'keypointScale'
        pass
    
    @property
    def kmeansAttempts(self):
        'kmeansAttempts'
        pass
    
    @property
    def minDensity(self):
        'minDensity'
        pass
    
    @property
    def minDistanceToAddKeypoint(self):
        'minDistanceToAddKeypoint'
        pass
    
    @property
    def minGraphConfidence(self):
        'minGraphConfidence'
        pass
    
    @property
    def minRNGEdgeSwitchDist(self):
        'minRNGEdgeSwitchDist'
        pass
    
    @property
    def vertexGain(self):
        'vertexGain'
        pass
    
    @property
    def vertexPenalty(self):
        'vertexPenalty'
        pass
    

class CirclesGridFinderParameters2(CirclesGridFinderParameters):
    __class__ = CirclesGridFinderParameters2
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def maxRectifiedDistance(self):
        'maxRectifiedDistance'
        pass
    
    @property
    def squareSize(self):
        'squareSize'
        pass
    

CirclesGridFinderParameters_ASYMMETRIC_GRID = 1
CirclesGridFinderParameters_SYMMETRIC_GRID = 0
CvFeatureParams_HAAR = 0
CvFeatureParams_HOG = 2
CvFeatureParams_LBP = 1
DCT_INVERSE = 1
DCT_ROWS = 4
DECOMP_CHOLESKY = 3
DECOMP_EIG = 2
DECOMP_LU = 0
DECOMP_NORMAL = 16
DECOMP_QR = 4
DECOMP_SVD = 1
DESCRIPTOR_MATCHER_BRUTEFORCE = 2
DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING = 4
DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMINGLUT = 5
DESCRIPTOR_MATCHER_BRUTEFORCE_L1 = 3
DESCRIPTOR_MATCHER_BRUTEFORCE_SL2 = 6
DESCRIPTOR_MATCHER_FLANNBASED = 1
DFT_COMPLEX_INPUT = 64
DFT_COMPLEX_OUTPUT = 16
DFT_INVERSE = 1
DFT_REAL_OUTPUT = 32
DFT_ROWS = 4
DFT_SCALE = 2
DIST_C = 3
DIST_FAIR = 5
DIST_HUBER = 7
DIST_L1 = 1
DIST_L12 = 4
DIST_L2 = 2
DIST_LABEL_CCOMP = 0
DIST_LABEL_PIXEL = 1
DIST_MASK_3 = 3
DIST_MASK_5 = 5
DIST_MASK_PRECISE = 0
DIST_USER = -1
DIST_WELSCH = 6
class DMatch(_mod_builtins.object):
    __class__ = DMatch
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def distance(self):
        'distance'
        pass
    
    @property
    def imgIdx(self):
        'imgIdx'
        pass
    
    @property
    def queryIdx(self):
        'queryIdx'
        pass
    
    @property
    def trainIdx(self):
        'trainIdx'
        pass
    

DRAW_MATCHES_FLAGS_DEFAULT = 0
DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG = 1
DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS = 4
DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS = 2
class DenseOpticalFlow(Algorithm):
    __class__ = DenseOpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calc(self, I0, I1, flow):
        'calc(I0, I1, flow) -> flow\n.   @brief Calculates an optical flow.\n.   \n.   @param I0 first 8-bit single-channel input image.\n.   @param I1 second input image of the same size and the same type as prev.\n.   @param flow computed flow image that has the same size as prev and type CV_32FC2.'
        pass
    
    def collectGarbage(self):
        'collectGarbage() -> None\n.   @brief Releases all inner buffers.'
        pass
    

class DescriptorMatcher(Algorithm):
    __class__ = DescriptorMatcher
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def add(self):
        'add(descriptors) -> None\n.   @brief Adds descriptors to train a CPU(trainDescCollectionis) or GPU(utrainDescCollectionis) descriptor\n.   collection.\n.   \n.   If the collection is not empty, the new descriptors are added to existing train descriptors.\n.   \n.   @param descriptors Descriptors to add. Each descriptors[i] is a set of descriptors from the same\n.   train image.'
        pass
    
    def clear(self):
        'clear() -> None\n.   @brief Clears the train descriptor collections.'
        pass
    
    def clone(self, emptyTrainData=None):
        'clone([, emptyTrainData]) -> retval\n.   @brief Clones the matcher.\n.   \n.   @param emptyTrainData If emptyTrainData is false, the method creates a deep copy of the object,\n.   that is, copies both parameters and train data. If emptyTrainData is true, the method creates an\n.   object copy with the current parameters but with empty train data.'
        pass
    
    @classmethod
    def create(cls, descriptorMatcherType):
        'create(descriptorMatcherType) -> retval\n.   @brief Creates a descriptor matcher of a given type with the default parameters (using default\n.   constructor).\n.   \n.   @param descriptorMatcherType Descriptor matcher type. Now the following matcher types are\n.   supported:\n.   -   `BruteForce` (it uses L2 )\n.   -   `BruteForce-L1`\n.   -   `BruteForce-Hamming`\n.   -   `BruteForce-Hamming(2)`\n.   -   `FlannBased`\n\n\n\ncreate(matcherType) -> retval\n.'
        pass
    
    def empty(self):
        'empty() -> retval\n.   @brief Returns true if there are no train descriptors in the both collections.'
        pass
    
    def getTrainDescriptors(self):
        'getTrainDescriptors() -> retval\n.   @brief Returns a constant link to the train descriptor collection trainDescCollection .'
        pass
    
    def isMaskSupported(self):
        'isMaskSupported() -> retval\n.   @brief Returns true if the descriptor matcher supports masking permissible matches.'
        pass
    
    def knnMatch(self, queryDescriptors, trainDescriptors, k, mask=None, compactResult=None):
        'knnMatch(queryDescriptors, trainDescriptors, k[, mask[, compactResult]]) -> matches\n.   @brief Finds the k best matches for each descriptor from a query set.\n.   \n.   @param queryDescriptors Query set of descriptors.\n.   @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors\n.   collection stored in the class object.\n.   @param mask Mask specifying permissible matches between an input query and train matrices of\n.   descriptors.\n.   @param matches Matches. Each matches[i] is k or less matches for the same query descriptor.\n.   @param k Count of best matches found per each query descriptor or less if a query descriptor has\n.   less than k possible matches in total.\n.   @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is\n.   false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,\n.   the matches vector does not contain matches for fully masked-out query descriptors.\n.   \n.   These extended variants of DescriptorMatcher::match methods find several best matches for each query\n.   descriptor. The matches are returned in the distance increasing order. See DescriptorMatcher::match\n.   for the details about query and train descriptors.\n\n\n\nknnMatch(queryDescriptors, k[, masks[, compactResult]]) -> matches\n.   @overload\n.   @param queryDescriptors Query set of descriptors.\n.   @param matches Matches. Each matches[i] is k or less matches for the same query descriptor.\n.   @param k Count of best matches found per each query descriptor or less if a query descriptor has\n.   less than k possible matches in total.\n.   @param masks Set of masks. Each masks[i] specifies permissible matches between the input query\n.   descriptors and stored train descriptors from the i-th image trainDescCollection[i].\n.   @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is\n.   false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,\n.   the matches vector does not contain matches for fully masked-out query descriptors.'
        pass
    
    def match(self, queryDescriptors, trainDescriptors, mask=None):
        'match(queryDescriptors, trainDescriptors[, mask]) -> matches\n.   @brief Finds the best match for each descriptor from a query set.\n.   \n.   @param queryDescriptors Query set of descriptors.\n.   @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors\n.   collection stored in the class object.\n.   @param matches Matches. If a query descriptor is masked out in mask , no match is added for this\n.   descriptor. So, matches size may be smaller than the query descriptors count.\n.   @param mask Mask specifying permissible matches between an input query and train matrices of\n.   descriptors.\n.   \n.   In the first variant of this method, the train descriptors are passed as an input argument. In the\n.   second variant of the method, train descriptors collection that was set by DescriptorMatcher::add is\n.   used. Optional mask (or masks) can be passed to specify which query and training descriptors can be\n.   matched. Namely, queryDescriptors[i] can be matched with trainDescriptors[j] only if\n.   mask.at\\<uchar\\>(i,j) is non-zero.\n\n\n\nmatch(queryDescriptors[, masks]) -> matches\n.   @overload\n.   @param queryDescriptors Query set of descriptors.\n.   @param matches Matches. If a query descriptor is masked out in mask , no match is added for this\n.   descriptor. So, matches size may be smaller than the query descriptors count.\n.   @param masks Set of masks. Each masks[i] specifies permissible matches between the input query\n.   descriptors and stored train descriptors from the i-th image trainDescCollection[i].'
        pass
    
    def radiusMatch(self, queryDescriptors, trainDescriptors, maxDistance, mask=None, compactResult=None):
        'radiusMatch(queryDescriptors, trainDescriptors, maxDistance[, mask[, compactResult]]) -> matches\n.   @brief For each query descriptor, finds the training descriptors not farther than the specified distance.\n.   \n.   @param queryDescriptors Query set of descriptors.\n.   @param trainDescriptors Train set of descriptors. This set is not added to the train descriptors\n.   collection stored in the class object.\n.   @param matches Found matches.\n.   @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is\n.   false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,\n.   the matches vector does not contain matches for fully masked-out query descriptors.\n.   @param maxDistance Threshold for the distance between matched descriptors. Distance means here\n.   metric distance (e.g. Hamming distance), not the distance between coordinates (which is measured\n.   in Pixels)!\n.   @param mask Mask specifying permissible matches between an input query and train matrices of\n.   descriptors.\n.   \n.   For each query descriptor, the methods find such training descriptors that the distance between the\n.   query descriptor and the training descriptor is equal or smaller than maxDistance. Found matches are\n.   returned in the distance increasing order.\n\n\n\nradiusMatch(queryDescriptors, maxDistance[, masks[, compactResult]]) -> matches\n.   @overload\n.   @param queryDescriptors Query set of descriptors.\n.   @param matches Found matches.\n.   @param maxDistance Threshold for the distance between matched descriptors. Distance means here\n.   metric distance (e.g. Hamming distance), not the distance between coordinates (which is measured\n.   in Pixels)!\n.   @param masks Set of masks. Each masks[i] specifies permissible matches between the input query\n.   descriptors and stored train descriptors from the i-th image trainDescCollection[i].\n.   @param compactResult Parameter used when the mask (or masks) is not empty. If compactResult is\n.   false, the matches vector has the same size as queryDescriptors rows. If compactResult is true,\n.   the matches vector does not contain matches for fully masked-out query descriptors.'
        pass
    
    def read(self, fileName):
        'read(fileName) -> None\n.   \n\n\n\nread(arg1) -> None\n.'
        pass
    
    def train(self):
        'train() -> None\n.   @brief Trains a descriptor matcher\n.   \n.   Trains a descriptor matcher (for example, the flann index). In all methods to match, the method\n.   train() is run every time before matching. Some descriptor matchers (for example, BruteForceMatcher)\n.   have an empty implementation of this method. Other matchers really train their inner structures (for\n.   example, FlannBasedMatcher trains flann::Index ).'
        pass
    
    def write(self, fileName):
        'write(fileName) -> None\n.   \n\n\n\nwrite(fs[, name]) -> None\n.'
        pass
    

DescriptorMatcher_BRUTEFORCE = 2
DescriptorMatcher_BRUTEFORCE_HAMMING = 4
DescriptorMatcher_BRUTEFORCE_HAMMINGLUT = 5
DescriptorMatcher_BRUTEFORCE_L1 = 3
DescriptorMatcher_BRUTEFORCE_SL2 = 6
DescriptorMatcher_FLANNBASED = 1
def DescriptorMatcher_create(descriptorMatcherType):
    'DescriptorMatcher_create(descriptorMatcherType) -> retval\n.   @brief Creates a descriptor matcher of a given type with the default parameters (using default\n.   constructor).\n.   \n.   @param descriptorMatcherType Descriptor matcher type. Now the following matcher types are\n.   supported:\n.   -   `BruteForce` (it uses L2 )\n.   -   `BruteForce-L1`\n.   -   `BruteForce-Hamming`\n.   -   `BruteForce-Hamming(2)`\n.   -   `FlannBased`\n\n\n\nDescriptorMatcher_create(matcherType) -> retval\n.'
    pass

DrawMatchesFlags_DEFAULT = 0
DrawMatchesFlags_DRAW_OVER_OUTIMG = 1
DrawMatchesFlags_DRAW_RICH_KEYPOINTS = 4
DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS = 2
class DualTVL1OpticalFlow(DenseOpticalFlow):
    __class__ = DualTVL1OpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, tau=None, lambda_=None, theta=None, nscales=None, warps=None, epsilon=None, innnerIterations=None, outerIterations=None, scaleStep=None, gamma=None, medianFiltering=None, useInitialFlow=None):
        'create([, tau[, lambda[, theta[, nscales[, warps[, epsilon[, innnerIterations[, outerIterations[, scaleStep[, gamma[, medianFiltering[, useInitialFlow]]]]]]]]]]]]) -> retval\n.   @brief Creates instance of cv::DualTVL1OpticalFlow'
        pass
    
    def getEpsilon(self):
        'getEpsilon() -> retval\n.   @see setEpsilon'
        pass
    
    def getGamma(self):
        'getGamma() -> retval\n.   @see setGamma'
        pass
    
    def getInnerIterations(self):
        'getInnerIterations() -> retval\n.   @see setInnerIterations'
        pass
    
    def getLambda(self):
        'getLambda() -> retval\n.   @see setLambda'
        pass
    
    def getMedianFiltering(self):
        'getMedianFiltering() -> retval\n.   @see setMedianFiltering'
        pass
    
    def getOuterIterations(self):
        'getOuterIterations() -> retval\n.   @see setOuterIterations'
        pass
    
    def getScaleStep(self):
        'getScaleStep() -> retval\n.   @see setScaleStep'
        pass
    
    def getScalesNumber(self):
        'getScalesNumber() -> retval\n.   @see setScalesNumber'
        pass
    
    def getTau(self):
        'getTau() -> retval\n.   @see setTau'
        pass
    
    def getTheta(self):
        'getTheta() -> retval\n.   @see setTheta'
        pass
    
    def getUseInitialFlow(self):
        'getUseInitialFlow() -> retval\n.   @see setUseInitialFlow'
        pass
    
    def getWarpingsNumber(self):
        'getWarpingsNumber() -> retval\n.   @see setWarpingsNumber'
        pass
    
    def setEpsilon(self, val):
        'setEpsilon(val) -> None\n.   @copybrief getEpsilon @see getEpsilon'
        pass
    
    def setGamma(self, val):
        'setGamma(val) -> None\n.   @copybrief getGamma @see getGamma'
        pass
    
    def setInnerIterations(self, val):
        'setInnerIterations(val) -> None\n.   @copybrief getInnerIterations @see getInnerIterations'
        pass
    
    def setLambda(self, val):
        'setLambda(val) -> None\n.   @copybrief getLambda @see getLambda'
        pass
    
    def setMedianFiltering(self, val):
        'setMedianFiltering(val) -> None\n.   @copybrief getMedianFiltering @see getMedianFiltering'
        pass
    
    def setOuterIterations(self, val):
        'setOuterIterations(val) -> None\n.   @copybrief getOuterIterations @see getOuterIterations'
        pass
    
    def setScaleStep(self, val):
        'setScaleStep(val) -> None\n.   @copybrief getScaleStep @see getScaleStep'
        pass
    
    def setScalesNumber(self, val):
        'setScalesNumber(val) -> None\n.   @copybrief getScalesNumber @see getScalesNumber'
        pass
    
    def setTau(self, val):
        'setTau(val) -> None\n.   @copybrief getTau @see getTau'
        pass
    
    def setTheta(self, val):
        'setTheta(val) -> None\n.   @copybrief getTheta @see getTheta'
        pass
    
    def setUseInitialFlow(self, val):
        'setUseInitialFlow(val) -> None\n.   @copybrief getUseInitialFlow @see getUseInitialFlow'
        pass
    
    def setWarpingsNumber(self, val):
        'setWarpingsNumber(val) -> None\n.   @copybrief getWarpingsNumber @see getWarpingsNumber'
        pass
    

def DualTVL1OpticalFlow_create(tau=None, lambda_=None, theta=None, nscales=None, warps=None, epsilon=None, innnerIterations=None, outerIterations=None, scaleStep=None, gamma=None, medianFiltering=None, useInitialFlow=None):
    'DualTVL1OpticalFlow_create([, tau[, lambda[, theta[, nscales[, warps[, epsilon[, innnerIterations[, outerIterations[, scaleStep[, gamma[, medianFiltering[, useInitialFlow]]]]]]]]]]]]) -> retval\n.   @brief Creates instance of cv::DualTVL1OpticalFlow'
    pass

def EMD(signature1, signature2, distType, cost=None, lowerBound=None, flow=None):
    'EMD(signature1, signature2, distType[, cost[, lowerBound[, flow]]]) -> retval, lowerBound, flow\n.   @brief Computes the "minimal work" distance between two weighted point configurations.\n.   \n.   The function computes the earth mover distance and/or a lower boundary of the distance between the\n.   two weighted point configurations. One of the applications described in @cite RubnerSept98,\n.   @cite Rubner2000 is multi-dimensional histogram comparison for image retrieval. EMD is a transportation\n.   problem that is solved using some modification of a simplex algorithm, thus the complexity is\n.   exponential in the worst case, though, on average it is much faster. In the case of a real metric\n.   the lower boundary can be calculated even faster (using linear-time algorithm) and it can be used\n.   to determine roughly whether the two signatures are far enough so that they cannot relate to the\n.   same object.\n.   \n.   @param signature1 First signature, a \\f$\\texttt{size1}\\times \\texttt{dims}+1\\f$ floating-point matrix.\n.   Each row stores the point weight followed by the point coordinates. The matrix is allowed to have\n.   a single column (weights only) if the user-defined cost matrix is used. The weights must be\n.   non-negative and have at least one non-zero value.\n.   @param signature2 Second signature of the same format as signature1 , though the number of rows\n.   may be different. The total weights may be different. In this case an extra "dummy" point is added\n.   to either signature1 or signature2. The weights must be non-negative and have at least one non-zero\n.   value.\n.   @param distType Used metric. See #DistanceTypes.\n.   @param cost User-defined \\f$\\texttt{size1}\\times \\texttt{size2}\\f$ cost matrix. Also, if a cost matrix\n.   is used, lower boundary lowerBound cannot be calculated because it needs a metric function.\n.   @param lowerBound Optional input/output parameter: lower boundary of a distance between the two\n.   signatures that is a distance between mass centers. The lower boundary may not be calculated if\n.   the user-defined cost matrix is used, the total weights of point configurations are not equal, or\n.   if the signatures consist of weights only (the signature matrices have a single column). You\n.   **must** initialize \\*lowerBound . If the calculated distance between mass centers is greater or\n.   equal to \\*lowerBound (it means that the signatures are far enough), the function does not\n.   calculate EMD. In any case \\*lowerBound is set to the calculated distance between mass centers on\n.   return. Thus, if you want to calculate both distance between mass centers and EMD, \\*lowerBound\n.   should be set to 0.\n.   @param flow Resultant \\f$\\texttt{size1} \\times \\texttt{size2}\\f$ flow matrix: \\f$\\texttt{flow}_{i,j}\\f$ is\n.   a flow from \\f$i\\f$ -th point of signature1 to \\f$j\\f$ -th point of signature2 .'
    pass

class EMDHistogramCostExtractor(HistogramCostExtractor):
    __class__ = EMDHistogramCostExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getNormFlag(self):
        'getNormFlag() -> retval\n.'
        pass
    
    def setNormFlag(self, flag):
        'setNormFlag(flag) -> None\n.'
        pass
    

class EMDL1HistogramCostExtractor(HistogramCostExtractor):
    __class__ = EMDL1HistogramCostExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

EVENT_FLAG_ALTKEY = 32
EVENT_FLAG_CTRLKEY = 8
EVENT_FLAG_LBUTTON = 1
EVENT_FLAG_MBUTTON = 4
EVENT_FLAG_RBUTTON = 2
EVENT_FLAG_SHIFTKEY = 16
EVENT_LBUTTONDBLCLK = 7
EVENT_LBUTTONDOWN = 1
EVENT_LBUTTONUP = 4
EVENT_MBUTTONDBLCLK = 9
EVENT_MBUTTONDOWN = 3
EVENT_MBUTTONUP = 6
EVENT_MOUSEHWHEEL = 11
EVENT_MOUSEMOVE = 0
EVENT_MOUSEWHEEL = 10
EVENT_RBUTTONDBLCLK = 8
EVENT_RBUTTONDOWN = 2
EVENT_RBUTTONUP = 5
FAST_FEATURE_DETECTOR_FAST_N = 10002
FAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION = 10001
FAST_FEATURE_DETECTOR_THRESHOLD = 10000
FAST_FEATURE_DETECTOR_TYPE_5_8 = 0
FAST_FEATURE_DETECTOR_TYPE_7_12 = 1
FAST_FEATURE_DETECTOR_TYPE_9_16 = 2
FILE_NODE_EMPTY = 32
FILE_NODE_FLOAT = 2
FILE_NODE_FLOW = 8
FILE_NODE_INT = 1
FILE_NODE_MAP = 6
FILE_NODE_NAMED = 64
FILE_NODE_NONE = 0
FILE_NODE_REAL = 2
FILE_NODE_REF = 4
FILE_NODE_SEQ = 5
FILE_NODE_STR = 3
FILE_NODE_STRING = 3
FILE_NODE_TYPE_MASK = 7
FILE_NODE_USER = 16
FILE_STORAGE_APPEND = 2
FILE_STORAGE_BASE64 = 64
FILE_STORAGE_FORMAT_AUTO = 0
FILE_STORAGE_FORMAT_JSON = 24
FILE_STORAGE_FORMAT_MASK = 56
FILE_STORAGE_FORMAT_XML = 8
FILE_STORAGE_FORMAT_YAML = 16
FILE_STORAGE_INSIDE_MAP = 4
FILE_STORAGE_MEMORY = 4
FILE_STORAGE_NAME_EXPECTED = 2
FILE_STORAGE_READ = 0
FILE_STORAGE_UNDEFINED = 0
FILE_STORAGE_VALUE_EXPECTED = 1
FILE_STORAGE_WRITE = 1
FILE_STORAGE_WRITE_BASE64 = 65
FILLED = -1
FLOODFILL_FIXED_RANGE = 65536
FLOODFILL_MASK_ONLY = 131072
FM_7POINT = 1
FM_8POINT = 2
FM_LMEDS = 4
FM_RANSAC = 8
FONT_HERSHEY_COMPLEX = 3
FONT_HERSHEY_COMPLEX_SMALL = 5
FONT_HERSHEY_DUPLEX = 2
FONT_HERSHEY_PLAIN = 1
FONT_HERSHEY_SCRIPT_COMPLEX = 7
FONT_HERSHEY_SCRIPT_SIMPLEX = 6
FONT_HERSHEY_SIMPLEX = 0
FONT_HERSHEY_TRIPLEX = 4
FONT_ITALIC = 16
FORMATTER_FMT_C = 5
FORMATTER_FMT_CSV = 2
FORMATTER_FMT_DEFAULT = 0
FORMATTER_FMT_MATLAB = 1
FORMATTER_FMT_NUMPY = 4
FORMATTER_FMT_PYTHON = 3
class FarnebackOpticalFlow(DenseOpticalFlow):
    __class__ = FarnebackOpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, numLevels=None, pyrScale=None, fastPyramids=None, winSize=None, numIters=None, polyN=None, polySigma=None, flags=None):
        'create([, numLevels[, pyrScale[, fastPyramids[, winSize[, numIters[, polyN[, polySigma[, flags]]]]]]]]) -> retval\n.'
        pass
    
    def getFastPyramids(self):
        'getFastPyramids() -> retval\n.'
        pass
    
    def getFlags(self):
        'getFlags() -> retval\n.'
        pass
    
    def getNumIters(self):
        'getNumIters() -> retval\n.'
        pass
    
    def getNumLevels(self):
        'getNumLevels() -> retval\n.'
        pass
    
    def getPolyN(self):
        'getPolyN() -> retval\n.'
        pass
    
    def getPolySigma(self):
        'getPolySigma() -> retval\n.'
        pass
    
    def getPyrScale(self):
        'getPyrScale() -> retval\n.'
        pass
    
    def getWinSize(self):
        'getWinSize() -> retval\n.'
        pass
    
    def setFastPyramids(self, fastPyramids):
        'setFastPyramids(fastPyramids) -> None\n.'
        pass
    
    def setFlags(self, flags):
        'setFlags(flags) -> None\n.'
        pass
    
    def setNumIters(self, numIters):
        'setNumIters(numIters) -> None\n.'
        pass
    
    def setNumLevels(self, numLevels):
        'setNumLevels(numLevels) -> None\n.'
        pass
    
    def setPolyN(self, polyN):
        'setPolyN(polyN) -> None\n.'
        pass
    
    def setPolySigma(self, polySigma):
        'setPolySigma(polySigma) -> None\n.'
        pass
    
    def setPyrScale(self, pyrScale):
        'setPyrScale(pyrScale) -> None\n.'
        pass
    
    def setWinSize(self, winSize):
        'setWinSize(winSize) -> None\n.'
        pass
    

def FarnebackOpticalFlow_create(numLevels=None, pyrScale=None, fastPyramids=None, winSize=None, numIters=None, polyN=None, polySigma=None, flags=None):
    'FarnebackOpticalFlow_create([, numLevels[, pyrScale[, fastPyramids[, winSize[, numIters[, polyN[, polySigma[, flags]]]]]]]]) -> retval\n.'
    pass

class FastFeatureDetector(Feature2D):
    __class__ = FastFeatureDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, threshold=None, nonmaxSuppression=None, type=None):
        'create([, threshold[, nonmaxSuppression[, type]]]) -> retval\n.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getNonmaxSuppression(self):
        'getNonmaxSuppression() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def getType(self):
        'getType() -> retval\n.'
        pass
    
    def setNonmaxSuppression(self, f):
        'setNonmaxSuppression(f) -> None\n.'
        pass
    
    def setThreshold(self, threshold):
        'setThreshold(threshold) -> None\n.'
        pass
    
    def setType(self, type):
        'setType(type) -> None\n.'
        pass
    

FastFeatureDetector_FAST_N = 10002
FastFeatureDetector_NONMAX_SUPPRESSION = 10001
FastFeatureDetector_THRESHOLD = 10000
FastFeatureDetector_TYPE_5_8 = 0
FastFeatureDetector_TYPE_7_12 = 1
FastFeatureDetector_TYPE_9_16 = 2
def FastFeatureDetector_create(threshold=None, nonmaxSuppression=None, type=None):
    'FastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval\n.'
    pass

class Feature2D(Algorithm):
    __class__ = Feature2D
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compute(self):
        'compute(image, keypoints[, descriptors]) -> keypoints, descriptors\n.   @brief Computes the descriptors for a set of keypoints detected in an image (first variant) or image set\n.   (second variant).\n.   \n.   @param image Image.\n.   @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n.   computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n.   with several dominant orientations (for each orientation).\n.   @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are\n.   descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the\n.   descriptor for keypoint j-th keypoint.\n\n\n\ncompute(images, keypoints[, descriptors]) -> keypoints, descriptors\n.   @overload\n.   \n.   @param images Image set.\n.   @param keypoints Input collection of keypoints. Keypoints for which a descriptor cannot be\n.   computed are removed. Sometimes new keypoints can be added, for example: SIFT duplicates keypoint\n.   with several dominant orientations (for each orientation).\n.   @param descriptors Computed descriptors. In the second variant of the method descriptors[i] are\n.   descriptors computed for a keypoints[i]. Row j is the keypoints (or keypoints[i]) is the\n.   descriptor for keypoint j-th keypoint.'
        pass
    
    def defaultNorm(self):
        'defaultNorm() -> retval\n.'
        pass
    
    def descriptorSize(self):
        'descriptorSize() -> retval\n.'
        pass
    
    def descriptorType(self):
        'descriptorType() -> retval\n.'
        pass
    
    def detect(self):
        'detect(image[, mask]) -> keypoints\n.   @brief Detects keypoints in an image (first variant) or image set (second variant).\n.   \n.   @param image Image.\n.   @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n.   of keypoints detected in images[i] .\n.   @param mask Mask specifying where to look for keypoints (optional). It must be a 8-bit integer\n.   matrix with non-zero values in the region of interest.\n\n\n\ndetect(images[, masks]) -> keypoints\n.   @overload\n.   @param images Image set.\n.   @param keypoints The detected keypoints. In the second variant of the method keypoints[i] is a set\n.   of keypoints detected in images[i] .\n.   @param masks Masks for each input image specifying where to look for keypoints (optional).\n.   masks[i] is a mask for images[i].'
        pass
    
    def detectAndCompute(self, image, mask, descriptors=None, useProvidedKeypoints=None):
        'detectAndCompute(image, mask[, descriptors[, useProvidedKeypoints]]) -> keypoints, descriptors\n.   Detects keypoints and computes the descriptors'
        pass
    
    def empty(self):
        'empty() -> retval\n.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def read(self, fileName):
        'read(fileName) -> None\n.   \n\n\n\nread(arg1) -> None\n.'
        pass
    
    def write(self, fileName):
        'write(fileName) -> None\n.   \n\n\n\nwrite(fs[, name]) -> None\n.'
        pass
    

class FileNode(_mod_builtins.object):
    __class__ = FileNode
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def at(self, i):
        'at(i) -> retval\n.   @overload\n.   @param i Index of an element in the sequence node.'
        pass
    
    def empty(self):
        'empty() -> retval\n.'
        pass
    
    def getNode(self, nodename):
        'getNode(nodename) -> retval\n.   @overload\n.   @param nodename Name of an element in the mapping node.'
        pass
    
    def isInt(self):
        'isInt() -> retval\n.'
        pass
    
    def isMap(self):
        'isMap() -> retval\n.'
        pass
    
    def isNamed(self):
        'isNamed() -> retval\n.'
        pass
    
    def isNone(self):
        'isNone() -> retval\n.'
        pass
    
    def isReal(self):
        'isReal() -> retval\n.'
        pass
    
    def isSeq(self):
        'isSeq() -> retval\n.'
        pass
    
    def isString(self):
        'isString() -> retval\n.'
        pass
    
    def mat(self):
        'mat() -> retval\n.'
        pass
    
    def name(self):
        'name() -> retval\n.'
        pass
    
    def real(self):
        'real() -> retval\n.   @brief Reads node elements to the buffer with the specified format.\n.   \n.   Usually it is more convenient to use operator `>>` instead of this method.\n.   @param fmt Specification of each array element. See @ref format_spec "format specification"\n.   @param vec Pointer to the destination array.\n.   @param len Number of elements to read. If it is greater than number of remaining elements then all\n.   of them will be read.'
        pass
    
    def size(self):
        'size() -> retval\n.'
        pass
    
    def string(self):
        'string() -> retval\n.'
        pass
    
    def type(self):
        'type() -> retval\n.   @brief Returns type of the node.\n.   @returns Type of the node. See FileNode::Type'
        pass
    

FileNode_EMPTY = 32
FileNode_FLOAT = 2
FileNode_FLOW = 8
FileNode_INT = 1
FileNode_MAP = 6
FileNode_NAMED = 64
FileNode_NONE = 0
FileNode_REAL = 2
FileNode_REF = 4
FileNode_SEQ = 5
FileNode_STR = 3
FileNode_STRING = 3
FileNode_TYPE_MASK = 7
FileNode_USER = 16
class FileStorage(_mod_builtins.object):
    __class__ = FileStorage
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getFirstTopLevelNode(self):
        'getFirstTopLevelNode() -> retval\n.   @brief Returns the first element of the top-level mapping.\n.   @returns The first element of the top-level mapping.'
        pass
    
    def getFormat(self):
        'getFormat() -> retval\n.   @brief Returns the current format.\n.   * @returns The current format, see FileStorage::Mode'
        pass
    
    def getNode(self, nodename):
        'getNode(nodename) -> retval\n.   @overload'
        pass
    
    def isOpened(self):
        'isOpened() -> retval\n.   @brief Checks whether the file is opened.\n.   \n.   @returns true if the object is associated with the current file and false otherwise. It is a\n.   good practice to call this method after you tried to open a file.'
        pass
    
    def open(self, filename, flags, encoding=None):
        'open(filename, flags[, encoding]) -> retval\n.   @brief Opens a file.\n.   \n.   See description of parameters in FileStorage::FileStorage. The method calls FileStorage::release\n.   before opening the file.\n.   @param filename Name of the file to open or the text string to read the data from.\n.   Extension of the file (.xml, .yml/.yaml or .json) determines its format (XML, YAML or JSON\n.   respectively). Also you can append .gz to work with compressed files, for example myHugeMatrix.xml.gz. If both\n.   FileStorage::WRITE and FileStorage::MEMORY flags are specified, source is used just to specify\n.   the output file format (e.g. mydata.xml, .yml etc.). A file name can also contain parameters.\n.   You can use this format, "*?base64" (e.g. "file.json?base64" (case sensitive)), as an alternative to\n.   FileStorage::BASE64 flag.\n.   @param flags Mode of operation. One of FileStorage::Mode\n.   @param encoding Encoding of the file. Note that UTF-16 XML encoding is not supported currently and\n.   you should use 8-bit encoding instead of it.'
        pass
    
    def release(self):
        'release() -> None\n.   @brief Closes the file and releases all the memory buffers.\n.   \n.   Call this method after all I/O operations with the storage are finished.'
        pass
    
    def releaseAndGetString(self):
        'releaseAndGetString() -> retval\n.   @brief Closes the file and releases all the memory buffers.\n.   \n.   Call this method after all I/O operations with the storage are finished. If the storage was\n.   opened for writing data and FileStorage::WRITE was specified'
        pass
    
    def root(self, streamidx=None):
        'root([, streamidx]) -> retval\n.   @brief Returns the top-level mapping\n.   @param streamidx Zero-based index of the stream. In most cases there is only one stream in the file.\n.   However, YAML supports multiple streams and so there can be several.\n.   @returns The top-level mapping.'
        pass
    
    def write(self, name, val):
        'write(name, val) -> None\n.   * @brief Simplified writing API to use with bindings.\n.   * @param name Name of the written object\n.   * @param val Value of the written object'
        pass
    
    def writeComment(self, comment, append=None):
        'writeComment(comment[, append]) -> None\n.   @brief Writes a comment.\n.   \n.   The function writes a comment into file storage. The comments are skipped when the storage is read.\n.   @param comment The written comment, single-line or multi-line\n.   @param append If true, the function tries to put the comment at the end of current line.\n.   Else if the comment is multi-line, or if it does not fit at the end of the current\n.   line, the comment starts a new line.'
        pass
    

FileStorage_APPEND = 2
FileStorage_BASE64 = 64
FileStorage_FORMAT_AUTO = 0
FileStorage_FORMAT_JSON = 24
FileStorage_FORMAT_MASK = 56
FileStorage_FORMAT_XML = 8
FileStorage_FORMAT_YAML = 16
FileStorage_INSIDE_MAP = 4
FileStorage_MEMORY = 4
FileStorage_NAME_EXPECTED = 2
FileStorage_READ = 0
FileStorage_UNDEFINED = 0
FileStorage_VALUE_EXPECTED = 1
FileStorage_WRITE = 1
FileStorage_WRITE_BASE64 = 65
class FlannBasedMatcher(DescriptorMatcher):
    __class__ = FlannBasedMatcher
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    

def FlannBasedMatcher_create():
    'FlannBasedMatcher_create() -> retval\n.'
    pass

Formatter_FMT_C = 5
Formatter_FMT_CSV = 2
Formatter_FMT_DEFAULT = 0
Formatter_FMT_MATLAB = 1
Formatter_FMT_NUMPY = 4
Formatter_FMT_PYTHON = 3
GC_BGD = 0
GC_EVAL = 2
GC_EVAL_FREEZE_MODEL = 3
GC_FGD = 1
GC_INIT_WITH_MASK = 1
GC_INIT_WITH_RECT = 0
GC_PR_BGD = 2
GC_PR_FGD = 3
GEMM_1_T = 1
GEMM_2_T = 2
GEMM_3_T = 4
class GFTTDetector(Feature2D):
    __class__ = GFTTDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, maxCorners=None, qualityLevel=None, minDistance=None, blockSize=None, useHarrisDetector=None, k=None):
        'create([, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]) -> retval\n.   \n\n\n\ncreate(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize[, useHarrisDetector[, k]]) -> retval\n.'
        pass
    
    def getBlockSize(self):
        'getBlockSize() -> retval\n.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getHarrisDetector(self):
        'getHarrisDetector() -> retval\n.'
        pass
    
    def getK(self):
        'getK() -> retval\n.'
        pass
    
    def getMaxFeatures(self):
        'getMaxFeatures() -> retval\n.'
        pass
    
    def getMinDistance(self):
        'getMinDistance() -> retval\n.'
        pass
    
    def getQualityLevel(self):
        'getQualityLevel() -> retval\n.'
        pass
    
    def setBlockSize(self, blockSize):
        'setBlockSize(blockSize) -> None\n.'
        pass
    
    def setHarrisDetector(self, val):
        'setHarrisDetector(val) -> None\n.'
        pass
    
    def setK(self, k):
        'setK(k) -> None\n.'
        pass
    
    def setMaxFeatures(self, maxFeatures):
        'setMaxFeatures(maxFeatures) -> None\n.'
        pass
    
    def setMinDistance(self, minDistance):
        'setMinDistance(minDistance) -> None\n.'
        pass
    
    def setQualityLevel(self, qlevel):
        'setQualityLevel(qlevel) -> None\n.'
        pass
    

def GFTTDetector_create(maxCorners=None, qualityLevel=None, minDistance=None, blockSize=None, useHarrisDetector=None, k=None):
    'GFTTDetector_create([, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]) -> retval\n.   \n\n\n\nGFTTDetector_create(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize[, useHarrisDetector[, k]]) -> retval\n.'
    pass

def GaussianBlur(src, ksize, sigmaX, dst=None, sigmaY=None, borderType=None):
    "GaussianBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]) -> dst\n.   @brief Blurs an image using a Gaussian filter.\n.   \n.   The function convolves the source image with the specified Gaussian kernel. In-place filtering is\n.   supported.\n.   \n.   @param src input image; the image can have any number of channels, which are processed\n.   independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.\n.   @param dst output image of the same size and type as src.\n.   @param ksize Gaussian kernel size. ksize.width and ksize.height can differ but they both must be\n.   positive and odd. Or, they can be zero's and then they are computed from sigma.\n.   @param sigmaX Gaussian kernel standard deviation in X direction.\n.   @param sigmaY Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be\n.   equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height,\n.   respectively (see #getGaussianKernel for details); to fully control the result regardless of\n.   possible future modifications of all this semantics, it is recommended to specify all of ksize,\n.   sigmaX, and sigmaY.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   \n.   @sa  sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur"
    pass

HAMMING_NORM_TYPE = 6
HISTCMP_BHATTACHARYYA = 3
HISTCMP_CHISQR = 1
HISTCMP_CHISQR_ALT = 4
HISTCMP_CORREL = 0
HISTCMP_HELLINGER = 3
HISTCMP_INTERSECT = 2
HISTCMP_KL_DIV = 5
HOGDESCRIPTOR_DEFAULT_NLEVELS = 64
HOGDESCRIPTOR_L2HYS = 0
class HOGDescriptor(_mod_builtins.object):
    @property
    def L2HysThreshold(self):
        'L2HysThreshold'
        pass
    
    __class__ = HOGDescriptor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def blockSize(self):
        'blockSize'
        pass
    
    @property
    def blockStride(self):
        'blockStride'
        pass
    
    @property
    def cellSize(self):
        'cellSize'
        pass
    
    def checkDetectorSize(self):
        'checkDetectorSize() -> retval\n.   @brief Checks if detector size equal to descriptor size.'
        pass
    
    def compute(self, img, winStride=None, padding=None, locations=None):
        'compute(img[, winStride[, padding[, locations]]]) -> descriptors\n.   @brief Computes HOG descriptors of given image.\n.   @param img Matrix of the type CV_8U containing an image where HOG features will be calculated.\n.   @param descriptors Matrix of the type CV_32F\n.   @param winStride Window stride. It must be a multiple of block stride.\n.   @param padding Padding\n.   @param locations Vector of Point'
        pass
    
    def computeGradient(self, img, grad=None, angleOfs=None, paddingTL=None, paddingBR=None):
        'computeGradient(img[, grad[, angleOfs[, paddingTL[, paddingBR]]]]) -> grad, angleOfs\n.   @brief  Computes gradients and quantized gradient orientations.\n.   @param img Matrix contains the image to be computed\n.   @param grad Matrix of type CV_32FC2 contains computed gradients\n.   @param angleOfs Matrix of type CV_8UC2 contains quantized gradient orientations\n.   @param paddingTL Padding from top-left\n.   @param paddingBR Padding from bottom-right'
        pass
    
    @property
    def derivAperture(self):
        'derivAperture'
        pass
    
    def detect(self, img, hitThreshold=None, winStride=None, padding=None, searchLocations=None):
        'detect(img[, hitThreshold[, winStride[, padding[, searchLocations]]]]) -> foundLocations, weights\n.   @brief Performs object detection without a multi-scale window.\n.   @param img Matrix of the type CV_8U or CV_8UC3 containing an image where objects are detected.\n.   @param foundLocations Vector of point where each point contains left-top corner point of detected object boundaries.\n.   @param weights Vector that will contain confidence values for each detected object.\n.   @param hitThreshold Threshold for the distance between features and SVM classifying plane.\n.   Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient).\n.   But if the free coefficient is omitted (which is allowed), you can specify it manually here.\n.   @param winStride Window stride. It must be a multiple of block stride.\n.   @param padding Padding\n.   @param searchLocations Vector of Point includes set of requested locations to be evaluated.'
        pass
    
    def detectMultiScale(self, img, hitThreshold=None, winStride=None, padding=None, scale=None, finalThreshold=None, useMeanshiftGrouping=None):
        'detectMultiScale(img[, hitThreshold[, winStride[, padding[, scale[, finalThreshold[, useMeanshiftGrouping]]]]]]) -> foundLocations, foundWeights\n.   @brief Detects objects of different sizes in the input image. The detected objects are returned as a list\n.   of rectangles.\n.   @param img Matrix of the type CV_8U or CV_8UC3 containing an image where objects are detected.\n.   @param foundLocations Vector of rectangles where each rectangle contains the detected object.\n.   @param foundWeights Vector that will contain confidence values for each detected object.\n.   @param hitThreshold Threshold for the distance between features and SVM classifying plane.\n.   Usually it is 0 and should be specified in the detector coefficients (as the last free coefficient).\n.   But if the free coefficient is omitted (which is allowed), you can specify it manually here.\n.   @param winStride Window stride. It must be a multiple of block stride.\n.   @param padding Padding\n.   @param scale Coefficient of the detection window increase.\n.   @param finalThreshold Final threshold\n.   @param useMeanshiftGrouping indicates grouping algorithm'
        pass
    
    @property
    def gammaCorrection(self):
        'gammaCorrection'
        pass
    
    @classmethod
    def getDaimlerPeopleDetector(cls):
        'getDaimlerPeopleDetector() -> retval\n.   @brief Returns coefficients of the classifier trained for people detection (for 48x96 windows).'
        pass
    
    @classmethod
    def getDefaultPeopleDetector(cls):
        'getDefaultPeopleDetector() -> retval\n.   @brief Returns coefficients of the classifier trained for people detection (for 64x128 windows).'
        pass
    
    def getDescriptorSize(self):
        'getDescriptorSize() -> retval\n.   @brief Returns the number of coefficients required for the classification.'
        pass
    
    def getWinSigma(self):
        'getWinSigma() -> retval\n.   @brief Returns winSigma value'
        pass
    
    @property
    def histogramNormType(self):
        'histogramNormType'
        pass
    
    def load(self, filename, objname=None):
        'load(filename[, objname]) -> retval\n.   @brief loads coefficients for the linear SVM classifier from a file\n.   @param filename Name of the file to read.\n.   @param objname The optional name of the node to read (if empty, the first top-level node will be used).'
        pass
    
    @property
    def nbins(self):
        'nbins'
        pass
    
    @property
    def nlevels(self):
        'nlevels'
        pass
    
    def save(self, filename, objname=None):
        'save(filename[, objname]) -> None\n.   @brief saves coefficients for the linear SVM classifier to a file\n.   @param filename File name\n.   @param objname Object name'
        pass
    
    def setSVMDetector(self, _svmdetector):
        'setSVMDetector(_svmdetector) -> None\n.   @brief Sets coefficients for the linear SVM classifier.\n.   @param _svmdetector coefficients for the linear SVM classifier.'
        pass
    
    @property
    def signedGradient(self):
        'signedGradient'
        pass
    
    @property
    def svmDetector(self):
        'svmDetector'
        pass
    
    @property
    def winSigma(self):
        'winSigma'
        pass
    
    @property
    def winSize(self):
        'winSize'
        pass
    

HOGDescriptor_DEFAULT_NLEVELS = 64
HOGDescriptor_L2Hys = 0
def HOGDescriptor_getDaimlerPeopleDetector():
    'HOGDescriptor_getDaimlerPeopleDetector() -> retval\n.   @brief Returns coefficients of the classifier trained for people detection (for 48x96 windows).'
    pass

def HOGDescriptor_getDefaultPeopleDetector():
    'HOGDescriptor_getDefaultPeopleDetector() -> retval\n.   @brief Returns coefficients of the classifier trained for people detection (for 64x128 windows).'
    pass

HOUGH_GRADIENT = 3
HOUGH_MULTI_SCALE = 2
HOUGH_PROBABILISTIC = 1
HOUGH_STANDARD = 0
Hamming_normType = 6
class HausdorffDistanceExtractor(ShapeDistanceExtractor):
    __class__ = HausdorffDistanceExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getDistanceFlag(self):
        'getDistanceFlag() -> retval\n.'
        pass
    
    def getRankProportion(self):
        'getRankProportion() -> retval\n.'
        pass
    
    def setDistanceFlag(self, distanceFlag):
        'setDistanceFlag(distanceFlag) -> None\n.   @brief Set the norm used to compute the Hausdorff value between two shapes. It can be L1 or L2 norm.\n.   \n.   @param distanceFlag Flag indicating which norm is used to compute the Hausdorff distance\n.   (NORM_L1, NORM_L2).'
        pass
    
    def setRankProportion(self):
        'setRankProportion(rankProportion) -> None\n.   @brief This method sets the rank proportion (or fractional value) that establish the Kth ranked value of\n.   the partial Hausdorff distance. Experimentally had been shown that 0.6 is a good value to compare\n.   shapes.\n.   \n.   @param rankProportion fractional value (between 0 and 1).'
        pass
    

class HistogramCostExtractor(Algorithm):
    __class__ = HistogramCostExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def buildCostMatrix(self, descriptors1, descriptors2, costMatrix=None):
        'buildCostMatrix(descriptors1, descriptors2[, costMatrix]) -> costMatrix\n.'
        pass
    
    def getDefaultCost(self):
        'getDefaultCost() -> retval\n.'
        pass
    
    def getNDummies(self):
        'getNDummies() -> retval\n.'
        pass
    
    def setDefaultCost(self, defaultCost):
        'setDefaultCost(defaultCost) -> None\n.'
        pass
    
    def setNDummies(self, nDummies):
        'setNDummies(nDummies) -> None\n.'
        pass
    

def HoughCircles(image, method, dp, minDist, circles=None, param1=None, param2=None, minRadius=None, maxRadius=None):
    'HoughCircles(image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]) -> circles\n.   @brief Finds circles in a grayscale image using the Hough transform.\n.   \n.   The function finds circles in a grayscale image using a modification of the Hough transform.\n.   \n.   Example: :\n.   @include snippets/imgproc_HoughLinesCircles.cpp\n.   \n.   @note Usually the function detects the centers of circles well. However, it may fail to find correct\n.   radii. You can assist to the function by specifying the radius range ( minRadius and maxRadius ) if\n.   you know it. Or, you may set maxRadius to a negative number to return centers only without radius\n.   search, and find the correct radius using an additional procedure.\n.   \n.   @param image 8-bit, single-channel, grayscale input image.\n.   @param circles Output vector of found circles. Each vector is encoded as  3 or 4 element\n.   floating-point vector \\f$(x, y, radius)\\f$ or \\f$(x, y, radius, votes)\\f$ .\n.   @param method Detection method, see #HoughModes. Currently, the only implemented method is #HOUGH_GRADIENT\n.   @param dp Inverse ratio of the accumulator resolution to the image resolution. For example, if\n.   dp=1 , the accumulator has the same resolution as the input image. If dp=2 , the accumulator has\n.   half as big width and height.\n.   @param minDist Minimum distance between the centers of the detected circles. If the parameter is\n.   too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is\n.   too large, some circles may be missed.\n.   @param param1 First method-specific parameter. In case of #HOUGH_GRADIENT , it is the higher\n.   threshold of the two passed to the Canny edge detector (the lower one is twice smaller).\n.   @param param2 Second method-specific parameter. In case of #HOUGH_GRADIENT , it is the\n.   accumulator threshold for the circle centers at the detection stage. The smaller it is, the more\n.   false circles may be detected. Circles, corresponding to the larger accumulator values, will be\n.   returned first.\n.   @param minRadius Minimum circle radius.\n.   @param maxRadius Maximum circle radius. If <= 0, uses the maximum image dimension. If < 0, returns\n.   centers without finding the radius.\n.   \n.   @sa fitEllipse, minEnclosingCircle'
    pass

def HoughLines(image, rho, theta, threshold, lines=None, srn=None, stn=None, min_theta=None, max_theta=None):
    'HoughLines(image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]) -> lines\n.   @brief Finds lines in a binary image using the standard Hough transform.\n.   \n.   The function implements the standard or standard multi-scale Hough transform algorithm for line\n.   detection. See <http://homepages.inf.ed.ac.uk/rbf/HIPR2/hough.htm> for a good explanation of Hough\n.   transform.\n.   \n.   @param image 8-bit, single-channel binary source image. The image may be modified by the function.\n.   @param lines Output vector of lines. Each line is represented by a 2 or 3 element vector\n.   \\f$(\\rho, \\theta)\\f$ or \\f$(\\rho, \\theta, \\votes)\\f$ . \\f$\\rho\\f$ is the distance from the coordinate origin \\f$(0,0)\\f$ (top-left corner of\n.   the image). \\f$\\theta\\f$ is the line rotation angle in radians (\n.   \\f$0 \\sim \\textrm{vertical line}, \\pi/2 \\sim \\textrm{horizontal line}\\f$ ).\n.   \\f$\\votes\\f$ is the value of accumulator.\n.   @param rho Distance resolution of the accumulator in pixels.\n.   @param theta Angle resolution of the accumulator in radians.\n.   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough\n.   votes ( \\f$>\\texttt{threshold}\\f$ ).\n.   @param srn For the multi-scale Hough transform, it is a divisor for the distance resolution rho .\n.   The coarse accumulator distance resolution is rho and the accurate accumulator resolution is\n.   rho/srn . If both srn=0 and stn=0 , the classical Hough transform is used. Otherwise, both these\n.   parameters should be positive.\n.   @param stn For the multi-scale Hough transform, it is a divisor for the distance resolution theta.\n.   @param min_theta For standard and multi-scale Hough transform, minimum angle to check for lines.\n.   Must fall between 0 and max_theta.\n.   @param max_theta For standard and multi-scale Hough transform, maximum angle to check for lines.\n.   Must fall between min_theta and CV_PI.'
    pass

def HoughLinesP(image, rho, theta, threshold, lines=None, minLineLength=None, maxLineGap=None):
    'HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]) -> lines\n.   @brief Finds line segments in a binary image using the probabilistic Hough transform.\n.   \n.   The function implements the probabilistic Hough transform algorithm for line detection, described\n.   in @cite Matas00\n.   \n.   See the line detection example below:\n.   @include snippets/imgproc_HoughLinesP.cpp\n.   This is a sample picture the function parameters have been tuned for:\n.   \n.   ![image](pics/building.jpg)\n.   \n.   And this is the output of the above program in case of the probabilistic Hough transform:\n.   \n.   ![image](pics/houghp.png)\n.   \n.   @param image 8-bit, single-channel binary source image. The image may be modified by the function.\n.   @param lines Output vector of lines. Each line is represented by a 4-element vector\n.   \\f$(x_1, y_1, x_2, y_2)\\f$ , where \\f$(x_1,y_1)\\f$ and \\f$(x_2, y_2)\\f$ are the ending points of each detected\n.   line segment.\n.   @param rho Distance resolution of the accumulator in pixels.\n.   @param theta Angle resolution of the accumulator in radians.\n.   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough\n.   votes ( \\f$>\\texttt{threshold}\\f$ ).\n.   @param minLineLength Minimum line length. Line segments shorter than that are rejected.\n.   @param maxLineGap Maximum allowed gap between points on the same line to link them.\n.   \n.   @sa LineSegmentDetector'
    pass

def HoughLinesPointSet(_point, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step, _lines=None):
    "HoughLinesPointSet(_point, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step[, _lines]) -> _lines\n.   @brief Finds lines in a set of points using the standard Hough transform.\n.   \n.   The function finds lines in a set of points using a modification of the Hough transform.\n.   @include snippets/imgproc_HoughLinesPointSet.cpp\n.   @param _point Input vector of points. Each vector must be encoded as a Point vector \\f$(x,y)\\f$. Type must be CV_32FC2 or CV_32SC2.\n.   @param _lines Output vector of found lines. Each vector is encoded as a vector<Vec3d> \\f$(votes, rho, theta)\\f$.\n.   The larger the value of 'votes', the higher the reliability of the Hough line.\n.   @param lines_max Max count of hough lines.\n.   @param threshold Accumulator threshold parameter. Only those lines are returned that get enough\n.   votes ( \\f$>\\texttt{threshold}\\f$ )\n.   @param min_rho Minimum Distance value of the accumulator in pixels.\n.   @param max_rho Maximum Distance value of the accumulator in pixels.\n.   @param rho_step Distance resolution of the accumulator in pixels.\n.   @param min_theta Minimum angle value of the accumulator in radians.\n.   @param max_theta Maximum angle value of the accumulator in radians.\n.   @param theta_step Angle resolution of the accumulator in radians."
    pass

def HuMoments(m, hu=None):
    'HuMoments(m[, hu]) -> hu\n.   @overload'
    pass

IMREAD_ANYCOLOR = 4
IMREAD_ANYDEPTH = 2
IMREAD_COLOR = 1
IMREAD_GRAYSCALE = 0
IMREAD_IGNORE_ORIENTATION = 128
IMREAD_LOAD_GDAL = 8
IMREAD_REDUCED_COLOR_2 = 17
IMREAD_REDUCED_COLOR_4 = 33
IMREAD_REDUCED_COLOR_8 = 65
IMREAD_REDUCED_GRAYSCALE_2 = 16
IMREAD_REDUCED_GRAYSCALE_4 = 32
IMREAD_REDUCED_GRAYSCALE_8 = 64
IMREAD_UNCHANGED = -1
IMWRITE_EXR_TYPE = 48
IMWRITE_EXR_TYPE_FLOAT = 2
IMWRITE_EXR_TYPE_HALF = 1
IMWRITE_JPEG_CHROMA_QUALITY = 6
IMWRITE_JPEG_LUMA_QUALITY = 5
IMWRITE_JPEG_OPTIMIZE = 3
IMWRITE_JPEG_PROGRESSIVE = 2
IMWRITE_JPEG_QUALITY = 1
IMWRITE_JPEG_RST_INTERVAL = 4
IMWRITE_PAM_FORMAT_BLACKANDWHITE = 1
IMWRITE_PAM_FORMAT_GRAYSCALE = 2
IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = 3
IMWRITE_PAM_FORMAT_NULL = 0
IMWRITE_PAM_FORMAT_RGB = 4
IMWRITE_PAM_FORMAT_RGB_ALPHA = 5
IMWRITE_PAM_TUPLETYPE = 128
IMWRITE_PNG_BILEVEL = 18
IMWRITE_PNG_COMPRESSION = 16
IMWRITE_PNG_STRATEGY = 17
IMWRITE_PNG_STRATEGY_DEFAULT = 0
IMWRITE_PNG_STRATEGY_FILTERED = 1
IMWRITE_PNG_STRATEGY_FIXED = 4
IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2
IMWRITE_PNG_STRATEGY_RLE = 3
IMWRITE_PXM_BINARY = 32
IMWRITE_TIFF_RESUNIT = 256
IMWRITE_TIFF_XDPI = 257
IMWRITE_TIFF_YDPI = 258
IMWRITE_WEBP_QUALITY = 64
INPAINT_NS = 0
INPAINT_TELEA = 1
INTERSECT_FULL = 2
INTERSECT_NONE = 0
INTERSECT_PARTIAL = 1
INTER_AREA = 3
INTER_BITS = 5
INTER_BITS2 = 10
INTER_CUBIC = 2
INTER_LANCZOS4 = 4
INTER_LINEAR = 1
INTER_LINEAR_EXACT = 5
INTER_MAX = 7
INTER_NEAREST = 0
INTER_TAB_SIZE = 32
INTER_TAB_SIZE2 = 1024
class KAZE(Feature2D):
    __class__ = KAZE
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, extended=None, upright=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None):
        'create([, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]) -> retval\n.   @brief The KAZE constructor\n.   \n.   @param extended Set to enable extraction of extended (128-byte) descriptor.\n.   @param upright Set to enable use of upright descriptors (non rotation-invariant).\n.   @param threshold Detector response threshold to accept point\n.   @param nOctaves Maximum octave evolution of the image\n.   @param nOctaveLayers Default number of sublevels per scale level\n.   @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or\n.   DIFF_CHARBONNIER'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getDiffusivity(self):
        'getDiffusivity() -> retval\n.'
        pass
    
    def getExtended(self):
        'getExtended() -> retval\n.'
        pass
    
    def getNOctaveLayers(self):
        'getNOctaveLayers() -> retval\n.'
        pass
    
    def getNOctaves(self):
        'getNOctaves() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def getUpright(self):
        'getUpright() -> retval\n.'
        pass
    
    def setDiffusivity(self, diff):
        'setDiffusivity(diff) -> None\n.'
        pass
    
    def setExtended(self, extended):
        'setExtended(extended) -> None\n.'
        pass
    
    def setNOctaveLayers(self, octaveLayers):
        'setNOctaveLayers(octaveLayers) -> None\n.'
        pass
    
    def setNOctaves(self, octaves):
        'setNOctaves(octaves) -> None\n.'
        pass
    
    def setThreshold(self, threshold):
        'setThreshold(threshold) -> None\n.'
        pass
    
    def setUpright(self, upright):
        'setUpright(upright) -> None\n.'
        pass
    

KAZE_DIFF_CHARBONNIER = 3
KAZE_DIFF_PM_G1 = 0
KAZE_DIFF_PM_G2 = 1
KAZE_DIFF_WEICKERT = 2
def KAZE_create(extended=None, upright=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None):
    'KAZE_create([, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]) -> retval\n.   @brief The KAZE constructor\n.   \n.   @param extended Set to enable extraction of extended (128-byte) descriptor.\n.   @param upright Set to enable use of upright descriptors (non rotation-invariant).\n.   @param threshold Detector response threshold to accept point\n.   @param nOctaves Maximum octave evolution of the image\n.   @param nOctaveLayers Default number of sublevels per scale level\n.   @param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, DIFF_WEICKERT or\n.   DIFF_CHARBONNIER'
    pass

KMEANS_PP_CENTERS = 2
KMEANS_RANDOM_CENTERS = 0
KMEANS_USE_INITIAL_LABELS = 1
class KalmanFilter(_mod_builtins.object):
    __class__ = KalmanFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def controlMatrix(self):
        'controlMatrix'
        pass
    
    def correct(self, measurement):
        'correct(measurement) -> retval\n.   @brief Updates the predicted state from the measurement.\n.   \n.   @param measurement The measured system parameters'
        pass
    
    @property
    def errorCovPost(self):
        'errorCovPost'
        pass
    
    @property
    def errorCovPre(self):
        'errorCovPre'
        pass
    
    @property
    def gain(self):
        'gain'
        pass
    
    @property
    def measurementMatrix(self):
        'measurementMatrix'
        pass
    
    @property
    def measurementNoiseCov(self):
        'measurementNoiseCov'
        pass
    
    def predict(self, control=None):
        'predict([, control]) -> retval\n.   @brief Computes a predicted state.\n.   \n.   @param control The optional input control'
        pass
    
    @property
    def processNoiseCov(self):
        'processNoiseCov'
        pass
    
    @property
    def statePost(self):
        'statePost'
        pass
    
    @property
    def statePre(self):
        'statePre'
        pass
    
    @property
    def transitionMatrix(self):
        'transitionMatrix'
        pass
    

class KeyPoint(_mod_builtins.object):
    __class__ = KeyPoint
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def angle(self):
        'angle'
        pass
    
    @property
    def class_id(self):
        'class_id'
        pass
    
    @classmethod
    def convert(cls, keypoints, keypointIndexes=None):
        'convert(keypoints[, keypointIndexes]) -> points2f\n.   This method converts vector of keypoints to vector of points or the reverse, where each keypoint is\n.   assigned the same size and the same orientation.\n.   \n.   @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB\n.   @param points2f Array of (x,y) coordinates of each keypoint\n.   @param keypointIndexes Array of indexes of keypoints to be converted to points. (Acts like a mask to\n.   convert only specified keypoints)\n\n\n\nconvert(points2f[, size[, response[, octave[, class_id]]]]) -> keypoints\n.   @overload\n.   @param points2f Array of (x,y) coordinates of each keypoint\n.   @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB\n.   @param size keypoint diameter\n.   @param response keypoint detector response on the keypoint (that is, strength of the keypoint)\n.   @param octave pyramid octave in which the keypoint has been detected\n.   @param class_id object id'
        pass
    
    @property
    def octave(self):
        'octave'
        pass
    
    @classmethod
    def overlap(cls, kp1, kp2):
        "overlap(kp1, kp2) -> retval\n.   This method computes overlap for pair of keypoints. Overlap is the ratio between area of keypoint\n.   regions' intersection and area of keypoint regions' union (considering keypoint region as circle).\n.   If they don't overlap, we get zero. If they coincide at same location with same size, we get 1.\n.   @param kp1 First keypoint\n.   @param kp2 Second keypoint"
        pass
    
    @property
    def pt(self):
        'pt'
        pass
    
    @property
    def response(self):
        'response'
        pass
    
    @property
    def size(self):
        'size'
        pass
    

def KeyPoint_convert(keypoints, keypointIndexes=None):
    'KeyPoint_convert(keypoints[, keypointIndexes]) -> points2f\n.   This method converts vector of keypoints to vector of points or the reverse, where each keypoint is\n.   assigned the same size and the same orientation.\n.   \n.   @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB\n.   @param points2f Array of (x,y) coordinates of each keypoint\n.   @param keypointIndexes Array of indexes of keypoints to be converted to points. (Acts like a mask to\n.   convert only specified keypoints)\n\n\n\nKeyPoint_convert(points2f[, size[, response[, octave[, class_id]]]]) -> keypoints\n.   @overload\n.   @param points2f Array of (x,y) coordinates of each keypoint\n.   @param keypoints Keypoints obtained from any feature detection algorithm like SIFT/SURF/ORB\n.   @param size keypoint diameter\n.   @param response keypoint detector response on the keypoint (that is, strength of the keypoint)\n.   @param octave pyramid octave in which the keypoint has been detected\n.   @param class_id object id'
    pass

def KeyPoint_overlap(kp1, kp2):
    "KeyPoint_overlap(kp1, kp2) -> retval\n.   This method computes overlap for pair of keypoints. Overlap is the ratio between area of keypoint\n.   regions' intersection and area of keypoint regions' union (considering keypoint region as circle).\n.   If they don't overlap, we get zero. If they coincide at same location with same size, we get 1.\n.   @param kp1 First keypoint\n.   @param kp2 Second keypoint"
    pass

LDR_SIZE = 256
LINE_4 = 4
LINE_8 = 8
LINE_AA = 16
LMEDS = 4
LSD_REFINE_ADV = 2
LSD_REFINE_NONE = 0
LSD_REFINE_STD = 1
def LUT(src, lut, dst=None):
    'LUT(src, lut[, dst]) -> dst\n.   @brief Performs a look-up table transform of an array.\n.   \n.   The function LUT fills the output array with values from the look-up table. Indices of the entries\n.   are taken from the input array. That is, the function processes each element of src as follows:\n.   \\f[\\texttt{dst} (I)  \\leftarrow \\texttt{lut(src(I) + d)}\\f]\n.   where\n.   \\f[d =  \\fork{0}{if \\(\\texttt{src}\\) has depth \\(\\texttt{CV_8U}\\)}{128}{if \\(\\texttt{src}\\) has depth \\(\\texttt{CV_8S}\\)}\\f]\n.   @param src input array of 8-bit elements.\n.   @param lut look-up table of 256 elements; in case of multi-channel input array, the table should\n.   either have a single channel (in this case the same table is used for all channels) or the same\n.   number of channels as in the input array.\n.   @param dst output array of the same size and number of channels as src, and the same depth as lut.\n.   @sa  convertScaleAbs, Mat::convertTo'
    pass

def Laplacian(src, ddepth, dst=None, ksize=None, scale=None, delta=None, borderType=None):
    'Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst\n.   @brief Calculates the Laplacian of an image.\n.   \n.   The function calculates the Laplacian of the source image by adding up the second x and y\n.   derivatives calculated using the Sobel operator:\n.   \n.   \\f[\\texttt{dst} =  \\Delta \\texttt{src} =  \\frac{\\partial^2 \\texttt{src}}{\\partial x^2} +  \\frac{\\partial^2 \\texttt{src}}{\\partial y^2}\\f]\n.   \n.   This is done when `ksize > 1`. When `ksize == 1`, the Laplacian is computed by filtering the image\n.   with the following \\f$3 \\times 3\\f$ aperture:\n.   \n.   \\f[\\vecthreethree {0}{1}{0}{1}{-4}{1}{0}{1}{0}\\f]\n.   \n.   @param src Source image.\n.   @param dst Destination image of the same size and the same number of channels as src .\n.   @param ddepth Desired depth of the destination image.\n.   @param ksize Aperture size used to compute the second-derivative filters. See #getDerivKernels for\n.   details. The size must be positive and odd.\n.   @param scale Optional scale factor for the computed Laplacian values. By default, no scaling is\n.   applied. See #getDerivKernels for details.\n.   @param delta Optional delta value that is added to the results prior to storing them in dst .\n.   @param borderType Pixel extrapolation method, see #BorderTypes\n.   @sa  Sobel, Scharr'
    pass

class LineSegmentDetector(Algorithm):
    __class__ = LineSegmentDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compareSegments(self):
        'compareSegments(size, lines1, lines2[, _image]) -> retval, _image\n.   @brief Draws two groups of lines in blue and red, counting the non overlapping (mismatching) pixels.\n.   \n.   @param size The size of the image, where lines1 and lines2 were found.\n.   @param lines1 The first group of lines that needs to be drawn. It is visualized in blue color.\n.   @param lines2 The second group of lines. They visualized in red color.\n.   @param _image Optional image, where the lines will be drawn. The image should be color(3-channel)\n.   in order for lines1 and lines2 to be drawn in the above mentioned colors.'
        pass
    
    def detect(self, _image, _lines=None, width=None, prec=None, nfa=None):
        'detect(_image[, _lines[, width[, prec[, nfa]]]]) -> _lines, width, prec, nfa\n.   @brief Finds lines in the input image.\n.   \n.   This is the output of the default parameters of the algorithm on the above shown image.\n.   \n.   ![image](pics/building_lsd.png)\n.   \n.   @param _image A grayscale (CV_8UC1) input image. If only a roi needs to be selected, use:\n.   `lsd_ptr-\\>detect(image(roi), lines, ...); lines += Scalar(roi.x, roi.y, roi.x, roi.y);`\n.   @param _lines A vector of Vec4i or Vec4f elements specifying the beginning and ending point of a line. Where\n.   Vec4i/Vec4f is (x1, y1, x2, y2), point 1 is the start, point 2 - end. Returned lines are strictly\n.   oriented depending on the gradient.\n.   @param width Vector of widths of the regions, where the lines are found. E.g. Width of line.\n.   @param prec Vector of precisions with which the lines are found.\n.   @param nfa Vector containing number of false alarms in the line region, with precision of 10%. The\n.   bigger the value, logarithmically better the detection.\n.   - -1 corresponds to 10 mean false alarms\n.   - 0 corresponds to 1 mean false alarm\n.   - 1 corresponds to 0.1 mean false alarms\n.   This vector will be calculated only when the objects type is #LSD_REFINE_ADV.'
        pass
    
    def drawSegments(self, _image, lines):
        'drawSegments(_image, lines) -> _image\n.   @brief Draws the line segments on a given image.\n.   @param _image The image, where the lines will be drawn. Should be bigger or equal to the image,\n.   where the lines were found.\n.   @param lines A vector of the lines that needed to be drawn.'
        pass
    

MARKER_CROSS = 0
MARKER_DIAMOND = 3
MARKER_SQUARE = 4
MARKER_STAR = 2
MARKER_TILTED_CROSS = 1
MARKER_TRIANGLE_DOWN = 6
MARKER_TRIANGLE_UP = 5
MAT_AUTO_STEP = 0
MAT_CONTINUOUS_FLAG = 16384
MAT_DEPTH_MASK = 7
MAT_MAGIC_MASK = 4294901760
MAT_MAGIC_VAL = 1124007936
MAT_SUBMATRIX_FLAG = 32768
MAT_TYPE_MASK = 4095
MIXED_CLONE = 2
MONOCHROME_TRANSFER = 3
MORPH_BLACKHAT = 6
MORPH_CLOSE = 3
MORPH_CROSS = 1
MORPH_DILATE = 1
MORPH_ELLIPSE = 2
MORPH_ERODE = 0
MORPH_GRADIENT = 4
MORPH_HITMISS = 7
MORPH_OPEN = 2
MORPH_RECT = 0
MORPH_TOPHAT = 5
MOTION_AFFINE = 2
MOTION_EUCLIDEAN = 1
MOTION_HOMOGRAPHY = 3
MOTION_TRANSLATION = 0
class MSER(Feature2D):
    __class__ = MSER
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, _delta=None, _min_area=None, _max_area=None, _max_variation=None, _min_diversity=None, _max_evolution=None, _area_threshold=None, _min_margin=None, _edge_blur_size=None):
        'create([, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]) -> retval\n.   @brief Full consturctor for %MSER detector\n.   \n.   @param _delta it compares \\f$(size_{i}-size_{i-delta})/size_{i-delta}\\f$\n.   @param _min_area prune the area which smaller than minArea\n.   @param _max_area prune the area which bigger than maxArea\n.   @param _max_variation prune the area have similar size to its children\n.   @param _min_diversity for color image, trace back to cut off mser with diversity less than min_diversity\n.   @param _max_evolution  for color image, the evolution steps\n.   @param _area_threshold for color image, the area threshold to cause re-initialize\n.   @param _min_margin for color image, ignore too small margin\n.   @param _edge_blur_size for color image, the aperture size for edge blur'
        pass
    
    def detectRegions(self, image):
        'detectRegions(image) -> msers, bboxes\n.   @brief Detect %MSER regions\n.   \n.   @param image input image (8UC1, 8UC3 or 8UC4, must be greater or equal than 3x3)\n.   @param msers resulting list of point sets\n.   @param bboxes resulting bounding boxes'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getDelta(self):
        'getDelta() -> retval\n.'
        pass
    
    def getMaxArea(self):
        'getMaxArea() -> retval\n.'
        pass
    
    def getMinArea(self):
        'getMinArea() -> retval\n.'
        pass
    
    def getPass2Only(self):
        'getPass2Only() -> retval\n.'
        pass
    
    def setDelta(self, delta):
        'setDelta(delta) -> None\n.'
        pass
    
    def setMaxArea(self, maxArea):
        'setMaxArea(maxArea) -> None\n.'
        pass
    
    def setMinArea(self, minArea):
        'setMinArea(minArea) -> None\n.'
        pass
    
    def setPass2Only(self, f):
        'setPass2Only(f) -> None\n.'
        pass
    

def MSER_create(_delta=None, _min_area=None, _max_area=None, _max_variation=None, _min_diversity=None, _max_evolution=None, _area_threshold=None, _min_margin=None, _edge_blur_size=None):
    'MSER_create([, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]) -> retval\n.   @brief Full consturctor for %MSER detector\n.   \n.   @param _delta it compares \\f$(size_{i}-size_{i-delta})/size_{i-delta}\\f$\n.   @param _min_area prune the area which smaller than minArea\n.   @param _max_area prune the area which bigger than maxArea\n.   @param _max_variation prune the area have similar size to its children\n.   @param _min_diversity for color image, trace back to cut off mser with diversity less than min_diversity\n.   @param _max_evolution  for color image, the evolution steps\n.   @param _area_threshold for color image, the area threshold to cause re-initialize\n.   @param _min_margin for color image, ignore too small margin\n.   @param _edge_blur_size for color image, the aperture size for edge blur'
    pass

def Mahalanobis(v1, v2, icovar):
    'Mahalanobis(v1, v2, icovar) -> retval\n.   @brief Calculates the Mahalanobis distance between two vectors.\n.   \n.   The function cv::Mahalanobis calculates and returns the weighted distance between two vectors:\n.   \\f[d( \\texttt{vec1} , \\texttt{vec2} )= \\sqrt{\\sum_{i,j}{\\texttt{icovar(i,j)}\\cdot(\\texttt{vec1}(I)-\\texttt{vec2}(I))\\cdot(\\texttt{vec1(j)}-\\texttt{vec2(j)})} }\\f]\n.   The covariance matrix may be calculated using the #calcCovarMatrix function and then inverted using\n.   the invert function (preferably using the #DECOMP_SVD method, as the most accurate).\n.   @param v1 first 1D input vector.\n.   @param v2 second 1D input vector.\n.   @param icovar inverse covariance matrix.'
    pass

Mat_AUTO_STEP = 0
Mat_CONTINUOUS_FLAG = 16384
Mat_DEPTH_MASK = 7
Mat_MAGIC_MASK = 4294901760
Mat_MAGIC_VAL = 1124007936
Mat_SUBMATRIX_FLAG = 32768
Mat_TYPE_MASK = 4095
class MergeDebevec(MergeExposures):
    __class__ = MergeDebevec
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def process(self, src, times, response, dst=None):
        'process(src, times, response[, dst]) -> dst\n.   \n\n\n\nprocess(src, times[, dst]) -> dst\n.'
        pass
    

class MergeExposures(Algorithm):
    __class__ = MergeExposures
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def process(self, src, times, response, dst=None):
        'process(src, times, response[, dst]) -> dst\n.   @brief Merges images.\n.   \n.   @param src vector of input images\n.   @param dst result image\n.   @param times vector of exposure time values for each image\n.   @param response 256x1 matrix with inverse camera response function for each pixel value, it should\n.   have the same number of channels as images.'
        pass
    

class MergeMertens(MergeExposures):
    __class__ = MergeMertens
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getContrastWeight(self):
        'getContrastWeight() -> retval\n.'
        pass
    
    def getExposureWeight(self):
        'getExposureWeight() -> retval\n.'
        pass
    
    def getSaturationWeight(self):
        'getSaturationWeight() -> retval\n.'
        pass
    
    def process(self, src, times, response, dst=None):
        "process(src, times, response[, dst]) -> dst\n.   \n\n\n\nprocess(src[, dst]) -> dst\n.   @brief Short version of process, that doesn't take extra arguments.\n.   \n.   @param src vector of input images\n.   @param dst result image"
        pass
    
    def setContrastWeight(self, contrast_weiht):
        'setContrastWeight(contrast_weiht) -> None\n.'
        pass
    
    def setExposureWeight(self, exposure_weight):
        'setExposureWeight(exposure_weight) -> None\n.'
        pass
    
    def setSaturationWeight(self, saturation_weight):
        'setSaturationWeight(saturation_weight) -> None\n.'
        pass
    

class MergeRobertson(MergeExposures):
    __class__ = MergeRobertson
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def process(self, src, times, response, dst=None):
        'process(src, times, response[, dst]) -> dst\n.   \n\n\n\nprocess(src, times[, dst]) -> dst\n.'
        pass
    

class MultiTracker(Algorithm):
    __class__ = MultiTracker
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def add(self, newTracker, image, boundingBox):
        'add(newTracker, image, boundingBox) -> retval\n.   * \\brief Add a new object to be tracked.\n.   *\n.   * @param newTracker tracking algorithm to be used\n.   * @param image input image\n.   * @param boundingBox a rectangle represents ROI of the tracked object'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   * \\brief Returns a pointer to a new instance of MultiTracker'
        pass
    
    def getObjects(self):
        'getObjects() -> retval\n.   * \\brief Returns a reference to a storage for the tracked objects, each object corresponds to one tracker algorithm'
        pass
    
    def update(self, image):
        'update(image) -> retval, boundingBox\n.   * \\brief Update the current tracking status.\n.   * @param image input image\n.   * @param boundingBox the tracking result, represent a list of ROIs of the tracked objects.'
        pass
    

def MultiTracker_create():
    'MultiTracker_create() -> retval\n.   * \\brief Returns a pointer to a new instance of MultiTracker'
    pass

NORMAL_CLONE = 1
NORMCONV_FILTER = 2
NORM_HAMMING = 6
NORM_HAMMING2 = 7
NORM_INF = 1
NORM_L1 = 2
NORM_L2 = 4
NORM_L2SQR = 5
NORM_MINMAX = 32
NORM_RELATIVE = 8
NORM_TYPE_MASK = 7
class NormHistogramCostExtractor(HistogramCostExtractor):
    __class__ = NormHistogramCostExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getNormFlag(self):
        'getNormFlag() -> retval\n.'
        pass
    
    def setNormFlag(self, flag):
        'setNormFlag(flag) -> None\n.'
        pass
    

OPTFLOW_FARNEBACK_GAUSSIAN = 256
OPTFLOW_LK_GET_MIN_EIGENVALS = 8
OPTFLOW_USE_INITIAL_FLOW = 4
class ORB(Feature2D):
    __class__ = ORB
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, nfeatures=None, scaleFactor=None, nlevels=None, edgeThreshold=None, firstLevel=None, WTA_K=None, scoreType=None, patchSize=None, fastThreshold=None):
        'create([, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]) -> retval\n.   @brief The ORB constructor\n.   \n.   @param nfeatures The maximum number of features to retain.\n.   @param scaleFactor Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical\n.   pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor\n.   will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor\n.   will mean that to cover certain scale range you will need more pyramid levels and so the speed\n.   will suffer.\n.   @param nlevels The number of pyramid levels. The smallest level will have linear size equal to\n.   input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).\n.   @param edgeThreshold This is size of the border where the features are not detected. It should\n.   roughly match the patchSize parameter.\n.   @param firstLevel The level of pyramid to put source image to. Previous layers are filled\n.   with upscaled source image.\n.   @param WTA_K The number of points that produce each element of the oriented BRIEF descriptor. The\n.   default value 2 means the BRIEF where we take a random point pair and compare their brightnesses,\n.   so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3\n.   random points (of course, those point coordinates are random, but they are generated from the\n.   pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel\n.   rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such\n.   output will occupy 2 bits, and therefore it will need a special variant of Hamming distance,\n.   denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each\n.   bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).\n.   @param scoreType The default HARRIS_SCORE means that Harris algorithm is used to rank features\n.   (the score is written to KeyPoint::score and is used to retain best nfeatures features);\n.   FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints,\n.   but it is a little faster to compute.\n.   @param patchSize size of the patch used by the oriented BRIEF descriptor. Of course, on smaller\n.   pyramid layers the perceived image area covered by a feature will be larger.\n.   @param fastThreshold'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    
    def getEdgeThreshold(self):
        'getEdgeThreshold() -> retval\n.'
        pass
    
    def getFastThreshold(self):
        'getFastThreshold() -> retval\n.'
        pass
    
    def getFirstLevel(self):
        'getFirstLevel() -> retval\n.'
        pass
    
    def getMaxFeatures(self):
        'getMaxFeatures() -> retval\n.'
        pass
    
    def getNLevels(self):
        'getNLevels() -> retval\n.'
        pass
    
    def getPatchSize(self):
        'getPatchSize() -> retval\n.'
        pass
    
    def getScaleFactor(self):
        'getScaleFactor() -> retval\n.'
        pass
    
    def getScoreType(self):
        'getScoreType() -> retval\n.'
        pass
    
    def getWTA_K(self):
        'getWTA_K() -> retval\n.'
        pass
    
    def setEdgeThreshold(self, edgeThreshold):
        'setEdgeThreshold(edgeThreshold) -> None\n.'
        pass
    
    def setFastThreshold(self, fastThreshold):
        'setFastThreshold(fastThreshold) -> None\n.'
        pass
    
    def setFirstLevel(self, firstLevel):
        'setFirstLevel(firstLevel) -> None\n.'
        pass
    
    def setMaxFeatures(self, maxFeatures):
        'setMaxFeatures(maxFeatures) -> None\n.'
        pass
    
    def setNLevels(self, nlevels):
        'setNLevels(nlevels) -> None\n.'
        pass
    
    def setPatchSize(self, patchSize):
        'setPatchSize(patchSize) -> None\n.'
        pass
    
    def setScaleFactor(self, scaleFactor):
        'setScaleFactor(scaleFactor) -> None\n.'
        pass
    
    def setScoreType(self, scoreType):
        'setScoreType(scoreType) -> None\n.'
        pass
    
    def setWTA_K(self, wta_k):
        'setWTA_K(wta_k) -> None\n.'
        pass
    

ORB_FAST_SCORE = 1
ORB_HARRIS_SCORE = 0
ORB_K_BYTES = 32
def ORB_create(nfeatures=None, scaleFactor=None, nlevels=None, edgeThreshold=None, firstLevel=None, WTA_K=None, scoreType=None, patchSize=None, fastThreshold=None):
    'ORB_create([, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]) -> retval\n.   @brief The ORB constructor\n.   \n.   @param nfeatures The maximum number of features to retain.\n.   @param scaleFactor Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical\n.   pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor\n.   will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor\n.   will mean that to cover certain scale range you will need more pyramid levels and so the speed\n.   will suffer.\n.   @param nlevels The number of pyramid levels. The smallest level will have linear size equal to\n.   input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).\n.   @param edgeThreshold This is size of the border where the features are not detected. It should\n.   roughly match the patchSize parameter.\n.   @param firstLevel The level of pyramid to put source image to. Previous layers are filled\n.   with upscaled source image.\n.   @param WTA_K The number of points that produce each element of the oriented BRIEF descriptor. The\n.   default value 2 means the BRIEF where we take a random point pair and compare their brightnesses,\n.   so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3\n.   random points (of course, those point coordinates are random, but they are generated from the\n.   pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel\n.   rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such\n.   output will occupy 2 bits, and therefore it will need a special variant of Hamming distance,\n.   denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each\n.   bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).\n.   @param scoreType The default HARRIS_SCORE means that Harris algorithm is used to rank features\n.   (the score is written to KeyPoint::score and is used to retain best nfeatures features);\n.   FAST_SCORE is alternative value of the parameter that produces slightly less stable keypoints,\n.   but it is a little faster to compute.\n.   @param patchSize size of the patch used by the oriented BRIEF descriptor. Of course, on smaller\n.   pyramid layers the perceived image area covered by a feature will be larger.\n.   @param fastThreshold'
    pass

ORB_kBytes = 32
PARAM_ALGORITHM = 6
PARAM_BOOLEAN = 1
PARAM_FLOAT = 7
PARAM_INT = 0
PARAM_MAT = 4
PARAM_MAT_VECTOR = 5
PARAM_REAL = 2
PARAM_SCALAR = 12
PARAM_STRING = 3
PARAM_UCHAR = 11
PARAM_UINT64 = 9
PARAM_UNSIGNED_INT = 8
def PCABackProject(data, mean, eigenvectors, result=None):
    'PCABackProject(data, mean, eigenvectors[, result]) -> result\n.   wrap PCA::backProject'
    pass

def PCACompute(data, mean, eigenvectors=None, maxComponents=None):
    'PCACompute(data, mean[, eigenvectors[, maxComponents]]) -> mean, eigenvectors\n.   wrap PCA::operator()\n\n\n\nPCACompute(data, mean, retainedVariance[, eigenvectors]) -> mean, eigenvectors\n.   wrap PCA::operator()'
    pass

def PCACompute2(data, mean, eigenvectors=None, eigenvalues=None, maxComponents=None):
    'PCACompute2(data, mean[, eigenvectors[, eigenvalues[, maxComponents]]]) -> mean, eigenvectors, eigenvalues\n.   wrap PCA::operator() and add eigenvalues output parameter\n\n\n\nPCACompute2(data, mean, retainedVariance[, eigenvectors[, eigenvalues]]) -> mean, eigenvectors, eigenvalues\n.   wrap PCA::operator() and add eigenvalues output parameter'
    pass

def PCAProject(data, mean, eigenvectors, result=None):
    'PCAProject(data, mean, eigenvectors[, result]) -> result\n.   wrap PCA::project'
    pass

PCA_DATA_AS_COL = 1
PCA_DATA_AS_ROW = 0
PCA_USE_AVG = 2
PROJ_SPHERICAL_EQRECT = 1
PROJ_SPHERICAL_ORTHO = 0
def PSNR():
    'PSNR(src1, src2) -> retval\n.   @brief Computes the Peak Signal-to-Noise Ratio (PSNR) image quality metric.\n.   \n.   This function calculates the Peak Signal-to-Noise Ratio (PSNR) image quality metric in decibels (dB), between two input arrays src1 and src2. Arrays must have depth CV_8U.\n.   \n.   The PSNR is calculated as follows:\n.   \n.   \\f[\n.   \\texttt{PSNR} = 10 \\cdot \\log_{10}{\\left( \\frac{R^2}{MSE} \\right) }\n.   \\f]\n.   \n.   where R is the maximum integer value of depth CV_8U (255) and MSE is the mean squared error between the two arrays.\n.   \n.   @param src1 first input array.\n.   @param src2 second input array of the same size as src1.'
    pass

Param_ALGORITHM = 6
Param_BOOLEAN = 1
Param_FLOAT = 7
Param_INT = 0
Param_MAT = 4
Param_MAT_VECTOR = 5
Param_REAL = 2
Param_SCALAR = 12
Param_STRING = 3
Param_UCHAR = 11
Param_UINT64 = 9
Param_UNSIGNED_INT = 8
QT_CHECKBOX = 1
QT_FONT_BLACK = 87
QT_FONT_BOLD = 75
QT_FONT_DEMIBOLD = 63
QT_FONT_LIGHT = 25
QT_FONT_NORMAL = 50
QT_NEW_BUTTONBAR = 1024
QT_PUSH_BUTTON = 0
QT_RADIOBOX = 2
QT_STYLE_ITALIC = 1
QT_STYLE_NORMAL = 0
QT_STYLE_OBLIQUE = 2
RANSAC = 8
RECURS_FILTER = 1
REDUCE_AVG = 1
REDUCE_MAX = 2
REDUCE_MIN = 3
REDUCE_SUM = 0
RETR_CCOMP = 2
RETR_EXTERNAL = 0
RETR_FLOODFILL = 4
RETR_LIST = 1
RETR_TREE = 3
RHO = 16
RNG_NORMAL = 1
RNG_UNIFORM = 0
ROTATE_180 = 1
ROTATE_90_CLOCKWISE = 0
ROTATE_90_COUNTERCLOCKWISE = 2
def RQDecomp3x3(src, mtxR=None, mtxQ=None, Qx=None, Qy=None, Qz=None):
    'RQDecomp3x3(src[, mtxR[, mtxQ[, Qx[, Qy[, Qz]]]]]) -> retval, mtxR, mtxQ, Qx, Qy, Qz\n.   @brief Computes an RQ decomposition of 3x3 matrices.\n.   \n.   @param src 3x3 input matrix.\n.   @param mtxR Output 3x3 upper-triangular matrix.\n.   @param mtxQ Output 3x3 orthogonal matrix.\n.   @param Qx Optional output 3x3 rotation matrix around x-axis.\n.   @param Qy Optional output 3x3 rotation matrix around y-axis.\n.   @param Qz Optional output 3x3 rotation matrix around z-axis.\n.   \n.   The function computes a RQ decomposition using the given rotations. This function is used in\n.   decomposeProjectionMatrix to decompose the left 3x3 submatrix of a projection matrix into a camera\n.   and a rotation matrix.\n.   \n.   It optionally returns three rotation matrices, one for each axis, and the three Euler angles in\n.   degrees (as the return value) that could be used in OpenGL. Note, there is always more than one\n.   sequence of rotations about the three principal axes that results in the same orientation of an\n.   object, e.g. see @cite Slabaugh . Returned tree rotation matrices and corresponding three Euler angles\n.   are only one of the possible solutions.'
    pass

def Rodrigues(src, dst=None, jacobian=None):
    'Rodrigues(src[, dst[, jacobian]]) -> dst, jacobian\n.   @brief Converts a rotation matrix to a rotation vector or vice versa.\n.   \n.   @param src Input rotation vector (3x1 or 1x3) or rotation matrix (3x3).\n.   @param dst Output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively.\n.   @param jacobian Optional output Jacobian matrix, 3x9 or 9x3, which is a matrix of partial\n.   derivatives of the output array components with respect to the input array components.\n.   \n.   \\f[\\begin{array}{l} \\theta \\leftarrow norm(r) \\\\ r  \\leftarrow r/ \\theta \\\\ R =  \\cos{\\theta} I + (1- \\cos{\\theta} ) r r^T +  \\sin{\\theta} \\vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} \\end{array}\\f]\n.   \n.   Inverse transformation can be also done easily, since\n.   \n.   \\f[\\sin ( \\theta ) \\vecthreethree{0}{-r_z}{r_y}{r_z}{0}{-r_x}{-r_y}{r_x}{0} = \\frac{R - R^T}{2}\\f]\n.   \n.   A rotation vector is a convenient and most compact representation of a rotation matrix (since any\n.   rotation matrix has just 3 degrees of freedom). The representation is used in the global 3D geometry\n.   optimization procedures like calibrateCamera, stereoCalibrate, or solvePnP .'
    pass

SOLVELP_MULTI = 1
SOLVELP_SINGLE = 0
SOLVELP_UNBOUNDED = -2
SOLVELP_UNFEASIBLE = -1
SOLVEPNP_AP3P = 5
SOLVEPNP_DLS = 3
SOLVEPNP_EPNP = 1
SOLVEPNP_ITERATIVE = 0
SOLVEPNP_MAX_COUNT = 6
SOLVEPNP_P3P = 2
SOLVEPNP_UPNP = 4
SORT_ASCENDING = 0
SORT_DESCENDING = 16
SORT_EVERY_COLUMN = 1
SORT_EVERY_ROW = 0
SPARSE_MAT_HASH_BIT = 2147483648
SPARSE_MAT_HASH_SCALE = 1540483477
SPARSE_MAT_MAGIC_VAL = 1123876864
SPARSE_MAT_MAX_DIM = 32
STEREO_BM_PREFILTER_NORMALIZED_RESPONSE = 0
STEREO_BM_PREFILTER_XSOBEL = 1
STEREO_MATCHER_DISP_SCALE = 16
STEREO_MATCHER_DISP_SHIFT = 4
STEREO_SGBM_MODE_HH = 1
STEREO_SGBM_MODE_HH4 = 3
STEREO_SGBM_MODE_SGBM = 0
STEREO_SGBM_MODE_SGBM_3WAY = 2
STITCHER_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3
STITCHER_ERR_HOMOGRAPHY_EST_FAIL = 2
STITCHER_ERR_NEED_MORE_IMGS = 1
STITCHER_OK = 0
STITCHER_ORIG_RESOL = -1
STITCHER_PANORAMA = 0
STITCHER_SCANS = 1
SUBDIV2D_NEXT_AROUND_DST = 34
SUBDIV2D_NEXT_AROUND_LEFT = 19
SUBDIV2D_NEXT_AROUND_ORG = 0
SUBDIV2D_NEXT_AROUND_RIGHT = 49
SUBDIV2D_PREV_AROUND_DST = 51
SUBDIV2D_PREV_AROUND_LEFT = 32
SUBDIV2D_PREV_AROUND_ORG = 17
SUBDIV2D_PREV_AROUND_RIGHT = 2
SUBDIV2D_PTLOC_ERROR = -2
SUBDIV2D_PTLOC_INSIDE = 0
SUBDIV2D_PTLOC_ON_EDGE = 2
SUBDIV2D_PTLOC_OUTSIDE_RECT = -1
SUBDIV2D_PTLOC_VERTEX = 1
def SVBackSubst(w, u, vt, rhs, dst=None):
    'SVBackSubst(w, u, vt, rhs[, dst]) -> dst\n.   wrap SVD::backSubst'
    pass

SVD_FULL_UV = 4
SVD_MODIFY_A = 1
SVD_NO_UV = 2
def SVDecomp(src, w=None, u=None, vt=None, flags=None):
    'SVDecomp(src[, w[, u[, vt[, flags]]]]) -> w, u, vt\n.   wrap SVD::compute'
    pass

def Scharr(src, ddepth, dx, dy, dst=None, scale=None, delta=None, borderType=None):
    'Scharr(src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]) -> dst\n.   @brief Calculates the first x- or y- image derivative using Scharr operator.\n.   \n.   The function computes the first x- or y- spatial image derivative using the Scharr operator. The\n.   call\n.   \n.   \\f[\\texttt{Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType)}\\f]\n.   \n.   is equivalent to\n.   \n.   \\f[\\texttt{Sobel(src, dst, ddepth, dx, dy, CV_SCHARR, scale, delta, borderType)} .\\f]\n.   \n.   @param src input image.\n.   @param dst output image of the same size and the same number of channels as src.\n.   @param ddepth output image depth, see @ref filter_depths "combinations"\n.   @param dx order of the derivative x.\n.   @param dy order of the derivative y.\n.   @param scale optional scale factor for the computed derivative values; by default, no scaling is\n.   applied (see #getDerivKernels for details).\n.   @param delta optional delta value that is added to the results prior to storing them in dst.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   @sa  cartToPolar'
    pass

class ShapeContextDistanceExtractor(ShapeDistanceExtractor):
    __class__ = ShapeContextDistanceExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getAngularBins(self):
        'getAngularBins() -> retval\n.'
        pass
    
    def getBendingEnergyWeight(self):
        'getBendingEnergyWeight() -> retval\n.'
        pass
    
    def getCostExtractor(self):
        'getCostExtractor() -> retval\n.'
        pass
    
    def getImageAppearanceWeight(self):
        'getImageAppearanceWeight() -> retval\n.'
        pass
    
    def getImages(self, image1=None, image2=None):
        'getImages([, image1[, image2]]) -> image1, image2\n.'
        pass
    
    def getInnerRadius(self):
        'getInnerRadius() -> retval\n.'
        pass
    
    def getIterations(self):
        'getIterations() -> retval\n.'
        pass
    
    def getOuterRadius(self):
        'getOuterRadius() -> retval\n.'
        pass
    
    def getRadialBins(self):
        'getRadialBins() -> retval\n.'
        pass
    
    def getRotationInvariant(self):
        'getRotationInvariant() -> retval\n.'
        pass
    
    def getShapeContextWeight(self):
        'getShapeContextWeight() -> retval\n.'
        pass
    
    def getStdDev(self):
        'getStdDev() -> retval\n.'
        pass
    
    def getTransformAlgorithm(self):
        'getTransformAlgorithm() -> retval\n.'
        pass
    
    def setAngularBins(self, nAngularBins):
        'setAngularBins(nAngularBins) -> None\n.   @brief Establish the number of angular bins for the Shape Context Descriptor used in the shape matching\n.   pipeline.\n.   \n.   @param nAngularBins The number of angular bins in the shape context descriptor.'
        pass
    
    def setBendingEnergyWeight(self, bendingEnergyWeight):
        'setBendingEnergyWeight(bendingEnergyWeight) -> None\n.   @brief Set the weight of the Bending Energy in the final value of the shape distance. The bending energy\n.   definition depends on what transformation is being used to align the shapes. The final value of the\n.   shape distance is a user-defined linear combination of the shape context distance, an image\n.   appearance distance, and a bending energy.\n.   \n.   @param bendingEnergyWeight The weight of the Bending Energy in the final distance value.'
        pass
    
    def setCostExtractor(self, comparer):
        'setCostExtractor(comparer) -> None\n.   @brief Set the algorithm used for building the shape context descriptor cost matrix.\n.   \n.   @param comparer Smart pointer to a HistogramCostExtractor, an algorithm that defines the cost\n.   matrix between descriptors.'
        pass
    
    def setImageAppearanceWeight(self, imageAppearanceWeight):
        'setImageAppearanceWeight(imageAppearanceWeight) -> None\n.   @brief Set the weight of the Image Appearance cost in the final value of the shape distance. The image\n.   appearance cost is defined as the sum of squared brightness differences in Gaussian windows around\n.   corresponding image points. The final value of the shape distance is a user-defined linear\n.   combination of the shape context distance, an image appearance distance, and a bending energy. If\n.   this value is set to a number different from 0, is mandatory to set the images that correspond to\n.   each shape.\n.   \n.   @param imageAppearanceWeight The weight of the appearance cost in the final distance value.'
        pass
    
    def setImages(self, image1, image2):
        'setImages(image1, image2) -> None\n.   @brief Set the images that correspond to each shape. This images are used in the calculation of the Image\n.   Appearance cost.\n.   \n.   @param image1 Image corresponding to the shape defined by contours1.\n.   @param image2 Image corresponding to the shape defined by contours2.'
        pass
    
    def setInnerRadius(self, innerRadius):
        'setInnerRadius(innerRadius) -> None\n.   @brief Set the inner radius of the shape context descriptor.\n.   \n.   @param innerRadius The value of the inner radius.'
        pass
    
    def setIterations(self, iterations):
        'setIterations(iterations) -> None\n.'
        pass
    
    def setOuterRadius(self, outerRadius):
        'setOuterRadius(outerRadius) -> None\n.   @brief Set the outer radius of the shape context descriptor.\n.   \n.   @param outerRadius The value of the outer radius.'
        pass
    
    def setRadialBins(self, nRadialBins):
        'setRadialBins(nRadialBins) -> None\n.   @brief Establish the number of radial bins for the Shape Context Descriptor used in the shape matching\n.   pipeline.\n.   \n.   @param nRadialBins The number of radial bins in the shape context descriptor.'
        pass
    
    def setRotationInvariant(self, rotationInvariant):
        'setRotationInvariant(rotationInvariant) -> None\n.'
        pass
    
    def setShapeContextWeight(self, shapeContextWeight):
        'setShapeContextWeight(shapeContextWeight) -> None\n.   @brief Set the weight of the shape context distance in the final value of the shape distance. The shape\n.   context distance between two shapes is defined as the symmetric sum of shape context matching costs\n.   over best matching points. The final value of the shape distance is a user-defined linear\n.   combination of the shape context distance, an image appearance distance, and a bending energy.\n.   \n.   @param shapeContextWeight The weight of the shape context distance in the final distance value.'
        pass
    
    def setStdDev(self, sigma):
        'setStdDev(sigma) -> None\n.   @brief Set the value of the standard deviation for the Gaussian window for the image appearance cost.\n.   \n.   @param sigma Standard Deviation.'
        pass
    
    def setTransformAlgorithm(self, transformer):
        'setTransformAlgorithm(transformer) -> None\n.   @brief Set the algorithm used for aligning the shapes.\n.   \n.   @param transformer Smart pointer to a ShapeTransformer, an algorithm that defines the aligning\n.   transformation.'
        pass
    

class ShapeDistanceExtractor(Algorithm):
    __class__ = ShapeDistanceExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeDistance(self, contour1, contour2):
        'computeDistance(contour1, contour2) -> retval\n.   @brief Compute the shape distance between two shapes defined by its contours.\n.   \n.   @param contour1 Contour defining first shape.\n.   @param contour2 Contour defining second shape.'
        pass
    

class ShapeTransformer(Algorithm):
    __class__ = ShapeTransformer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def applyTransformation(self, input, output=None):
        'applyTransformation(input[, output]) -> retval, output\n.   @brief Apply a transformation, given a pre-estimated transformation parameters.\n.   \n.   @param input Contour (set of points) to apply the transformation.\n.   @param output Output contour.'
        pass
    
    def estimateTransformation(self, transformingShape, targetShape, matches):
        'estimateTransformation(transformingShape, targetShape, matches) -> None\n.   @brief Estimate the transformation parameters of the current transformer algorithm, based on point matches.\n.   \n.   @param transformingShape Contour defining first shape.\n.   @param targetShape Contour defining second shape (Target).\n.   @param matches Standard vector of Matches between points.'
        pass
    
    def warpImage(self, transformingImage, output=None, flags=None, borderMode=None, borderValue=None):
        'warpImage(transformingImage[, output[, flags[, borderMode[, borderValue]]]]) -> output\n.   @brief Apply a transformation, given a pre-estimated transformation parameters, to an Image.\n.   \n.   @param transformingImage Input image.\n.   @param output Output image.\n.   @param flags Image interpolation method.\n.   @param borderMode border style.\n.   @param borderValue border value.'
        pass
    

class SimpleBlobDetector(Feature2D):
    __class__ = SimpleBlobDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, parameters=None):
        'create([, parameters]) -> retval\n.'
        pass
    
    def getDefaultName(self):
        'getDefaultName() -> retval\n.'
        pass
    

class SimpleBlobDetector_Params(_mod_builtins.object):
    __class__ = SimpleBlobDetector_Params
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def blobColor(self):
        'blobColor'
        pass
    
    @property
    def filterByArea(self):
        'filterByArea'
        pass
    
    @property
    def filterByCircularity(self):
        'filterByCircularity'
        pass
    
    @property
    def filterByColor(self):
        'filterByColor'
        pass
    
    @property
    def filterByConvexity(self):
        'filterByConvexity'
        pass
    
    @property
    def filterByInertia(self):
        'filterByInertia'
        pass
    
    @property
    def maxArea(self):
        'maxArea'
        pass
    
    @property
    def maxCircularity(self):
        'maxCircularity'
        pass
    
    @property
    def maxConvexity(self):
        'maxConvexity'
        pass
    
    @property
    def maxInertiaRatio(self):
        'maxInertiaRatio'
        pass
    
    @property
    def maxThreshold(self):
        'maxThreshold'
        pass
    
    @property
    def minArea(self):
        'minArea'
        pass
    
    @property
    def minCircularity(self):
        'minCircularity'
        pass
    
    @property
    def minConvexity(self):
        'minConvexity'
        pass
    
    @property
    def minDistBetweenBlobs(self):
        'minDistBetweenBlobs'
        pass
    
    @property
    def minInertiaRatio(self):
        'minInertiaRatio'
        pass
    
    @property
    def minRepeatability(self):
        'minRepeatability'
        pass
    
    @property
    def minThreshold(self):
        'minThreshold'
        pass
    
    @property
    def thresholdStep(self):
        'thresholdStep'
        pass
    

def SimpleBlobDetector_create(parameters=None):
    'SimpleBlobDetector_create([, parameters]) -> retval\n.'
    pass

def Sobel(src, ddepth, dx, dy, dst=None, ksize=None, scale=None, delta=None, borderType=None):
    'Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst\n.   @brief Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator.\n.   \n.   In all cases except one, the \\f$\\texttt{ksize} \\times \\texttt{ksize}\\f$ separable kernel is used to\n.   calculate the derivative. When \\f$\\texttt{ksize = 1}\\f$, the \\f$3 \\times 1\\f$ or \\f$1 \\times 3\\f$\n.   kernel is used (that is, no Gaussian smoothing is done). `ksize = 1` can only be used for the first\n.   or the second x- or y- derivatives.\n.   \n.   There is also the special value `ksize = #CV_SCHARR (-1)` that corresponds to the \\f$3\\times3\\f$ Scharr\n.   filter that may give more accurate results than the \\f$3\\times3\\f$ Sobel. The Scharr aperture is\n.   \n.   \\f[\\vecthreethree{-3}{0}{3}{-10}{0}{10}{-3}{0}{3}\\f]\n.   \n.   for the x-derivative, or transposed for the y-derivative.\n.   \n.   The function calculates an image derivative by convolving the image with the appropriate kernel:\n.   \n.   \\f[\\texttt{dst} =  \\frac{\\partial^{xorder+yorder} \\texttt{src}}{\\partial x^{xorder} \\partial y^{yorder}}\\f]\n.   \n.   The Sobel operators combine Gaussian smoothing and differentiation, so the result is more or less\n.   resistant to the noise. Most often, the function is called with ( xorder = 1, yorder = 0, ksize = 3)\n.   or ( xorder = 0, yorder = 1, ksize = 3) to calculate the first x- or y- image derivative. The first\n.   case corresponds to a kernel of:\n.   \n.   \\f[\\vecthreethree{-1}{0}{1}{-2}{0}{2}{-1}{0}{1}\\f]\n.   \n.   The second case corresponds to a kernel of:\n.   \n.   \\f[\\vecthreethree{-1}{-2}{-1}{0}{0}{0}{1}{2}{1}\\f]\n.   \n.   @param src input image.\n.   @param dst output image of the same size and the same number of channels as src .\n.   @param ddepth output image depth, see @ref filter_depths "combinations"; in the case of\n.   8-bit input images it will result in truncated derivatives.\n.   @param dx order of the derivative x.\n.   @param dy order of the derivative y.\n.   @param ksize size of the extended Sobel kernel; it must be 1, 3, 5, or 7.\n.   @param scale optional scale factor for the computed derivative values; by default, no scaling is\n.   applied (see #getDerivKernels for details).\n.   @param delta optional delta value that is added to the results prior to storing them in dst.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   @sa  Scharr, Laplacian, sepFilter2D, filter2D, GaussianBlur, cartToPolar'
    pass

SparseMat_HASH_BIT = 2147483648
SparseMat_HASH_SCALE = 1540483477
SparseMat_MAGIC_VAL = 1123876864
SparseMat_MAX_DIM = 32
class SparseOpticalFlow(Algorithm):
    __class__ = SparseOpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calc(self, prevImg, nextImg, prevPts, nextPts, status=None, err=None):
        'calc(prevImg, nextImg, prevPts, nextPts[, status[, err]]) -> nextPts, status, err\n.   @brief Calculates a sparse optical flow.\n.   \n.   @param prevImg First input image.\n.   @param nextImg Second input image of the same size and the same type as prevImg.\n.   @param prevPts Vector of 2D points for which the flow needs to be found.\n.   @param nextPts Output vector of 2D points containing the calculated new positions of input features in the second image.\n.   @param status Output status vector. Each element of the vector is set to 1 if the\n.   flow for the corresponding features has been found. Otherwise, it is set to 0.\n.   @param err Optional output vector that contains error response for each point (inverse confidence).'
        pass
    

class SparsePyrLKOpticalFlow(SparseOpticalFlow):
    __class__ = SparsePyrLKOpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, winSize=None, maxLevel=None, crit=None, flags=None, minEigThreshold=None):
        'create([, winSize[, maxLevel[, crit[, flags[, minEigThreshold]]]]]) -> retval\n.'
        pass
    
    def getFlags(self):
        'getFlags() -> retval\n.'
        pass
    
    def getMaxLevel(self):
        'getMaxLevel() -> retval\n.'
        pass
    
    def getMinEigThreshold(self):
        'getMinEigThreshold() -> retval\n.'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.'
        pass
    
    def getWinSize(self):
        'getWinSize() -> retval\n.'
        pass
    
    def setFlags(self, flags):
        'setFlags(flags) -> None\n.'
        pass
    
    def setMaxLevel(self, maxLevel):
        'setMaxLevel(maxLevel) -> None\n.'
        pass
    
    def setMinEigThreshold(self, minEigThreshold):
        'setMinEigThreshold(minEigThreshold) -> None\n.'
        pass
    
    def setTermCriteria(self, crit):
        'setTermCriteria(crit) -> None\n.'
        pass
    
    def setWinSize(self, winSize):
        'setWinSize(winSize) -> None\n.'
        pass
    

def SparsePyrLKOpticalFlow_create(winSize=None, maxLevel=None, crit=None, flags=None, minEigThreshold=None):
    'SparsePyrLKOpticalFlow_create([, winSize[, maxLevel[, crit[, flags[, minEigThreshold]]]]]) -> retval\n.'
    pass

class StereoBM(StereoMatcher):
    __class__ = StereoBM
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, numDisparities=None, blockSize=None):
        'create([, numDisparities[, blockSize]]) -> retval\n.   @brief Creates StereoBM object\n.   \n.   @param numDisparities the disparity search range. For each pixel algorithm will find the best\n.   disparity from 0 (default minimum disparity) to numDisparities. The search range can then be\n.   shifted by changing the minimum disparity.\n.   @param blockSize the linear size of the blocks compared by the algorithm. The size should be odd\n.   (as the block is centered at the current pixel). Larger block size implies smoother, though less\n.   accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher\n.   chance for algorithm to find a wrong correspondence.\n.   \n.   The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for\n.   a specific stereo pair.'
        pass
    
    def getPreFilterCap(self):
        'getPreFilterCap() -> retval\n.'
        pass
    
    def getPreFilterSize(self):
        'getPreFilterSize() -> retval\n.'
        pass
    
    def getPreFilterType(self):
        'getPreFilterType() -> retval\n.'
        pass
    
    def getROI1(self):
        'getROI1() -> retval\n.'
        pass
    
    def getROI2(self):
        'getROI2() -> retval\n.'
        pass
    
    def getSmallerBlockSize(self):
        'getSmallerBlockSize() -> retval\n.'
        pass
    
    def getTextureThreshold(self):
        'getTextureThreshold() -> retval\n.'
        pass
    
    def getUniquenessRatio(self):
        'getUniquenessRatio() -> retval\n.'
        pass
    
    def setPreFilterCap(self, preFilterCap):
        'setPreFilterCap(preFilterCap) -> None\n.'
        pass
    
    def setPreFilterSize(self, preFilterSize):
        'setPreFilterSize(preFilterSize) -> None\n.'
        pass
    
    def setPreFilterType(self, preFilterType):
        'setPreFilterType(preFilterType) -> None\n.'
        pass
    
    def setROI1(self, roi1):
        'setROI1(roi1) -> None\n.'
        pass
    
    def setROI2(self, roi2):
        'setROI2(roi2) -> None\n.'
        pass
    
    def setSmallerBlockSize(self, blockSize):
        'setSmallerBlockSize(blockSize) -> None\n.'
        pass
    
    def setTextureThreshold(self, textureThreshold):
        'setTextureThreshold(textureThreshold) -> None\n.'
        pass
    
    def setUniquenessRatio(self, uniquenessRatio):
        'setUniquenessRatio(uniquenessRatio) -> None\n.'
        pass
    

StereoBM_PREFILTER_NORMALIZED_RESPONSE = 0
StereoBM_PREFILTER_XSOBEL = 1
def StereoBM_create(numDisparities=None, blockSize=None):
    'StereoBM_create([, numDisparities[, blockSize]]) -> retval\n.   @brief Creates StereoBM object\n.   \n.   @param numDisparities the disparity search range. For each pixel algorithm will find the best\n.   disparity from 0 (default minimum disparity) to numDisparities. The search range can then be\n.   shifted by changing the minimum disparity.\n.   @param blockSize the linear size of the blocks compared by the algorithm. The size should be odd\n.   (as the block is centered at the current pixel). Larger block size implies smoother, though less\n.   accurate disparity map. Smaller block size gives more detailed disparity map, but there is higher\n.   chance for algorithm to find a wrong correspondence.\n.   \n.   The function create StereoBM object. You can then call StereoBM::compute() to compute disparity for\n.   a specific stereo pair.'
    pass

class StereoMatcher(Algorithm):
    __class__ = StereoMatcher
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compute(self, left, right, disparity=None):
        'compute(left, right[, disparity]) -> disparity\n.   @brief Computes disparity map for the specified stereo pair\n.   \n.   @param left Left 8-bit single-channel image.\n.   @param right Right image of the same size and the same type as the left one.\n.   @param disparity Output disparity map. It has the same size as the input images. Some algorithms,\n.   like StereoBM or StereoSGBM compute 16-bit fixed-point disparity map (where each disparity value\n.   has 4 fractional bits), whereas other algorithms output 32-bit floating-point disparity map.'
        pass
    
    def getBlockSize(self):
        'getBlockSize() -> retval\n.'
        pass
    
    def getDisp12MaxDiff(self):
        'getDisp12MaxDiff() -> retval\n.'
        pass
    
    def getMinDisparity(self):
        'getMinDisparity() -> retval\n.'
        pass
    
    def getNumDisparities(self):
        'getNumDisparities() -> retval\n.'
        pass
    
    def getSpeckleRange(self):
        'getSpeckleRange() -> retval\n.'
        pass
    
    def getSpeckleWindowSize(self):
        'getSpeckleWindowSize() -> retval\n.'
        pass
    
    def setBlockSize(self, blockSize):
        'setBlockSize(blockSize) -> None\n.'
        pass
    
    def setDisp12MaxDiff(self, disp12MaxDiff):
        'setDisp12MaxDiff(disp12MaxDiff) -> None\n.'
        pass
    
    def setMinDisparity(self, minDisparity):
        'setMinDisparity(minDisparity) -> None\n.'
        pass
    
    def setNumDisparities(self, numDisparities):
        'setNumDisparities(numDisparities) -> None\n.'
        pass
    
    def setSpeckleRange(self, speckleRange):
        'setSpeckleRange(speckleRange) -> None\n.'
        pass
    
    def setSpeckleWindowSize(self, speckleWindowSize):
        'setSpeckleWindowSize(speckleWindowSize) -> None\n.'
        pass
    

StereoMatcher_DISP_SCALE = 16
StereoMatcher_DISP_SHIFT = 4
class StereoSGBM(StereoMatcher):
    __class__ = StereoSGBM
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, minDisparity=None, numDisparities=None, blockSize=None, P1=None, P2=None, disp12MaxDiff=None, preFilterCap=None, uniquenessRatio=None, speckleWindowSize=None, speckleRange=None, mode=None):
        'create([, minDisparity[, numDisparities[, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]]]]) -> retval\n.   @brief Creates StereoSGBM object\n.   \n.   @param minDisparity Minimum possible disparity value. Normally, it is zero but sometimes\n.   rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.\n.   @param numDisparities Maximum disparity minus minimum disparity. The value is always greater than\n.   zero. In the current implementation, this parameter must be divisible by 16.\n.   @param blockSize Matched block size. It must be an odd number \\>=1 . Normally, it should be\n.   somewhere in the 3..11 range.\n.   @param P1 The first parameter controlling the disparity smoothness. See below.\n.   @param P2 The second parameter controlling the disparity smoothness. The larger the values are,\n.   the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1\n.   between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor\n.   pixels. The algorithm requires P2 \\> P1 . See stereo_match.cpp sample where some reasonably good\n.   P1 and P2 values are shown (like 8\\*number_of_image_channels\\*SADWindowSize\\*SADWindowSize and\n.   32\\*number_of_image_channels\\*SADWindowSize\\*SADWindowSize , respectively).\n.   @param disp12MaxDiff Maximum allowed difference (in integer pixel units) in the left-right\n.   disparity check. Set it to a non-positive value to disable the check.\n.   @param preFilterCap Truncation value for the prefiltered image pixels. The algorithm first\n.   computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval.\n.   The result values are passed to the Birchfield-Tomasi pixel cost function.\n.   @param uniquenessRatio Margin in percentage by which the best (minimum) computed cost function\n.   value should "win" the second best value to consider the found match correct. Normally, a value\n.   within the 5-15 range is good enough.\n.   @param speckleWindowSize Maximum size of smooth disparity regions to consider their noise speckles\n.   and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the\n.   50-200 range.\n.   @param speckleRange Maximum disparity variation within each connected component. If you do speckle\n.   filtering, set the parameter to a positive value, it will be implicitly multiplied by 16.\n.   Normally, 1 or 2 is good enough.\n.   @param mode Set it to StereoSGBM::MODE_HH to run the full-scale two-pass dynamic programming\n.   algorithm. It will consume O(W\\*H\\*numDisparities) bytes, which is large for 640x480 stereo and\n.   huge for HD-size pictures. By default, it is set to false .\n.   \n.   The first constructor initializes StereoSGBM with all the default parameters. So, you only have to\n.   set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter\n.   to a custom value.'
        pass
    
    def getMode(self):
        'getMode() -> retval\n.'
        pass
    
    def getP1(self):
        'getP1() -> retval\n.'
        pass
    
    def getP2(self):
        'getP2() -> retval\n.'
        pass
    
    def getPreFilterCap(self):
        'getPreFilterCap() -> retval\n.'
        pass
    
    def getUniquenessRatio(self):
        'getUniquenessRatio() -> retval\n.'
        pass
    
    def setMode(self, mode):
        'setMode(mode) -> None\n.'
        pass
    
    def setP1(self, P1):
        'setP1(P1) -> None\n.'
        pass
    
    def setP2(self, P2):
        'setP2(P2) -> None\n.'
        pass
    
    def setPreFilterCap(self, preFilterCap):
        'setPreFilterCap(preFilterCap) -> None\n.'
        pass
    
    def setUniquenessRatio(self, uniquenessRatio):
        'setUniquenessRatio(uniquenessRatio) -> None\n.'
        pass
    

StereoSGBM_MODE_HH = 1
StereoSGBM_MODE_HH4 = 3
StereoSGBM_MODE_SGBM = 0
StereoSGBM_MODE_SGBM_3WAY = 2
def StereoSGBM_create(minDisparity=None, numDisparities=None, blockSize=None, P1=None, P2=None, disp12MaxDiff=None, preFilterCap=None, uniquenessRatio=None, speckleWindowSize=None, speckleRange=None, mode=None):
    'StereoSGBM_create([, minDisparity[, numDisparities[, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]]]]) -> retval\n.   @brief Creates StereoSGBM object\n.   \n.   @param minDisparity Minimum possible disparity value. Normally, it is zero but sometimes\n.   rectification algorithms can shift images, so this parameter needs to be adjusted accordingly.\n.   @param numDisparities Maximum disparity minus minimum disparity. The value is always greater than\n.   zero. In the current implementation, this parameter must be divisible by 16.\n.   @param blockSize Matched block size. It must be an odd number \\>=1 . Normally, it should be\n.   somewhere in the 3..11 range.\n.   @param P1 The first parameter controlling the disparity smoothness. See below.\n.   @param P2 The second parameter controlling the disparity smoothness. The larger the values are,\n.   the smoother the disparity is. P1 is the penalty on the disparity change by plus or minus 1\n.   between neighbor pixels. P2 is the penalty on the disparity change by more than 1 between neighbor\n.   pixels. The algorithm requires P2 \\> P1 . See stereo_match.cpp sample where some reasonably good\n.   P1 and P2 values are shown (like 8\\*number_of_image_channels\\*SADWindowSize\\*SADWindowSize and\n.   32\\*number_of_image_channels\\*SADWindowSize\\*SADWindowSize , respectively).\n.   @param disp12MaxDiff Maximum allowed difference (in integer pixel units) in the left-right\n.   disparity check. Set it to a non-positive value to disable the check.\n.   @param preFilterCap Truncation value for the prefiltered image pixels. The algorithm first\n.   computes x-derivative at each pixel and clips its value by [-preFilterCap, preFilterCap] interval.\n.   The result values are passed to the Birchfield-Tomasi pixel cost function.\n.   @param uniquenessRatio Margin in percentage by which the best (minimum) computed cost function\n.   value should "win" the second best value to consider the found match correct. Normally, a value\n.   within the 5-15 range is good enough.\n.   @param speckleWindowSize Maximum size of smooth disparity regions to consider their noise speckles\n.   and invalidate. Set it to 0 to disable speckle filtering. Otherwise, set it somewhere in the\n.   50-200 range.\n.   @param speckleRange Maximum disparity variation within each connected component. If you do speckle\n.   filtering, set the parameter to a positive value, it will be implicitly multiplied by 16.\n.   Normally, 1 or 2 is good enough.\n.   @param mode Set it to StereoSGBM::MODE_HH to run the full-scale two-pass dynamic programming\n.   algorithm. It will consume O(W\\*H\\*numDisparities) bytes, which is large for 640x480 stereo and\n.   huge for HD-size pictures. By default, it is set to false .\n.   \n.   The first constructor initializes StereoSGBM with all the default parameters. So, you only have to\n.   set StereoSGBM::numDisparities at minimum. The second constructor enables you to set each parameter\n.   to a custom value.'
    pass

class Stitcher(_mod_builtins.object):
    __class__ = Stitcher
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def composePanorama(self, pano=None):
        'composePanorama([, pano]) -> retval, pano\n.   @overload'
        pass
    
    def compositingResol(self):
        'compositingResol() -> retval\n.'
        pass
    
    def estimateTransform(self, images):
        'estimateTransform(images) -> retval\n.   @overload'
        pass
    
    def panoConfidenceThresh(self):
        'panoConfidenceThresh() -> retval\n.'
        pass
    
    def registrationResol(self):
        "registrationResol() -> retval\n.   @brief Creates a Stitcher configured in one of the stitching modes.\n.   \n.   @param mode Scenario for stitcher operation. This is usually determined by source of images\n.   to stitch and their transformation. Default parameters will be chosen for operation in given\n.   scenario.\n.   @param try_use_gpu Flag indicating whether GPU should be used whenever it's possible.\n.   @return Stitcher class instance."
        pass
    
    def seamEstimationResol(self):
        'seamEstimationResol() -> retval\n.'
        pass
    
    def setCompositingResol(self, resol_mpx):
        'setCompositingResol(resol_mpx) -> None\n.'
        pass
    
    def setPanoConfidenceThresh(self, conf_thresh):
        'setPanoConfidenceThresh(conf_thresh) -> None\n.'
        pass
    
    def setRegistrationResol(self, resol_mpx):
        'setRegistrationResol(resol_mpx) -> None\n.'
        pass
    
    def setSeamEstimationResol(self, resol_mpx):
        'setSeamEstimationResol(resol_mpx) -> None\n.'
        pass
    
    def setWaveCorrection(self, flag):
        'setWaveCorrection(flag) -> None\n.'
        pass
    
    def stitch(self, images, pano=None):
        'stitch(images[, pano]) -> retval, pano\n.   @overload'
        pass
    
    def waveCorrection(self):
        'waveCorrection() -> retval\n.'
        pass
    
    def workScale(self):
        'workScale() -> retval\n.   @brief These functions try to stitch the given images.\n.   \n.   @param images Input images.\n.   @param rois Region of interest rectangles.\n.   @param pano Final pano.\n.   @return Status code.'
        pass
    

Stitcher_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3
Stitcher_ERR_HOMOGRAPHY_EST_FAIL = 2
Stitcher_ERR_NEED_MORE_IMGS = 1
Stitcher_OK = 0
Stitcher_ORIG_RESOL = -1
Stitcher_PANORAMA = 0
Stitcher_SCANS = 1
class Subdiv2D(_mod_builtins.object):
    __class__ = Subdiv2D
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def edgeDst(self, edge):
        'edgeDst(edge) -> retval, dstpt\n.   @brief Returns the edge destination.\n.   \n.   @param edge Subdivision edge ID.\n.   @param dstpt Output vertex location.\n.   \n.   @returns vertex ID.'
        pass
    
    def edgeOrg(self, edge):
        'edgeOrg(edge) -> retval, orgpt\n.   @brief Returns the edge origin.\n.   \n.   @param edge Subdivision edge ID.\n.   @param orgpt Output vertex location.\n.   \n.   @returns vertex ID.'
        pass
    
    def findNearest(self, pt):
        'findNearest(pt) -> retval, nearestPt\n.   @brief Finds the subdivision vertex closest to the given point.\n.   \n.   @param pt Input point.\n.   @param nearestPt Output subdivision vertex point.\n.   \n.   The function is another function that locates the input point within the subdivision. It finds the\n.   subdivision vertex that is the closest to the input point. It is not necessarily one of vertices\n.   of the facet containing the input point, though the facet (located using locate() ) is used as a\n.   starting point.\n.   \n.   @returns vertex ID.'
        pass
    
    def getEdge(self, edge, nextEdgeType):
        'getEdge(edge, nextEdgeType) -> retval\n.   @brief Returns one of the edges related to the given edge.\n.   \n.   @param edge Subdivision edge ID.\n.   @param nextEdgeType Parameter specifying which of the related edges to return.\n.   The following values are possible:\n.   -   NEXT_AROUND_ORG next around the edge origin ( eOnext on the picture below if e is the input edge)\n.   -   NEXT_AROUND_DST next around the edge vertex ( eDnext )\n.   -   PREV_AROUND_ORG previous around the edge origin (reversed eRnext )\n.   -   PREV_AROUND_DST previous around the edge destination (reversed eLnext )\n.   -   NEXT_AROUND_LEFT next around the left facet ( eLnext )\n.   -   NEXT_AROUND_RIGHT next around the right facet ( eRnext )\n.   -   PREV_AROUND_LEFT previous around the left facet (reversed eOnext )\n.   -   PREV_AROUND_RIGHT previous around the right facet (reversed eDnext )\n.   \n.   ![sample output](pics/quadedge.png)\n.   \n.   @returns edge ID related to the input edge.'
        pass
    
    def getEdgeList(self):
        'getEdgeList() -> edgeList\n.   @brief Returns a list of all edges.\n.   \n.   @param edgeList Output vector.\n.   \n.   The function gives each edge as a 4 numbers vector, where each two are one of the edge\n.   vertices. i.e. org_x = v[0], org_y = v[1], dst_x = v[2], dst_y = v[3].'
        pass
    
    def getLeadingEdgeList(self):
        'getLeadingEdgeList() -> leadingEdgeList\n.   @brief Returns a list of the leading edge ID connected to each triangle.\n.   \n.   @param leadingEdgeList Output vector.\n.   \n.   The function gives one edge ID for each triangle.'
        pass
    
    def getTriangleList(self):
        'getTriangleList() -> triangleList\n.   @brief Returns a list of all triangles.\n.   \n.   @param triangleList Output vector.\n.   \n.   The function gives each triangle as a 6 numbers vector, where each two are one of the triangle\n.   vertices. i.e. p1_x = v[0], p1_y = v[1], p2_x = v[2], p2_y = v[3], p3_x = v[4], p3_y = v[5].'
        pass
    
    def getVertex(self, vertex):
        'getVertex(vertex) -> retval, firstEdge\n.   @brief Returns vertex location from vertex ID.\n.   \n.   @param vertex vertex ID.\n.   @param firstEdge Optional. The first edge ID which is connected to the vertex.\n.   @returns vertex (x,y)'
        pass
    
    def getVoronoiFacetList(self, idx):
        'getVoronoiFacetList(idx) -> facetList, facetCenters\n.   @brief Returns a list of all Voroni facets.\n.   \n.   @param idx Vector of vertices IDs to consider. For all vertices you can pass empty vector.\n.   @param facetList Output vector of the Voroni facets.\n.   @param facetCenters Output vector of the Voroni facets center points.'
        pass
    
    def initDelaunay(self, rect):
        'initDelaunay(rect) -> None\n.   @brief Creates a new empty Delaunay subdivision\n.   \n.   @param rect Rectangle that includes all of the 2D points that are to be added to the subdivision.'
        pass
    
    def insert(self, pt):
        'insert(pt) -> retval\n.   @brief Insert a single point into a Delaunay triangulation.\n.   \n.   @param pt Point to insert.\n.   \n.   The function inserts a single point into a subdivision and modifies the subdivision topology\n.   appropriately. If a point with the same coordinates exists already, no new point is added.\n.   @returns the ID of the point.\n.   \n.   @note If the point is outside of the triangulation specified rect a runtime error is raised.\n\n\n\ninsert(ptvec) -> None\n.   @brief Insert multiple points into a Delaunay triangulation.\n.   \n.   @param ptvec Points to insert.\n.   \n.   The function inserts a vector of points into a subdivision and modifies the subdivision topology\n.   appropriately.'
        pass
    
    def locate(self, pt):
        'locate(pt) -> retval, edge, vertex\n.   @brief Returns the location of a point within a Delaunay triangulation.\n.   \n.   @param pt Point to locate.\n.   @param edge Output edge that the point belongs to or is located to the right of it.\n.   @param vertex Optional output vertex the input point coincides with.\n.   \n.   The function locates the input point within the subdivision and gives one of the triangle edges\n.   or vertices.\n.   \n.   @returns an integer which specify one of the following five cases for point location:\n.   -  The point falls into some facet. The function returns #PTLOC_INSIDE and edge will contain one of\n.   edges of the facet.\n.   -  The point falls onto the edge. The function returns #PTLOC_ON_EDGE and edge will contain this edge.\n.   -  The point coincides with one of the subdivision vertices. The function returns #PTLOC_VERTEX and\n.   vertex will contain a pointer to the vertex.\n.   -  The point is outside the subdivision reference rectangle. The function returns #PTLOC_OUTSIDE_RECT\n.   and no pointers are filled.\n.   -  One of input arguments is invalid. A runtime error is raised or, if silent or "parent" error\n.   processing mode is selected, #PTLOC_ERROR is returned.'
        pass
    
    def nextEdge(self, edge):
        'nextEdge(edge) -> retval\n.   @brief Returns next edge around the edge origin.\n.   \n.   @param edge Subdivision edge ID.\n.   \n.   @returns an integer which is next edge ID around the edge origin: eOnext on the\n.   picture above if e is the input edge).'
        pass
    
    def rotateEdge(self, edge, rotate):
        'rotateEdge(edge, rotate) -> retval\n.   @brief Returns another edge of the same quad-edge.\n.   \n.   @param edge Subdivision edge ID.\n.   @param rotate Parameter specifying which of the edges of the same quad-edge as the input\n.   one to return. The following values are possible:\n.   -   0 - the input edge ( e on the picture below if e is the input edge)\n.   -   1 - the rotated edge ( eRot )\n.   -   2 - the reversed edge (reversed e (in green))\n.   -   3 - the reversed rotated edge (reversed eRot (in green))\n.   \n.   @returns one of the edges ID of the same quad-edge as the input edge.'
        pass
    
    def symEdge(self, edge):
        'symEdge(edge) -> retval\n.'
        pass
    

Subdiv2D_NEXT_AROUND_DST = 34
Subdiv2D_NEXT_AROUND_LEFT = 19
Subdiv2D_NEXT_AROUND_ORG = 0
Subdiv2D_NEXT_AROUND_RIGHT = 49
Subdiv2D_PREV_AROUND_DST = 51
Subdiv2D_PREV_AROUND_LEFT = 32
Subdiv2D_PREV_AROUND_ORG = 17
Subdiv2D_PREV_AROUND_RIGHT = 2
Subdiv2D_PTLOC_ERROR = -2
Subdiv2D_PTLOC_INSIDE = 0
Subdiv2D_PTLOC_ON_EDGE = 2
Subdiv2D_PTLOC_OUTSIDE_RECT = -1
Subdiv2D_PTLOC_VERTEX = 1
TERM_CRITERIA_COUNT = 1
TERM_CRITERIA_EPS = 2
TERM_CRITERIA_MAX_ITER = 1
THRESH_BINARY = 0
THRESH_BINARY_INV = 1
THRESH_MASK = 7
THRESH_OTSU = 8
THRESH_TOZERO = 3
THRESH_TOZERO_INV = 4
THRESH_TRIANGLE = 16
THRESH_TRUNC = 2
TM_CCOEFF = 4
TM_CCOEFF_NORMED = 5
TM_CCORR = 2
TM_CCORR_NORMED = 3
TM_SQDIFF = 0
TM_SQDIFF_NORMED = 1
TRACKER_KCF_CN = 2
TRACKER_KCF_CUSTOM = 4
TRACKER_KCF_GRAY = 1
TRACKER_SAMPLER_CSC_MODE_DETECT = 5
TRACKER_SAMPLER_CSC_MODE_INIT_NEG = 2
TRACKER_SAMPLER_CSC_MODE_INIT_POS = 1
TRACKER_SAMPLER_CSC_MODE_TRACK_NEG = 4
TRACKER_SAMPLER_CSC_MODE_TRACK_POS = 3
TRACKER_SAMPLER_CS_MODE_CLASSIFY = 3
TRACKER_SAMPLER_CS_MODE_NEGATIVE = 2
TRACKER_SAMPLER_CS_MODE_POSITIVE = 1
TermCriteria_COUNT = 1
TermCriteria_EPS = 2
TermCriteria_MAX_ITER = 1
class ThinPlateSplineShapeTransformer(ShapeTransformer):
    __class__ = ThinPlateSplineShapeTransformer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getRegularizationParameter(self):
        'getRegularizationParameter() -> retval\n.'
        pass
    
    def setRegularizationParameter(self, beta):
        'setRegularizationParameter(beta) -> None\n.   @brief Set the regularization parameter for relaxing the exact interpolation requirements of the TPS\n.   algorithm.\n.   \n.   @param beta value of the regularization parameter.'
        pass
    

class TickMeter(_mod_builtins.object):
    __class__ = TickMeter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getCounter(self):
        'getCounter() -> retval\n.   returns internal counter value.'
        pass
    
    def getTimeMicro(self):
        'getTimeMicro() -> retval\n.   returns passed time in microseconds.'
        pass
    
    def getTimeMilli(self):
        'getTimeMilli() -> retval\n.   returns passed time in milliseconds.'
        pass
    
    def getTimeSec(self):
        'getTimeSec() -> retval\n.   returns passed time in seconds.'
        pass
    
    def getTimeTicks(self):
        'getTimeTicks() -> retval\n.   returns counted ticks.'
        pass
    
    def reset(self):
        'reset() -> None\n.   resets internal values.'
        pass
    
    def start(self):
        'start() -> None\n.   starts counting ticks.'
        pass
    
    def stop(self):
        'stop() -> None\n.   stops counting ticks.'
        pass
    

class Tonemap(Algorithm):
    __class__ = Tonemap
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getGamma(self):
        'getGamma() -> retval\n.'
        pass
    
    def process(self, src, dst=None):
        'process(src[, dst]) -> dst\n.   @brief Tonemaps image\n.   \n.   @param src source image - 32-bit 3-channel Mat\n.   @param dst destination image - 32-bit 3-channel Mat with values in [0, 1] range'
        pass
    
    def setGamma(self, gamma):
        'setGamma(gamma) -> None\n.'
        pass
    

class TonemapDrago(Tonemap):
    __class__ = TonemapDrago
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getBias(self):
        'getBias() -> retval\n.'
        pass
    
    def getSaturation(self):
        'getSaturation() -> retval\n.'
        pass
    
    def setBias(self, bias):
        'setBias(bias) -> None\n.'
        pass
    
    def setSaturation(self, saturation):
        'setSaturation(saturation) -> None\n.'
        pass
    

class TonemapDurand(Tonemap):
    __class__ = TonemapDurand
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getContrast(self):
        'getContrast() -> retval\n.'
        pass
    
    def getSaturation(self):
        'getSaturation() -> retval\n.'
        pass
    
    def getSigmaColor(self):
        'getSigmaColor() -> retval\n.'
        pass
    
    def getSigmaSpace(self):
        'getSigmaSpace() -> retval\n.'
        pass
    
    def setContrast(self, contrast):
        'setContrast(contrast) -> None\n.'
        pass
    
    def setSaturation(self, saturation):
        'setSaturation(saturation) -> None\n.'
        pass
    
    def setSigmaColor(self, sigma_color):
        'setSigmaColor(sigma_color) -> None\n.'
        pass
    
    def setSigmaSpace(self, sigma_space):
        'setSigmaSpace(sigma_space) -> None\n.'
        pass
    

class TonemapMantiuk(Tonemap):
    __class__ = TonemapMantiuk
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getSaturation(self):
        'getSaturation() -> retval\n.'
        pass
    
    def getScale(self):
        'getScale() -> retval\n.'
        pass
    
    def setSaturation(self, saturation):
        'setSaturation(saturation) -> None\n.'
        pass
    
    def setScale(self, scale):
        'setScale(scale) -> None\n.'
        pass
    

class TonemapReinhard(Tonemap):
    __class__ = TonemapReinhard
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getColorAdaptation(self):
        'getColorAdaptation() -> retval\n.'
        pass
    
    def getIntensity(self):
        'getIntensity() -> retval\n.'
        pass
    
    def getLightAdaptation(self):
        'getLightAdaptation() -> retval\n.'
        pass
    
    def setColorAdaptation(self, color_adapt):
        'setColorAdaptation(color_adapt) -> None\n.'
        pass
    
    def setIntensity(self, intensity):
        'setIntensity(intensity) -> None\n.'
        pass
    
    def setLightAdaptation(self, light_adapt):
        'setLightAdaptation(light_adapt) -> None\n.'
        pass
    

class Tracker(Algorithm):
    __class__ = Tracker
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def init(self, image, boundingBox):
        'init(image, boundingBox) -> retval\n.   @brief Initialize the tracker with a known bounding box that surrounded the target\n.   @param image The initial frame\n.   @param boundingBox The initial bounding box\n.   \n.   @return True if initialization went succesfully, false otherwise'
        pass
    
    def update(self, image):
        'update(image) -> retval, boundingBox\n.   @brief Update the tracker, find the new most likely bounding box for the target\n.   @param image The current frame\n.   @param boundingBox The bounding box that represent the new target location, if true was returned, not\n.   modified otherwise\n.   \n.   @return True means that target was located and false means that tracker cannot locate target in\n.   current frame. Note, that latter *does not* imply that tracker has failed, maybe target is indeed\n.   missing from the frame (say, out of sight)'
        pass
    

class TrackerBoosting(Tracker):
    __class__ = TrackerBoosting
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters BOOSTING parameters TrackerBoosting::Params'
        pass
    

def TrackerBoosting_create():
    'TrackerBoosting_create() -> retval\n.   @brief Constructor\n.   @param parameters BOOSTING parameters TrackerBoosting::Params'
    pass

class TrackerCSRT(Tracker):
    __class__ = TrackerCSRT
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters CSRT parameters TrackerCSRT::Params'
        pass
    

def TrackerCSRT_create():
    'TrackerCSRT_create() -> retval\n.   @brief Constructor\n.   @param parameters CSRT parameters TrackerCSRT::Params'
    pass

class TrackerGOTURN(Tracker):
    __class__ = TrackerGOTURN
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters GOTURN parameters TrackerGOTURN::Params'
        pass
    

def TrackerGOTURN_create():
    'TrackerGOTURN_create() -> retval\n.   @brief Constructor\n.   @param parameters GOTURN parameters TrackerGOTURN::Params'
    pass

class TrackerKCF(Tracker):
    __class__ = TrackerKCF
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters KCF parameters TrackerKCF::Params'
        pass
    

TrackerKCF_CN = 2
TrackerKCF_CUSTOM = 4
TrackerKCF_GRAY = 1
def TrackerKCF_create():
    'TrackerKCF_create() -> retval\n.   @brief Constructor\n.   @param parameters KCF parameters TrackerKCF::Params'
    pass

class TrackerMIL(Tracker):
    __class__ = TrackerMIL
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters MIL parameters TrackerMIL::Params'
        pass
    

def TrackerMIL_create():
    'TrackerMIL_create() -> retval\n.   @brief Constructor\n.   @param parameters MIL parameters TrackerMIL::Params'
    pass

class TrackerMOSSE(Tracker):
    __class__ = TrackerMOSSE
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor'
        pass
    

def TrackerMOSSE_create():
    'TrackerMOSSE_create() -> retval\n.   @brief Constructor'
    pass

class TrackerMedianFlow(Tracker):
    __class__ = TrackerMedianFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters Median Flow parameters TrackerMedianFlow::Params'
        pass
    

def TrackerMedianFlow_create():
    'TrackerMedianFlow_create() -> retval\n.   @brief Constructor\n.   @param parameters Median Flow parameters TrackerMedianFlow::Params'
    pass

TrackerSamplerCSC_MODE_DETECT = 5
TrackerSamplerCSC_MODE_INIT_NEG = 2
TrackerSamplerCSC_MODE_INIT_POS = 1
TrackerSamplerCSC_MODE_TRACK_NEG = 4
TrackerSamplerCSC_MODE_TRACK_POS = 3
TrackerSamplerCS_MODE_CLASSIFY = 3
TrackerSamplerCS_MODE_NEGATIVE = 2
TrackerSamplerCS_MODE_POSITIVE = 1
class TrackerTLD(Tracker):
    __class__ = TrackerTLD
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Constructor\n.   @param parameters TLD parameters TrackerTLD::Params'
        pass
    

def TrackerTLD_create():
    'TrackerTLD_create() -> retval\n.   @brief Constructor\n.   @param parameters TLD parameters TrackerTLD::Params'
    pass

UMAT_AUTO_STEP = 0
UMAT_CONTINUOUS_FLAG = 16384
UMAT_DATA_ASYNC_CLEANUP = 128
UMAT_DATA_COPY_ON_MAP = 1
UMAT_DATA_DEVICE_COPY_OBSOLETE = 4
UMAT_DATA_DEVICE_MEM_MAPPED = 64
UMAT_DATA_HOST_COPY_OBSOLETE = 2
UMAT_DATA_TEMP_COPIED_UMAT = 24
UMAT_DATA_TEMP_UMAT = 8
UMAT_DATA_USER_ALLOCATED = 32
UMAT_DEPTH_MASK = 7
UMAT_MAGIC_MASK = 4294901760
UMAT_MAGIC_VAL = 1124007936
UMAT_SUBMATRIX_FLAG = 32768
UMAT_TYPE_MASK = 4095
class UMat(_mod_builtins.object):
    'OpenCV 3 UMat wrapper. Used for T-API support.'
    __class__ = UMat
    def __init__(self, *args, **kwargs):
        'OpenCV 3 UMat wrapper. Used for T-API support.'
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def context(cls):
        'Returns OpenCL context handle'
        pass
    
    def get(self):
        'Returns numpy array'
        pass
    
    def handle(self):
        'Returns UMat native handle'
        pass
    
    def isContinuous(self):
        'Returns true if the matrix data is continuous'
        pass
    
    def isSubmatrix(self):
        'Returns true if the matrix is a submatrix of another matrix'
        pass
    
    @property
    def offset(self):
        pass
    
    @classmethod
    def queue(cls):
        'Returns OpenCL queue handle'
        pass
    

UMatData_ASYNC_CLEANUP = 128
UMatData_COPY_ON_MAP = 1
UMatData_DEVICE_COPY_OBSOLETE = 4
UMatData_DEVICE_MEM_MAPPED = 64
UMatData_HOST_COPY_OBSOLETE = 2
UMatData_TEMP_COPIED_UMAT = 24
UMatData_TEMP_UMAT = 8
UMatData_USER_ALLOCATED = 32
UMat_AUTO_STEP = 0
UMat_CONTINUOUS_FLAG = 16384
UMat_DEPTH_MASK = 7
UMat_MAGIC_MASK = 4294901760
UMat_MAGIC_VAL = 1124007936
UMat_SUBMATRIX_FLAG = 32768
UMat_TYPE_MASK = 4095
USAGE_ALLOCATE_DEVICE_MEMORY = 2
USAGE_ALLOCATE_HOST_MEMORY = 1
USAGE_ALLOCATE_SHARED_MEMORY = 4
USAGE_DEFAULT = 0
VIDEOWRITER_PROP_FRAMEBYTES = 2
VIDEOWRITER_PROP_NSTRIPES = 3
VIDEOWRITER_PROP_QUALITY = 1
class VideoCapture(_mod_builtins.object):
    __class__ = VideoCapture
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def get(self, propId):
        'get(propId) -> retval\n.   @brief Returns the specified VideoCapture property\n.   \n.   @param propId Property identifier from cv::VideoCaptureProperties (eg. cv::CAP_PROP_POS_MSEC, cv::CAP_PROP_POS_FRAMES, ...)\n.   or one from @ref videoio_flags_others\n.   @return Value for the specified property. Value 0 is returned when querying a property that is\n.   not supported by the backend used by the VideoCapture instance.\n.   \n.   @note Reading / writing properties involves many layers. Some unexpected result might happens\n.   along this chain.\n.   @code {.txt}\n.   `VideoCapture -> API Backend -> Operating System -> Device Driver -> Device Hardware`\n.   @endcode\n.   The returned value might be different from what really used by the device or it could be encoded\n.   using device dependent rules (eg. steps or percentage). Effective behaviour depends from device\n.   driver and API Backend'
        pass
    
    def grab(self):
        'grab() -> retval\n.   @brief Grabs the next frame from video file or capturing device.\n.   \n.   @return `true` (non-zero) in the case of success.\n.   \n.   The method/function grabs the next frame from video file or camera and returns true (non-zero) in\n.   the case of success.\n.   \n.   The primary use of the function is in multi-camera environments, especially when the cameras do not\n.   have hardware synchronization. That is, you call VideoCapture::grab() for each camera and after that\n.   call the slower method VideoCapture::retrieve() to decode and get frame from each camera. This way\n.   the overhead on demosaicing or motion jpeg decompression etc. is eliminated and the retrieved frames\n.   from different cameras will be closer in time.\n.   \n.   Also, when a connected camera is multi-head (for example, a stereo camera or a Kinect device), the\n.   correct way of retrieving data from it is to call VideoCapture::grab() first and then call\n.   VideoCapture::retrieve() one or more times with different values of the channel parameter.\n.   \n.   @ref tutorial_kinect_openni'
        pass
    
    def isOpened(self):
        'isOpened() -> retval\n.   @brief Returns true if video capturing has been initialized already.\n.   \n.   If the previous call to VideoCapture constructor or VideoCapture::open() succeeded, the method returns\n.   true.'
        pass
    
    def open(self, filename):
        'open(filename) -> retval\n.   @brief  Open video file or a capturing device or a IP video stream for video capturing\n.   \n.   @overload\n.   \n.   Parameters are same as the constructor VideoCapture(const String& filename)\n.   @return `true` if the file has been successfully opened\n.   \n.   The method first calls VideoCapture::release to close the already opened file or camera.\n\n\n\nopen(index) -> retval\n.   @brief  Open a camera for video capturing\n.   \n.   @overload\n.   \n.   Parameters are same as the constructor VideoCapture(int index)\n.   @return `true` if the camera has been successfully opened.\n.   \n.   The method first calls VideoCapture::release to close the already opened file or camera.\n\n\n\nopen(cameraNum, apiPreference) -> retval\n.   @brief  Open a camera for video capturing\n.   \n.   @overload\n.   \n.   Parameters are similar as the constructor VideoCapture(int index),except it takes an additional argument apiPreference.\n.   Definitely, is same as open(int index) where `index=cameraNum + apiPreference`\n.   @return `true` if the camera has been successfully opened.\n\n\n\nopen(filename, apiPreference) -> retval\n.   @brief Open video file or a capturing device or a IP video stream for video capturing with API Preference\n.   \n.   @overload\n.   \n.   Parameters are same as the constructor VideoCapture(const String& filename, int apiPreference)\n.   @return `true` if the file has been successfully opened\n.   \n.   The method first calls VideoCapture::release to close the already opened file or camera.'
        pass
    
    def read(self, image=None):
        'read([, image]) -> retval, image\n.   @brief Grabs, decodes and returns the next video frame.\n.   \n.   @param [out] image the video frame is returned here. If no frames has been grabbed the image will be empty.\n.   @return `false` if no frames has been grabbed\n.   \n.   The method/function combines VideoCapture::grab() and VideoCapture::retrieve() in one call. This is the\n.   most convenient method for reading video files or capturing data from decode and returns the just\n.   grabbed frame. If no frames has been grabbed (camera has been disconnected, or there are no more\n.   frames in video file), the method returns false and the function returns empty image (with %cv::Mat, test it with Mat::empty()).\n.   \n.   @note In @ref videoio_c "C API", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video\n.   capturing structure. It is not allowed to modify or release the image! You can copy the frame using\n.   :ocvcvCloneImage and then do whatever you want with the copy.'
        pass
    
    def release(self):
        'release() -> None\n.   @brief Closes video file or capturing device.\n.   \n.   The method is automatically called by subsequent VideoCapture::open and by VideoCapture\n.   destructor.\n.   \n.   The C function also deallocates memory and clears \\*capture pointer.'
        pass
    
    def retrieve(self, image=None, flag=None):
        'retrieve([, image[, flag]]) -> retval, image\n.   @brief Decodes and returns the grabbed video frame.\n.   \n.   @param [out] image the video frame is returned here. If no frames has been grabbed the image will be empty.\n.   @param flag it could be a frame index or a driver specific flag\n.   @return `false` if no frames has been grabbed\n.   \n.   The method decodes and returns the just grabbed frame. If no frames has been grabbed\n.   (camera has been disconnected, or there are no more frames in video file), the method returns false\n.   and the function returns an empty image (with %cv::Mat, test it with Mat::empty()).\n.   \n.   @sa read()\n.   \n.   @note In @ref videoio_c "C API", functions cvRetrieveFrame() and cv.RetrieveFrame() return image stored inside the video\n.   capturing structure. It is not allowed to modify or release the image! You can copy the frame using\n.   :ocvcvCloneImage and then do whatever you want with the copy.'
        pass
    
    def set(self, propId, value):
        "set(propId, value) -> retval\n.   @brief Sets a property in the VideoCapture.\n.   \n.   @param propId Property identifier from cv::VideoCaptureProperties (eg. cv::CAP_PROP_POS_MSEC, cv::CAP_PROP_POS_FRAMES, ...)\n.   or one from @ref videoio_flags_others\n.   @param value Value of the property.\n.   @return `true` if the property is supported by backend used by the VideoCapture instance.\n.   @note Even if it returns `true` this doesn't ensure that the property\n.   value has been accepted by the capture device. See note in VideoCapture::get()"
        pass
    

class VideoWriter(_mod_builtins.object):
    __class__ = VideoWriter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def fourcc(cls, c1, c2, c3, c4):
        'fourcc(c1, c2, c3, c4) -> retval\n.   @brief Concatenates 4 chars to a fourcc code\n.   \n.   @return a fourcc code\n.   \n.   This static method constructs the fourcc code of the codec to be used in the constructor\n.   VideoWriter::VideoWriter or VideoWriter::open.'
        pass
    
    def get(self, propId):
        'get(propId) -> retval\n.   @brief Returns the specified VideoWriter property\n.   \n.   @param propId Property identifier from cv::VideoWriterProperties (eg. cv::VIDEOWRITER_PROP_QUALITY)\n.   or one of @ref videoio_flags_others\n.   \n.   @return Value for the specified property. Value 0 is returned when querying a property that is\n.   not supported by the backend used by the VideoWriter instance.'
        pass
    
    def isOpened(self):
        'isOpened() -> retval\n.   @brief Returns true if video writer has been successfully initialized.'
        pass
    
    def open(self, filename, fourcc, fps, frameSize, isColor=None):
        'open(filename, fourcc, fps, frameSize[, isColor]) -> retval\n.   @brief Initializes or reinitializes video writer.\n.   \n.   The method opens video writer. Parameters are the same as in the constructor\n.   VideoWriter::VideoWriter.\n.   @return `true` if video writer has been successfully initialized\n.   \n.   The method first calls VideoWriter::release to close the already opened file.\n\n\n\nopen(filename, apiPreference, fourcc, fps, frameSize[, isColor]) -> retval\n.   @overload'
        pass
    
    def release(self):
        'release() -> None\n.   @brief Closes the video writer.\n.   \n.   The method is automatically called by subsequent VideoWriter::open and by the VideoWriter\n.   destructor.'
        pass
    
    def set(self, propId, value):
        'set(propId, value) -> retval\n.   @brief Sets a property in the VideoWriter.\n.   \n.   @param propId Property identifier from cv::VideoWriterProperties (eg. cv::VIDEOWRITER_PROP_QUALITY)\n.   or one of @ref videoio_flags_others\n.   \n.   @param value Value of the property.\n.   @return  `true` if the property is supported by the backend used by the VideoWriter instance.'
        pass
    
    def write(self, image):
        'write(image) -> None\n.   @brief Writes the next video frame\n.   \n.   @param image The written frame. In general, color images are expected in BGR format.\n.   \n.   The function/method writes the specified image to video file. It must have the same size as has\n.   been specified when opening the video writer.'
        pass
    

def VideoWriter_fourcc(c1, c2, c3, c4):
    'VideoWriter_fourcc(c1, c2, c3, c4) -> retval\n.   @brief Concatenates 4 chars to a fourcc code\n.   \n.   @return a fourcc code\n.   \n.   This static method constructs the fourcc code of the codec to be used in the constructor\n.   VideoWriter::VideoWriter or VideoWriter::open.'
    pass

WARP_FILL_OUTLIERS = 8
WARP_INVERSE_MAP = 16
WARP_POLAR_LINEAR = 0
WARP_POLAR_LOG = 256
WINDOW_AUTOSIZE = 1
WINDOW_FREERATIO = 256
WINDOW_FULLSCREEN = 1
WINDOW_GUI_EXPANDED = 0
WINDOW_GUI_NORMAL = 16
WINDOW_KEEPRATIO = 0
WINDOW_NORMAL = 0
WINDOW_OPENGL = 4096
WND_PROP_ASPECT_RATIO = 2
WND_PROP_AUTOSIZE = 1
WND_PROP_FULLSCREEN = 0
WND_PROP_OPENGL = 3
WND_PROP_VISIBLE = 4
_INPUT_ARRAY_CUDA_GPU_MAT = 589824
_INPUT_ARRAY_CUDA_HOST_MEM = 524288
_INPUT_ARRAY_EXPR = 393216
_INPUT_ARRAY_FIXED_SIZE = 1073741824
_INPUT_ARRAY_FIXED_TYPE = -2147483648
_INPUT_ARRAY_KIND_MASK = 2031616
_INPUT_ARRAY_KIND_SHIFT = 16
_INPUT_ARRAY_MAT = 65536
_INPUT_ARRAY_MATX = 131072
_INPUT_ARRAY_NONE = 0
_INPUT_ARRAY_OPENGL_BUFFER = 458752
_INPUT_ARRAY_STD_ARRAY = 917504
_INPUT_ARRAY_STD_ARRAY_MAT = 983040
_INPUT_ARRAY_STD_BOOL_VECTOR = 786432
_INPUT_ARRAY_STD_VECTOR = 196608
_INPUT_ARRAY_STD_VECTOR_CUDA_GPU_MAT = 851968
_INPUT_ARRAY_STD_VECTOR_MAT = 327680
_INPUT_ARRAY_STD_VECTOR_UMAT = 720896
_INPUT_ARRAY_STD_VECTOR_VECTOR = 262144
_INPUT_ARRAY_UMAT = 655360
_InputArray_CUDA_GPU_MAT = 589824
_InputArray_CUDA_HOST_MEM = 524288
_InputArray_EXPR = 393216
_InputArray_FIXED_SIZE = 1073741824
_InputArray_FIXED_TYPE = -2147483648
_InputArray_KIND_MASK = 2031616
_InputArray_KIND_SHIFT = 16
_InputArray_MAT = 65536
_InputArray_MATX = 131072
_InputArray_NONE = 0
_InputArray_OPENGL_BUFFER = 458752
_InputArray_STD_ARRAY = 917504
_InputArray_STD_ARRAY_MAT = 983040
_InputArray_STD_BOOL_VECTOR = 786432
_InputArray_STD_VECTOR = 196608
_InputArray_STD_VECTOR_CUDA_GPU_MAT = 851968
_InputArray_STD_VECTOR_MAT = 327680
_InputArray_STD_VECTOR_UMAT = 720896
_InputArray_STD_VECTOR_VECTOR = 262144
_InputArray_UMAT = 655360
_OUTPUT_ARRAY_DEPTH_MASK_16S = 8
_OUTPUT_ARRAY_DEPTH_MASK_16U = 4
_OUTPUT_ARRAY_DEPTH_MASK_32F = 32
_OUTPUT_ARRAY_DEPTH_MASK_32S = 16
_OUTPUT_ARRAY_DEPTH_MASK_64F = 64
_OUTPUT_ARRAY_DEPTH_MASK_8S = 2
_OUTPUT_ARRAY_DEPTH_MASK_8U = 1
_OUTPUT_ARRAY_DEPTH_MASK_ALL = 127
_OUTPUT_ARRAY_DEPTH_MASK_ALL_BUT_8S = 125
_OUTPUT_ARRAY_DEPTH_MASK_FLT = 96
_OutputArray_DEPTH_MASK_16S = 8
_OutputArray_DEPTH_MASK_16U = 4
_OutputArray_DEPTH_MASK_32F = 32
_OutputArray_DEPTH_MASK_32S = 16
_OutputArray_DEPTH_MASK_64F = 64
_OutputArray_DEPTH_MASK_8S = 2
_OutputArray_DEPTH_MASK_8U = 1
_OutputArray_DEPTH_MASK_ALL = 127
_OutputArray_DEPTH_MASK_ALL_BUT_8S = 125
_OutputArray_DEPTH_MASK_FLT = 96
__UMAT_USAGE_FLAGS_32BIT = 2147483647
__doc__ = 'Python wrapper for OpenCV.'
__file__ = '/home/lucas/anaconda3/envs/curso_dlib/lib/python3.6/site-packages/cv2.cpython-36m-x86_64-linux-gnu.so'
__name__ = 'cv2'
__package__ = ''
__version__ = '3.4.3'
def absdiff(src1, src2, dst=None):
    'absdiff(src1, src2[, dst]) -> dst\n.   @brief Calculates the per-element absolute difference between two arrays or between an array and a scalar.\n.   \n.   The function cv::absdiff calculates:\n.   *   Absolute difference between two arrays when they have the same\n.   size and type:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1}(I) -  \\texttt{src2}(I)|)\\f]\n.   *   Absolute difference between an array and a scalar when the second\n.   array is constructed from Scalar or has as many elements as the\n.   number of channels in `src1`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1}(I) -  \\texttt{src2} |)\\f]\n.   *   Absolute difference between a scalar and an array when the first\n.   array is constructed from Scalar or has as many elements as the\n.   number of channels in `src2`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1} -  \\texttt{src2}(I) |)\\f]\n.   where I is a multi-dimensional index of array elements. In case of\n.   multi-channel arrays, each channel is processed independently.\n.   @note Saturation is not applied when the arrays have the depth CV_32S.\n.   You may even get a negative value in the case of overflow.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array that has the same size and type as input arrays.\n.   @sa cv::abs(const Mat&)'
    pass

def accumulate(src, dst, mask=None):
    'accumulate(src, dst[, mask]) -> dst\n.   @brief Adds an image to the accumulator image.\n.   \n.   The function adds src or some of its elements to dst :\n.   \n.   \\f[\\texttt{dst} (x,y)  \\leftarrow \\texttt{dst} (x,y) +  \\texttt{src} (x,y)  \\quad \\text{if} \\quad \\texttt{mask} (x,y)  \\ne 0\\f]\n.   \n.   The function supports multi-channel images. Each channel is processed independently.\n.   \n.   The function cv::accumulate can be used, for example, to collect statistics of a scene background\n.   viewed by a still camera and for the further foreground-background segmentation.\n.   \n.   @param src Input image of type CV_8UC(n), CV_16UC(n), CV_32FC(n) or CV_64FC(n), where n is a positive integer.\n.   @param dst %Accumulator image with the same number of channels as input image, and a depth of CV_32F or CV_64F.\n.   @param mask Optional operation mask.\n.   \n.   @sa  accumulateSquare, accumulateProduct, accumulateWeighted'
    pass

def accumulateProduct(src1, src2, dst, mask=None):
    'accumulateProduct(src1, src2, dst[, mask]) -> dst\n.   @brief Adds the per-element product of two input images to the accumulator image.\n.   \n.   The function adds the product of two images or their selected regions to the accumulator dst :\n.   \n.   \\f[\\texttt{dst} (x,y)  \\leftarrow \\texttt{dst} (x,y) +  \\texttt{src1} (x,y)  \\cdot \\texttt{src2} (x,y)  \\quad \\text{if} \\quad \\texttt{mask} (x,y)  \\ne 0\\f]\n.   \n.   The function supports multi-channel images. Each channel is processed independently.\n.   \n.   @param src1 First input image, 1- or 3-channel, 8-bit or 32-bit floating point.\n.   @param src2 Second input image of the same type and the same size as src1 .\n.   @param dst %Accumulator image with the same number of channels as input images, 32-bit or 64-bit\n.   floating-point.\n.   @param mask Optional operation mask.\n.   \n.   @sa  accumulate, accumulateSquare, accumulateWeighted'
    pass

def accumulateSquare(src, dst, mask=None):
    'accumulateSquare(src, dst[, mask]) -> dst\n.   @brief Adds the square of a source image to the accumulator image.\n.   \n.   The function adds the input image src or its selected region, raised to a power of 2, to the\n.   accumulator dst :\n.   \n.   \\f[\\texttt{dst} (x,y)  \\leftarrow \\texttt{dst} (x,y) +  \\texttt{src} (x,y)^2  \\quad \\text{if} \\quad \\texttt{mask} (x,y)  \\ne 0\\f]\n.   \n.   The function supports multi-channel images. Each channel is processed independently.\n.   \n.   @param src Input image as 1- or 3-channel, 8-bit or 32-bit floating point.\n.   @param dst %Accumulator image with the same number of channels as input image, 32-bit or 64-bit\n.   floating-point.\n.   @param mask Optional operation mask.\n.   \n.   @sa  accumulateSquare, accumulateProduct, accumulateWeighted'
    pass

def accumulateWeighted(src, dst, alpha, mask=None):
    'accumulateWeighted(src, dst, alpha[, mask]) -> dst\n.   @brief Updates a running average.\n.   \n.   The function calculates the weighted sum of the input image src and the accumulator dst so that dst\n.   becomes a running average of a frame sequence:\n.   \n.   \\f[\\texttt{dst} (x,y)  \\leftarrow (1- \\texttt{alpha} )  \\cdot \\texttt{dst} (x,y) +  \\texttt{alpha} \\cdot \\texttt{src} (x,y)  \\quad \\text{if} \\quad \\texttt{mask} (x,y)  \\ne 0\\f]\n.   \n.   That is, alpha regulates the update speed (how fast the accumulator "forgets" about earlier images).\n.   The function supports multi-channel images. Each channel is processed independently.\n.   \n.   @param src Input image as 1- or 3-channel, 8-bit or 32-bit floating point.\n.   @param dst %Accumulator image with the same number of channels as input image, 32-bit or 64-bit\n.   floating-point.\n.   @param alpha Weight of the input image.\n.   @param mask Optional operation mask.\n.   \n.   @sa  accumulate, accumulateSquare, accumulateProduct'
    pass

def adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C, dst=None):
    'adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst]) -> dst\n.   @brief Applies an adaptive threshold to an array.\n.   \n.   The function transforms a grayscale image to a binary image according to the formulae:\n.   -   **THRESH_BINARY**\n.   \\f[dst(x,y) =  \\fork{\\texttt{maxValue}}{if \\(src(x,y) > T(x,y)\\)}{0}{otherwise}\\f]\n.   -   **THRESH_BINARY_INV**\n.   \\f[dst(x,y) =  \\fork{0}{if \\(src(x,y) > T(x,y)\\)}{\\texttt{maxValue}}{otherwise}\\f]\n.   where \\f$T(x,y)\\f$ is a threshold calculated individually for each pixel (see adaptiveMethod parameter).\n.   \n.   The function can process the image in-place.\n.   \n.   @param src Source 8-bit single-channel image.\n.   @param dst Destination image of the same size and the same type as src.\n.   @param maxValue Non-zero value assigned to the pixels for which the condition is satisfied\n.   @param adaptiveMethod Adaptive thresholding algorithm to use, see #AdaptiveThresholdTypes.\n.   The #BORDER_REPLICATE | #BORDER_ISOLATED is used to process boundaries.\n.   @param thresholdType Thresholding type that must be either #THRESH_BINARY or #THRESH_BINARY_INV,\n.   see #ThresholdTypes.\n.   @param blockSize Size of a pixel neighborhood that is used to calculate a threshold value for the\n.   pixel: 3, 5, 7, and so on.\n.   @param C Constant subtracted from the mean or weighted mean (see the details below). Normally, it\n.   is positive but may be zero or negative as well.\n.   \n.   @sa  threshold, blur, GaussianBlur'
    pass

def add(src1, src2, dst=None, mask=None, dtype=None):
    'add(src1, src2[, dst[, mask[, dtype]]]) -> dst\n.   @brief Calculates the per-element sum of two arrays or an array and a scalar.\n.   \n.   The function add calculates:\n.   - Sum of two arrays when both input arrays have the same size and the same number of channels:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) +  \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   - Sum of an array and a scalar when src2 is constructed from Scalar or has the same number of\n.   elements as `src1.channels()`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) +  \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   - Sum of a scalar and an array when src1 is constructed from Scalar or has the same number of\n.   elements as `src2.channels()`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1} +  \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   where `I` is a multi-dimensional index of array elements. In case of multi-channel arrays, each\n.   channel is processed independently.\n.   \n.   The first function in the list above can be replaced with matrix expressions:\n.   @code{.cpp}\n.   dst = src1 + src2;\n.   dst += src1; // equivalent to add(dst, src1, dst);\n.   @endcode\n.   The input arrays and the output array can all have the same or different depths. For example, you\n.   can add a 16-bit unsigned array to a 8-bit signed array and store the sum as a 32-bit\n.   floating-point array. Depth of the output array is determined by the dtype parameter. In the second\n.   and third cases above, as well as in the first case, when src1.depth() == src2.depth(), dtype can\n.   be set to the default -1. In this case, the output array will have the same depth as the input\n.   array, be it src1, src2 or both.\n.   @note Saturation is not applied when the output array has the depth CV_32S. You may even get\n.   result of an incorrect sign in the case of overflow.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array that has the same size and number of channels as the input array(s); the\n.   depth is defined by dtype or src1/src2.\n.   @param mask optional operation mask - 8-bit single channel array, that specifies elements of the\n.   output array to be changed.\n.   @param dtype optional depth of the output array (see the discussion below).\n.   @sa subtract, addWeighted, scaleAdd, Mat::convertTo'
    pass

def addText(img, text, org, nameFont, pointSize=None, color=None, weight=None, style=None, spacing=None):
    'addText(img, text, org, nameFont[, pointSize[, color[, weight[, style[, spacing]]]]]) -> None\n.   @brief Draws a text on the image.\n.   \n.   @param img 8-bit 3-channel image where the text should be drawn.\n.   @param text Text to write on an image.\n.   @param org Point(x,y) where the text should start on an image.\n.   @param nameFont Name of the font. The name should match the name of a system font (such as\n.   *Times*). If the font is not found, a default one is used.\n.   @param pointSize Size of the font. If not specified, equal zero or negative, the point size of the\n.   font is set to a system-dependent default value. Generally, this is 12 points.\n.   @param color Color of the font in BGRA where A = 255 is fully transparent.\n.   @param weight Font weight. Available operation flags are : cv::QtFontWeights You can also specify a positive integer for better control.\n.   @param style Font style. Available operation flags are : cv::QtFontStyles\n.   @param spacing Spacing between characters. It can be negative or positive.'
    pass

def addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None):
    'addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]]) -> dst\n.   @brief Calculates the weighted sum of two arrays.\n.   \n.   The function addWeighted calculates the weighted sum of two arrays as follows:\n.   \\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{src1} (I)* \\texttt{alpha} +  \\texttt{src2} (I)* \\texttt{beta} +  \\texttt{gamma} )\\f]\n.   where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each\n.   channel is processed independently.\n.   The function can be replaced with a matrix expression:\n.   @code{.cpp}\n.   dst = src1*alpha + src2*beta + gamma;\n.   @endcode\n.   @note Saturation is not applied when the output array has the depth CV_32S. You may even get\n.   result of an incorrect sign in the case of overflow.\n.   @param src1 first input array.\n.   @param alpha weight of the first array elements.\n.   @param src2 second input array of the same size and channel number as src1.\n.   @param beta weight of the second array elements.\n.   @param gamma scalar added to each sum.\n.   @param dst output array that has the same size and number of channels as the input arrays.\n.   @param dtype optional depth of the output array; when both input arrays have the same depth, dtype\n.   can be set to -1, which will be equivalent to src1.depth().\n.   @sa  add, subtract, scaleAdd, Mat::convertTo'
    pass

def applyColorMap(src, colormap, dst=None):
    'applyColorMap(src, colormap[, dst]) -> dst\n.   @brief Applies a GNU Octave/MATLAB equivalent colormap on a given image.\n.   \n.   @param src The source image, grayscale or colored of type CV_8UC1 or CV_8UC3.\n.   @param dst The result is the colormapped source image. Note: Mat::create is called on dst.\n.   @param colormap The colormap to apply, see #ColormapTypes\n\n\n\napplyColorMap(src, userColor[, dst]) -> dst\n.   @brief Applies a user colormap on a given image.\n.   \n.   @param src The source image, grayscale or colored of type CV_8UC1 or CV_8UC3.\n.   @param dst The result is the colormapped source image. Note: Mat::create is called on dst.\n.   @param userColor The colormap to apply of type CV_8UC1 or CV_8UC3 and size 256'
    pass

def approxPolyDP(curve, epsilon, closed, approxCurve=None):
    'approxPolyDP(curve, epsilon, closed[, approxCurve]) -> approxCurve\n.   @brief Approximates a polygonal curve(s) with the specified precision.\n.   \n.   The function cv::approxPolyDP approximates a curve or a polygon with another curve/polygon with less\n.   vertices so that the distance between them is less or equal to the specified precision. It uses the\n.   Douglas-Peucker algorithm <http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm>\n.   \n.   @param curve Input vector of a 2D point stored in std::vector or Mat\n.   @param approxCurve Result of the approximation. The type should match the type of the input curve.\n.   @param epsilon Parameter specifying the approximation accuracy. This is the maximum distance\n.   between the original curve and its approximation.\n.   @param closed If true, the approximated curve is closed (its first and last vertices are\n.   connected). Otherwise, it is not closed.'
    pass

def arcLength(curve, closed):
    'arcLength(curve, closed) -> retval\n.   @brief Calculates a contour perimeter or a curve length.\n.   \n.   The function computes a curve length or a closed contour perimeter.\n.   \n.   @param curve Input vector of 2D points, stored in std::vector or Mat.\n.   @param closed Flag indicating whether the curve is closed or not.'
    pass

def arrowedLine(img, pt1, pt2, color, thickness=None, line_type=None, shift=None, tipLength=None):
    'arrowedLine(img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]) -> img\n.   @brief Draws a arrow segment pointing from the first point to the second one.\n.   \n.   The function cv::arrowedLine draws an arrow between pt1 and pt2 points in the image. See also #line.\n.   \n.   @param img Image.\n.   @param pt1 The point the arrow starts from.\n.   @param pt2 The point the arrow points to.\n.   @param color Line color.\n.   @param thickness Line thickness.\n.   @param line_type Type of the line. See #LineTypes\n.   @param shift Number of fractional bits in the point coordinates.\n.   @param tipLength The length of the arrow tip in relation to the arrow length'
    pass

class aruco_Board(_mod_builtins.object):
    __class__ = aruco_Board
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, objPoints, dictionary, ids):
        'create(objPoints, dictionary, ids) -> retval\n.   * @brief Provide way to create Board by passing nessesary data. Specially needed in Python.\n.   *\n.   * @param objPoints array of object points of all the marker corners in the board\n.   * @param dictionary the dictionary of markers employed for this board\n.   * @param ids vector of the identifiers of the markers in the board\n.   *'
        pass
    
    @property
    def dictionary(self):
        'dictionary'
        pass
    
    @property
    def ids(self):
        'ids'
        pass
    
    @property
    def objPoints(self):
        'objPoints'
        pass
    

class aruco_CharucoBoard(aruco_Board):
    __class__ = aruco_CharucoBoard
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def chessboardCorners(self):
        'chessboardCorners'
        pass
    
    @classmethod
    def create(cls, squaresX, squaresY, squareLength, markerLength, dictionary):
        'create(squaresX, squaresY, squareLength, markerLength, dictionary) -> retval\n.   * @brief Create a CharucoBoard object\n.   *\n.   * @param squaresX number of chessboard squares in X direction\n.   * @param squaresY number of chessboard squares in Y direction\n.   * @param squareLength chessboard square side length (normally in meters)\n.   * @param markerLength marker side length (same unit than squareLength)\n.   * @param dictionary dictionary of markers indicating the type of markers.\n.   * The first markers in the dictionary are used to fill the white chessboard squares.\n.   * @return the output CharucoBoard object\n.   *\n.   * This functions creates a CharucoBoard object given the number of squares in each direction\n.   * and the size of the markers and chessboard squares.'
        pass
    
    def draw(self, outSize, img=None, marginSize=None, borderBits=None):
        'draw(outSize[, img[, marginSize[, borderBits]]]) -> img\n.   * @brief Draw a ChArUco board\n.   *\n.   * @param outSize size of the output image in pixels.\n.   * @param img output image with the board. The size of this image will be outSize\n.   * and the board will be on the center, keeping the board proportions.\n.   * @param marginSize minimum margins (in pixels) of the board in the output image\n.   * @param borderBits width of the marker borders.\n.   *\n.   * This function return the image of the ChArUco board, ready to be printed.'
        pass
    
    def getChessboardSize(self):
        'getChessboardSize() -> retval\n.   *'
        pass
    
    def getMarkerLength(self):
        'getMarkerLength() -> retval\n.   *'
        pass
    
    def getSquareLength(self):
        'getSquareLength() -> retval\n.   *'
        pass
    
    @property
    def nearestMarkerCorners(self):
        'nearestMarkerCorners'
        pass
    
    @property
    def nearestMarkerIdx(self):
        'nearestMarkerIdx'
        pass
    

class aruco_DetectorParameters(_mod_builtins.object):
    __class__ = aruco_DetectorParameters
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def adaptiveThreshConstant(self):
        'adaptiveThreshConstant'
        pass
    
    @property
    def adaptiveThreshWinSizeMax(self):
        'adaptiveThreshWinSizeMax'
        pass
    
    @property
    def adaptiveThreshWinSizeMin(self):
        'adaptiveThreshWinSizeMin'
        pass
    
    @property
    def adaptiveThreshWinSizeStep(self):
        'adaptiveThreshWinSizeStep'
        pass
    
    @property
    def aprilTagCriticalRad(self):
        'aprilTagCriticalRad'
        pass
    
    @property
    def aprilTagDeglitch(self):
        'aprilTagDeglitch'
        pass
    
    @property
    def aprilTagMaxLineFitMse(self):
        'aprilTagMaxLineFitMse'
        pass
    
    @property
    def aprilTagMaxNmaxima(self):
        'aprilTagMaxNmaxima'
        pass
    
    @property
    def aprilTagMinClusterPixels(self):
        'aprilTagMinClusterPixels'
        pass
    
    @property
    def aprilTagMinWhiteBlackDiff(self):
        'aprilTagMinWhiteBlackDiff'
        pass
    
    @property
    def aprilTagQuadDecimate(self):
        'aprilTagQuadDecimate'
        pass
    
    @property
    def aprilTagQuadSigma(self):
        'aprilTagQuadSigma'
        pass
    
    @property
    def cornerRefinementMaxIterations(self):
        'cornerRefinementMaxIterations'
        pass
    
    @property
    def cornerRefinementMethod(self):
        'cornerRefinementMethod'
        pass
    
    @property
    def cornerRefinementMinAccuracy(self):
        'cornerRefinementMinAccuracy'
        pass
    
    @property
    def cornerRefinementWinSize(self):
        'cornerRefinementWinSize'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    
    @property
    def errorCorrectionRate(self):
        'errorCorrectionRate'
        pass
    
    @property
    def markerBorderBits(self):
        'markerBorderBits'
        pass
    
    @property
    def maxErroneousBitsInBorderRate(self):
        'maxErroneousBitsInBorderRate'
        pass
    
    @property
    def maxMarkerPerimeterRate(self):
        'maxMarkerPerimeterRate'
        pass
    
    @property
    def minCornerDistanceRate(self):
        'minCornerDistanceRate'
        pass
    
    @property
    def minDistanceToBorder(self):
        'minDistanceToBorder'
        pass
    
    @property
    def minMarkerDistanceRate(self):
        'minMarkerDistanceRate'
        pass
    
    @property
    def minMarkerPerimeterRate(self):
        'minMarkerPerimeterRate'
        pass
    
    @property
    def minOtsuStdDev(self):
        'minOtsuStdDev'
        pass
    
    @property
    def perspectiveRemoveIgnoredMarginPerCell(self):
        'perspectiveRemoveIgnoredMarginPerCell'
        pass
    
    @property
    def perspectiveRemovePixelPerCell(self):
        'perspectiveRemovePixelPerCell'
        pass
    
    @property
    def polygonalApproxAccuracyRate(self):
        'polygonalApproxAccuracyRate'
        pass
    

class aruco_Dictionary(_mod_builtins.object):
    __class__ = aruco_Dictionary
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def bytesList(self):
        'bytesList'
        pass
    
    @classmethod
    def create(cls, nMarkers, markerSize, randomSeed=None):
        'create(nMarkers, markerSize[, randomSeed]) -> retval\n.   * @see generateCustomDictionary'
        pass
    
    @classmethod
    def create_from(cls, nMarkers, markerSize, baseDictionary, randomSeed=None):
        'create_from(nMarkers, markerSize, baseDictionary[, randomSeed]) -> retval\n.   * @see generateCustomDictionary'
        pass
    
    def drawMarker(self, id, sidePixels, _img=None, borderBits=None):
        'drawMarker(id, sidePixels[, _img[, borderBits]]) -> _img\n.   * @brief Draw a canonical marker image'
        pass
    
    @classmethod
    def get(cls, dict):
        'get(dict) -> retval\n.   * @see getPredefinedDictionary'
        pass
    
    @classmethod
    def getBitsFromByteList(cls, byteList, markerSize):
        'getBitsFromByteList(byteList, markerSize) -> retval\n.   * @brief Transform list of bytes to matrix of bits'
        pass
    
    @classmethod
    def getByteListFromBits(cls, bits):
        'getByteListFromBits(bits) -> retval\n.   * @brief Transform matrix of bits to list of bytes in the 4 rotations'
        pass
    
    @property
    def markerSize(self):
        'markerSize'
        pass
    
    @property
    def maxCorrectionBits(self):
        'maxCorrectionBits'
        pass
    

class aruco_GridBoard(aruco_Board):
    __class__ = aruco_GridBoard
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, markersX, markersY, markerLength, markerSeparation, dictionary, firstMarker=None):
        'create(markersX, markersY, markerLength, markerSeparation, dictionary[, firstMarker]) -> retval\n.   * @brief Create a GridBoard object\n.   *\n.   * @param markersX number of markers in X direction\n.   * @param markersY number of markers in Y direction\n.   * @param markerLength marker side length (normally in meters)\n.   * @param markerSeparation separation between two markers (same unit as markerLength)\n.   * @param dictionary dictionary of markers indicating the type of markers\n.   * @param firstMarker id of first marker in dictionary to use on board.\n.   * @return the output GridBoard object\n.   *\n.   * This functions creates a GridBoard object given the number of markers in each direction and\n.   * the marker size and marker separation.'
        pass
    
    def draw(self, outSize, img=None, marginSize=None, borderBits=None):
        'draw(outSize[, img[, marginSize[, borderBits]]]) -> img\n.   * @brief Draw a GridBoard\n.   *\n.   * @param outSize size of the output image in pixels.\n.   * @param img output image with the board. The size of this image will be outSize\n.   * and the board will be on the center, keeping the board proportions.\n.   * @param marginSize minimum margins (in pixels) of the board in the output image\n.   * @param borderBits width of the marker borders.\n.   *\n.   * This function return the image of the GridBoard, ready to be printed.'
        pass
    
    def getGridSize(self):
        'getGridSize() -> retval\n.   *'
        pass
    
    def getMarkerLength(self):
        'getMarkerLength() -> retval\n.   *'
        pass
    
    def getMarkerSeparation(self):
        'getMarkerSeparation() -> retval\n.   *'
        pass
    

def batchDistance(src1, src2, dtype, dist=None, nidx=None, normType=None, K=None, mask=None, update=None, crosscheck=None):
    'batchDistance(src1, src2, dtype[, dist[, nidx[, normType[, K[, mask[, update[, crosscheck]]]]]]]) -> dist, nidx\n.   @brief naive nearest neighbor finder\n.   \n.   see http://en.wikipedia.org/wiki/Nearest_neighbor_search\n.   @todo document'
    pass

class bgsegm_BackgroundSubtractorCNT(BackgroundSubtractor):
    __class__ = bgsegm_BackgroundSubtractorCNT
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, image, fgmask=None, learningRate=None):
        'apply(image[, fgmask[, learningRate]]) -> fgmask\n.'
        pass
    
    def getBackgroundImage(self, backgroundImage=None):
        'getBackgroundImage([, backgroundImage]) -> backgroundImage\n.'
        pass
    
    def getIsParallel(self):
        "getIsParallel() -> retval\n.   @brief Returns if we're parallelizing the algorithm."
        pass
    
    def getMaxPixelStability(self):
        'getMaxPixelStability() -> retval\n.   @brief Returns maximum allowed credit for a pixel in history.'
        pass
    
    def getMinPixelStability(self):
        'getMinPixelStability() -> retval\n.   @brief Returns number of frames with same pixel color to consider stable.'
        pass
    
    def getUseHistory(self):
        "getUseHistory() -> retval\n.   @brief Returns if we're giving a pixel credit for being stable for a long time."
        pass
    
    def setIsParallel(self, value):
        "setIsParallel(value) -> None\n.   @brief Sets if we're parallelizing the algorithm."
        pass
    
    def setMaxPixelStability(self, value):
        'setMaxPixelStability(value) -> None\n.   @brief Sets the maximum allowed credit for a pixel in history.'
        pass
    
    def setMinPixelStability(self, value):
        'setMinPixelStability(value) -> None\n.   @brief Sets the number of frames with same pixel color to consider stable.'
        pass
    
    def setUseHistory(self, value):
        "setUseHistory(value) -> None\n.   @brief Sets if we're giving a pixel credit for being stable for a long time."
        pass
    

class bgsegm_BackgroundSubtractorGMG(BackgroundSubtractor):
    __class__ = bgsegm_BackgroundSubtractorGMG
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getBackgroundPrior(self):
        'getBackgroundPrior() -> retval\n.   @brief Returns the prior probability that each individual pixel is a background pixel.'
        pass
    
    def getDecisionThreshold(self):
        'getDecisionThreshold() -> retval\n.   @brief Returns the value of decision threshold.\n.   \n.   Decision value is the value above which pixel is determined to be FG.'
        pass
    
    def getDefaultLearningRate(self):
        'getDefaultLearningRate() -> retval\n.   @brief Returns the learning rate of the algorithm.\n.   \n.   It lies between 0.0 and 1.0. It determines how quickly features are "forgotten" from\n.   histograms.'
        pass
    
    def getMaxFeatures(self):
        'getMaxFeatures() -> retval\n.   @brief Returns total number of distinct colors to maintain in histogram.'
        pass
    
    def getMaxVal(self):
        'getMaxVal() -> retval\n.   @brief Returns the maximum value taken on by pixels in image sequence. e.g. 1.0 or 255.'
        pass
    
    def getMinVal(self):
        'getMinVal() -> retval\n.   @brief Returns the minimum value taken on by pixels in image sequence. Usually 0.'
        pass
    
    def getNumFrames(self):
        'getNumFrames() -> retval\n.   @brief Returns the number of frames used to initialize background model.'
        pass
    
    def getQuantizationLevels(self):
        'getQuantizationLevels() -> retval\n.   @brief Returns the parameter used for quantization of color-space.\n.   \n.   It is the number of discrete levels in each channel to be used in histograms.'
        pass
    
    def getSmoothingRadius(self):
        'getSmoothingRadius() -> retval\n.   @brief Returns the kernel radius used for morphological operations'
        pass
    
    def getUpdateBackgroundModel(self):
        'getUpdateBackgroundModel() -> retval\n.   @brief Returns the status of background model update'
        pass
    
    def setBackgroundPrior(self, bgprior):
        'setBackgroundPrior(bgprior) -> None\n.   @brief Sets the prior probability that each individual pixel is a background pixel.'
        pass
    
    def setDecisionThreshold(self, thresh):
        'setDecisionThreshold(thresh) -> None\n.   @brief Sets the value of decision threshold.'
        pass
    
    def setDefaultLearningRate(self, lr):
        'setDefaultLearningRate(lr) -> None\n.   @brief Sets the learning rate of the algorithm.'
        pass
    
    def setMaxFeatures(self, maxFeatures):
        'setMaxFeatures(maxFeatures) -> None\n.   @brief Sets total number of distinct colors to maintain in histogram.'
        pass
    
    def setMaxVal(self, val):
        'setMaxVal(val) -> None\n.   @brief Sets the maximum value taken on by pixels in image sequence.'
        pass
    
    def setMinVal(self, val):
        'setMinVal(val) -> None\n.   @brief Sets the minimum value taken on by pixels in image sequence.'
        pass
    
    def setNumFrames(self, nframes):
        'setNumFrames(nframes) -> None\n.   @brief Sets the number of frames used to initialize background model.'
        pass
    
    def setQuantizationLevels(self, nlevels):
        'setQuantizationLevels(nlevels) -> None\n.   @brief Sets the parameter used for quantization of color-space'
        pass
    
    def setSmoothingRadius(self, radius):
        'setSmoothingRadius(radius) -> None\n.   @brief Sets the kernel radius used for morphological operations'
        pass
    
    def setUpdateBackgroundModel(self, update):
        'setUpdateBackgroundModel(update) -> None\n.   @brief Sets the status of background model update'
        pass
    

class bgsegm_BackgroundSubtractorGSOC(BackgroundSubtractor):
    __class__ = bgsegm_BackgroundSubtractorGSOC
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, image, fgmask=None, learningRate=None):
        'apply(image[, fgmask[, learningRate]]) -> fgmask\n.'
        pass
    
    def getBackgroundImage(self, backgroundImage=None):
        'getBackgroundImage([, backgroundImage]) -> backgroundImage\n.'
        pass
    

class bgsegm_BackgroundSubtractorLSBP(BackgroundSubtractor):
    __class__ = bgsegm_BackgroundSubtractorLSBP
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def apply(self, image, fgmask=None, learningRate=None):
        'apply(image[, fgmask[, learningRate]]) -> fgmask\n.'
        pass
    
    def getBackgroundImage(self, backgroundImage=None):
        'getBackgroundImage([, backgroundImage]) -> backgroundImage\n.'
        pass
    

class bgsegm_BackgroundSubtractorLSBPDesc(_mod_builtins.object):
    __class__ = bgsegm_BackgroundSubtractorLSBPDesc
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class bgsegm_BackgroundSubtractorMOG(BackgroundSubtractor):
    __class__ = bgsegm_BackgroundSubtractorMOG
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getBackgroundRatio(self):
        'getBackgroundRatio() -> retval\n.'
        pass
    
    def getHistory(self):
        'getHistory() -> retval\n.'
        pass
    
    def getNMixtures(self):
        'getNMixtures() -> retval\n.'
        pass
    
    def getNoiseSigma(self):
        'getNoiseSigma() -> retval\n.'
        pass
    
    def setBackgroundRatio(self, backgroundRatio):
        'setBackgroundRatio(backgroundRatio) -> None\n.'
        pass
    
    def setHistory(self, nframes):
        'setHistory(nframes) -> None\n.'
        pass
    
    def setNMixtures(self, nmix):
        'setNMixtures(nmix) -> None\n.'
        pass
    
    def setNoiseSigma(self, noiseSigma):
        'setNoiseSigma(noiseSigma) -> None\n.'
        pass
    

class bgsegm_SyntheticSequenceGenerator(Algorithm):
    __class__ = bgsegm_SyntheticSequenceGenerator
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getNextFrame(self, frame=None, gtMask=None):
        'getNextFrame([, frame[, gtMask]]) -> frame, gtMask\n.   @brief Obtain the next frame in the sequence.\n.   \n.   @param frame Output frame.\n.   @param gtMask Output ground-truth (reference) segmentation mask object/background.'
        pass
    

def bilateralFilter(src, d, sigmaColor, sigmaSpace, dst=None, borderType=None):
    'bilateralFilter(src, d, sigmaColor, sigmaSpace[, dst[, borderType]]) -> dst\n.   @brief Applies the bilateral filter to an image.\n.   \n.   The function applies bilateral filtering to the input image, as described in\n.   http://www.dai.ed.ac.uk/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html\n.   bilateralFilter can reduce unwanted noise very well while keeping edges fairly sharp. However, it is\n.   very slow compared to most filters.\n.   \n.   _Sigma values_: For simplicity, you can set the 2 sigma values to be the same. If they are small (\\<\n.   10), the filter will not have much effect, whereas if they are large (\\> 150), they will have a very\n.   strong effect, making the image look "cartoonish".\n.   \n.   _Filter size_: Large filters (d \\> 5) are very slow, so it is recommended to use d=5 for real-time\n.   applications, and perhaps d=9 for offline applications that need heavy noise filtering.\n.   \n.   This filter does not work inplace.\n.   @param src Source 8-bit or floating-point, 1-channel or 3-channel image.\n.   @param dst Destination image of the same size and type as src .\n.   @param d Diameter of each pixel neighborhood that is used during filtering. If it is non-positive,\n.   it is computed from sigmaSpace.\n.   @param sigmaColor Filter sigma in the color space. A larger value of the parameter means that\n.   farther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resulting\n.   in larger areas of semi-equal color.\n.   @param sigmaSpace Filter sigma in the coordinate space. A larger value of the parameter means that\n.   farther pixels will influence each other as long as their colors are close enough (see sigmaColor\n.   ). When d\\>0, it specifies the neighborhood size regardless of sigmaSpace. Otherwise, d is\n.   proportional to sigmaSpace.\n.   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes'
    pass

class bioinspired_Retina(Algorithm):
    __class__ = bioinspired_Retina
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def activateContoursProcessing(self):
        'activateContoursProcessing(activate) -> None\n.   @brief Activate/desactivate the Parvocellular pathway processing (contours information extraction), by\n.   default, it is activated\n.   @param activate true if Parvocellular (contours information extraction) output should be\n.   activated, false if not... if activated, the Parvocellular output can be retrieved using the\n.   Retina::getParvo methods'
        pass
    
    def activateMovingContoursProcessing(self):
        'activateMovingContoursProcessing(activate) -> None\n.   @brief Activate/desactivate the Magnocellular pathway processing (motion information extraction), by\n.   default, it is activated\n.   @param activate true if Magnocellular output should be activated, false if not... if activated,\n.   the Magnocellular output can be retrieved using the **getMagno** methods'
        pass
    
    def applyFastToneMapping(self, inputImage, outputToneMappedImage=None):
        "applyFastToneMapping(inputImage[, outputToneMappedImage]) -> outputToneMappedImage\n.   @brief Method which processes an image in the aim to correct its luminance correct\n.   backlight problems, enhance details in shadows.\n.   \n.   This method is designed to perform High Dynamic Range image tone mapping (compress \\>8bit/pixel\n.   images to 8bit/pixel). This is a simplified version of the Retina Parvocellular model\n.   (simplified version of the run/getParvo methods call) since it does not include the\n.   spatio-temporal filter modelling the Outer Plexiform Layer of the retina that performs spectral\n.   whitening and many other stuff. However, it works great for tone mapping and in a faster way.\n.   \n.   Check the demos and experiments section to see examples and the way to perform tone mapping\n.   using the original retina model and the method.\n.   \n.   @param inputImage the input image to process (should be coded in float format : CV_32F,\n.   CV_32FC1, CV_32F_C3, CV_32F_C4, the 4th channel won't be considered).\n.   @param outputToneMappedImage the output 8bit/channel tone mapped image (CV_8U or CV_8UC3 format)."
        pass
    
    def clearBuffers(self):
        'clearBuffers() -> None\n.   @brief Clears all retina buffers\n.   \n.   (equivalent to opening the eyes after a long period of eye close ;o) whatchout the temporal\n.   transition occuring just after this method call.'
        pass
    
    @classmethod
    def create(cls, inputSize):
        'create(inputSize) -> retval\n.   @overload\n\n\n\ncreate(inputSize, colorMode[, colorSamplingMethod[, useRetinaLogSampling[, reductionFactor[, samplingStrenght]]]]) -> retval\n.   @brief Constructors from standardized interfaces : retreive a smart pointer to a Retina instance\n.   \n.   @param inputSize the input frame size\n.   @param colorMode the chosen processing mode : with or without color processing\n.   @param colorSamplingMethod specifies which kind of color sampling will be used :\n.   -   cv::bioinspired::RETINA_COLOR_RANDOM: each pixel position is either R, G or B in a random choice\n.   -   cv::bioinspired::RETINA_COLOR_DIAGONAL: color sampling is RGBRGBRGB..., line 2 BRGBRGBRG..., line 3, GBRGBRGBR...\n.   -   cv::bioinspired::RETINA_COLOR_BAYER: standard bayer sampling\n.   @param useRetinaLogSampling activate retina log sampling, if true, the 2 following parameters can\n.   be used\n.   @param reductionFactor only usefull if param useRetinaLogSampling=true, specifies the reduction\n.   factor of the output frame (as the center (fovea) is high resolution and corners can be\n.   underscaled, then a reduction of the output is allowed without precision leak\n.   @param samplingStrenght only usefull if param useRetinaLogSampling=true, specifies the strenght of\n.   the log scale that is applied'
        pass
    
    def getInputSize(self):
        'getInputSize() -> retval\n.   @brief Retreive retina input buffer size\n.   @return the retina input buffer size'
        pass
    
    def getMagno(self):
        'getMagno([, retinaOutput_magno]) -> retinaOutput_magno\n.   @brief Accessor of the motion channel of the retina (models peripheral vision).\n.   \n.   Warning, getMagnoRAW methods return buffers that are not rescaled within range [0;255] while\n.   the non RAW method allows a normalized matrix to be retrieved.\n.   @param retinaOutput_magno the output buffer (reallocated if necessary), format can be :\n.   -   a Mat, this output is rescaled for standard 8bits image processing use in OpenCV\n.   -   RAW methods actually return a 1D matrix (encoding is M1, M2,... Mn), this output is the\n.   original retina filter model output, without any quantification or rescaling.\n.   @see getMagnoRAW'
        pass
    
    def getMagnoRAW(self):
        'getMagnoRAW([, retinaOutput_magno]) -> retinaOutput_magno\n.   @brief Accessor of the motion channel of the retina (models peripheral vision).\n.   @see getMagno\n\n\n\ngetMagnoRAW() -> retval\n.   @overload'
        pass
    
    def getOutputSize(self):
        'getOutputSize() -> retval\n.   @brief Retreive retina output buffer size that can be different from the input if a spatial log\n.   transformation is applied\n.   @return the retina output buffer size'
        pass
    
    def getParvo(self):
        'getParvo([, retinaOutput_parvo]) -> retinaOutput_parvo\n.   @brief Accessor of the details channel of the retina (models foveal vision).\n.   \n.   Warning, getParvoRAW methods return buffers that are not rescaled within range [0;255] while\n.   the non RAW method allows a normalized matrix to be retrieved.\n.   \n.   @param retinaOutput_parvo the output buffer (reallocated if necessary), format can be :\n.   -   a Mat, this output is rescaled for standard 8bits image processing use in OpenCV\n.   -   RAW methods actually return a 1D matrix (encoding is R1, R2, ... Rn, G1, G2, ..., Gn, B1,\n.   B2, ...Bn), this output is the original retina filter model output, without any\n.   quantification or rescaling.\n.   @see getParvoRAW'
        pass
    
    def getParvoRAW(self):
        'getParvoRAW([, retinaOutput_parvo]) -> retinaOutput_parvo\n.   @brief Accessor of the details channel of the retina (models foveal vision).\n.   @see getParvo\n\n\n\ngetParvoRAW() -> retval\n.   @overload'
        pass
    
    def printSetup(self):
        'printSetup() -> retval\n.   @brief Outputs a string showing the used parameters setup\n.   @return a string which contains formated parameters information'
        pass
    
    def run(self, inputImage):
        'run(inputImage) -> None\n.   @brief Method which allows retina to be applied on an input image,\n.   \n.   after run, encapsulated retina module is ready to deliver its outputs using dedicated\n.   acccessors, see getParvo and getMagno methods\n.   @param inputImage the input Mat image to be processed, can be gray level or BGR coded in any\n.   format (from 8bit to 16bits)'
        pass
    
    def setColorSaturation(self, saturateColors=None, colorSaturationValue=None):
        'setColorSaturation([, saturateColors[, colorSaturationValue]]) -> None\n.   @brief Activate color saturation as the final step of the color demultiplexing process -\\> this\n.   saturation is a sigmoide function applied to each channel of the demultiplexed image.\n.   @param saturateColors boolean that activates color saturation (if true) or desactivate (if false)\n.   @param colorSaturationValue the saturation factor : a simple factor applied on the chrominance\n.   buffers'
        pass
    
    def setup(self, retinaParameterFile=None, applyDefaultSetupOnFailure=None):
        'setup([, retinaParameterFile[, applyDefaultSetupOnFailure]]) -> None\n.   @brief Try to open an XML retina parameters file to adjust current retina instance setup\n.   \n.   - if the xml file does not exist, then default setup is applied\n.   - warning, Exceptions are thrown if read XML file is not valid\n.   @param retinaParameterFile the parameters filename\n.   @param applyDefaultSetupOnFailure set to true if an error must be thrown on error\n.   \n.   You can retrieve the current parameters structure using the method Retina::getParameters and update\n.   it before running method Retina::setup.'
        pass
    
    def setupIPLMagnoChannel(self, normaliseOutput=None, parasolCells_beta=None, parasolCells_tau=None, parasolCells_k=None, amacrinCellsTemporalCutFrequency=None, V0CompressionParameter=None, localAdaptintegration_tau=None, localAdaptintegration_k=None):
        'setupIPLMagnoChannel([, normaliseOutput[, parasolCells_beta[, parasolCells_tau[, parasolCells_k[, amacrinCellsTemporalCutFrequency[, V0CompressionParameter[, localAdaptintegration_tau[, localAdaptintegration_k]]]]]]]]) -> None\n.   @brief Set parameters values for the Inner Plexiform Layer (IPL) magnocellular channel\n.   \n.   this channel processes signals output from OPL processing stage in peripheral vision, it allows\n.   motion information enhancement. It is decorrelated from the details channel. See reference\n.   papers for more details.\n.   \n.   @param normaliseOutput specifies if (true) output is rescaled between 0 and 255 of not (false)\n.   @param parasolCells_beta the low pass filter gain used for local contrast adaptation at the\n.   IPL level of the retina (for ganglion cells local adaptation), typical value is 0\n.   @param parasolCells_tau the low pass filter time constant used for local contrast adaptation\n.   at the IPL level of the retina (for ganglion cells local adaptation), unit is frame, typical\n.   value is 0 (immediate response)\n.   @param parasolCells_k the low pass filter spatial constant used for local contrast adaptation\n.   at the IPL level of the retina (for ganglion cells local adaptation), unit is pixels, typical\n.   value is 5\n.   @param amacrinCellsTemporalCutFrequency the time constant of the first order high pass fiter of\n.   the magnocellular way (motion information channel), unit is frames, typical value is 1.2\n.   @param V0CompressionParameter the compression strengh of the ganglion cells local adaptation\n.   output, set a value between 0.6 and 1 for best results, a high value increases more the low\n.   value sensitivity... and the output saturates faster, recommended value: 0.95\n.   @param localAdaptintegration_tau specifies the temporal constant of the low pas filter\n.   involved in the computation of the local "motion mean" for the local adaptation computation\n.   @param localAdaptintegration_k specifies the spatial constant of the low pas filter involved\n.   in the computation of the local "motion mean" for the local adaptation computation'
        pass
    
    def setupOPLandIPLParvoChannel(self, colorMode=None, normaliseOutput=None, photoreceptorsLocalAdaptationSensitivity=None, photoreceptorsTemporalConstant=None, photoreceptorsSpatialConstant=None, horizontalCellsGain=None, HcellsTemporalConstant=None, HcellsSpatialConstant=None, ganglionCellsSensitivity=None):
        'setupOPLandIPLParvoChannel([, colorMode[, normaliseOutput[, photoreceptorsLocalAdaptationSensitivity[, photoreceptorsTemporalConstant[, photoreceptorsSpatialConstant[, horizontalCellsGain[, HcellsTemporalConstant[, HcellsSpatialConstant[, ganglionCellsSensitivity]]]]]]]]]) -> None\n.   @brief Setup the OPL and IPL parvo channels (see biologocal model)\n.   \n.   OPL is referred as Outer Plexiform Layer of the retina, it allows the spatio-temporal filtering\n.   which withens the spectrum and reduces spatio-temporal noise while attenuating global luminance\n.   (low frequency energy) IPL parvo is the OPL next processing stage, it refers to a part of the\n.   Inner Plexiform layer of the retina, it allows high contours sensitivity in foveal vision. See\n.   reference papers for more informations.\n.   for more informations, please have a look at the paper Benoit A., Caplier A., Durette B., Herault, J., "USING HUMAN VISUAL SYSTEM MODELING FOR BIO-INSPIRED LOW LEVEL IMAGE PROCESSING", Elsevier, Computer Vision and Image Understanding 114 (2010), pp. 758-773, DOI: http://dx.doi.org/10.1016/j.cviu.2010.01.011\n.   @param colorMode specifies if (true) color is processed of not (false) to then processing gray\n.   level image\n.   @param normaliseOutput specifies if (true) output is rescaled between 0 and 255 of not (false)\n.   @param photoreceptorsLocalAdaptationSensitivity the photoreceptors sensitivity renage is 0-1\n.   (more log compression effect when value increases)\n.   @param photoreceptorsTemporalConstant the time constant of the first order low pass filter of\n.   the photoreceptors, use it to cut high temporal frequencies (noise or fast motion), unit is\n.   frames, typical value is 1 frame\n.   @param photoreceptorsSpatialConstant the spatial constant of the first order low pass filter of\n.   the photoreceptors, use it to cut high spatial frequencies (noise or thick contours), unit is\n.   pixels, typical value is 1 pixel\n.   @param horizontalCellsGain gain of the horizontal cells network, if 0, then the mean value of\n.   the output is zero, if the parameter is near 1, then, the luminance is not filtered and is\n.   still reachable at the output, typicall value is 0\n.   @param HcellsTemporalConstant the time constant of the first order low pass filter of the\n.   horizontal cells, use it to cut low temporal frequencies (local luminance variations), unit is\n.   frames, typical value is 1 frame, as the photoreceptors\n.   @param HcellsSpatialConstant the spatial constant of the first order low pass filter of the\n.   horizontal cells, use it to cut low spatial frequencies (local luminance), unit is pixels,\n.   typical value is 5 pixel, this value is also used for local contrast computing when computing\n.   the local contrast adaptation at the ganglion cells level (Inner Plexiform Layer parvocellular\n.   channel model)\n.   @param ganglionCellsSensitivity the compression strengh of the ganglion cells local adaptation\n.   output, set a value between 0.6 and 1 for best results, a high value increases more the low\n.   value sensitivity... and the output saturates faster, recommended value: 0.7'
        pass
    
    def write(self, fs):
        'write(fs) -> None\n.   @brief Write xml/yml formated parameters information\n.   @param fs the filename of the xml file that will be open and writen with formatted parameters\n.   information'
        pass
    

class bioinspired_RetinaFastToneMapping(Algorithm):
    __class__ = bioinspired_RetinaFastToneMapping
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def applyFastToneMapping(self):
        "applyFastToneMapping(inputImage[, outputToneMappedImage]) -> outputToneMappedImage\n.   @brief applies a luminance correction (initially High Dynamic Range (HDR) tone mapping)\n.   \n.   using only the 2 local adaptation stages of the retina parvocellular channel : photoreceptors\n.   level and ganlion cells level. Spatio temporal filtering is applied but limited to temporal\n.   smoothing and eventually high frequencies attenuation. This is a lighter method than the one\n.   available using the regular retina::run method. It is then faster but it does not include\n.   complete temporal filtering nor retina spectral whitening. Then, it can have a more limited\n.   effect on images with a very high dynamic range. This is an adptation of the original still\n.   image HDR tone mapping algorithm of David Alleyson, Sabine Susstruck and Laurence Meylan's\n.   work, please cite: -> Meylan L., Alleysson D., and Susstrunk S., A Model of Retinal Local\n.   Adaptation for the Tone Mapping of Color Filter Array Images, Journal of Optical Society of\n.   America, A, Vol. 24, N 9, September, 1st, 2007, pp. 2807-2816\n.   \n.   @param inputImage the input image to process RGB or gray levels\n.   @param outputToneMappedImage the output tone mapped image"
        pass
    
    @classmethod
    def create(cls, inputSize):
        'create(inputSize) -> retval\n.'
        pass
    
    def setup(self, photoreceptorsNeighborhoodRadius=None, ganglioncellsNeighborhoodRadius=None, meanLuminanceModulatorK=None):
        'setup([, photoreceptorsNeighborhoodRadius[, ganglioncellsNeighborhoodRadius[, meanLuminanceModulatorK]]]) -> None\n.   @brief updates tone mapping behaviors by adjusing the local luminance computation area\n.   \n.   @param photoreceptorsNeighborhoodRadius the first stage local adaptation area\n.   @param ganglioncellsNeighborhoodRadius the second stage local adaptation area\n.   @param meanLuminanceModulatorK the factor applied to modulate the meanLuminance information\n.   (default is 1, see reference paper)'
        pass
    

class bioinspired_TransientAreasSegmentationModule(Algorithm):
    __class__ = bioinspired_TransientAreasSegmentationModule
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def clearAllBuffers(self):
        'clearAllBuffers() -> None\n.   @brief cleans all the buffers of the instance'
        pass
    
    @classmethod
    def create(cls, inputSize):
        'create(inputSize) -> retval\n.   @brief allocator\n.   @param inputSize : size of the images input to segment (output will be the same size)'
        pass
    
    def getSegmentationPicture(self, transientAreas=None):
        'getSegmentationPicture([, transientAreas]) -> transientAreas\n.   @brief access function\n.   @return the last segmentation result: a boolean picture which is resampled between 0 and 255 for a display purpose'
        pass
    
    def getSize(self):
        'getSize() -> retval\n.   @brief return the sze of the manage input and output images'
        pass
    
    def printSetup(self):
        'printSetup() -> retval\n.   @brief parameters setup display method\n.   @return a string which contains formatted parameters information'
        pass
    
    def run(self):
        'run(inputToSegment[, channelIndex]) -> None\n.   @brief main processing method, get result using methods getSegmentationPicture()\n.   @param inputToSegment : the image to process, it must match the instance buffer size !\n.   @param channelIndex : the channel to process in case of multichannel images'
        pass
    
    def setup(self, segmentationParameterFile=None, applyDefaultSetupOnFailure=None):
        'setup([, segmentationParameterFile[, applyDefaultSetupOnFailure]]) -> None\n.   @brief try to open an XML segmentation parameters file to adjust current segmentation instance setup\n.   \n.   - if the xml file does not exist, then default setup is applied\n.   - warning, Exceptions are thrown if read XML file is not valid\n.   @param segmentationParameterFile : the parameters filename\n.   @param applyDefaultSetupOnFailure : set to true if an error must be thrown on error'
        pass
    
    def write(self, fs):
        'write(fs) -> None\n.   @brief write xml/yml formated parameters information\n.   @param fs : the filename of the xml file that will be open and writen with formatted parameters information'
        pass
    

def bitwise_and():
    'bitwise_and(src1, src2[, dst[, mask]]) -> dst\n.   @brief computes bitwise conjunction of the two arrays (dst = src1 & src2)\n.   Calculates the per-element bit-wise conjunction of two arrays or an\n.   array and a scalar.\n.   \n.   The function cv::bitwise_and calculates the per-element bit-wise logical conjunction for:\n.   *   Two arrays when src1 and src2 have the same size:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   An array and a scalar when src2 is constructed from Scalar or has\n.   the same number of elements as `src1.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\wedge \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   A scalar and an array when src1 is constructed from Scalar or has\n.   the same number of elements as `src2.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1}  \\wedge \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   In case of floating-point arrays, their machine-specific bit\n.   representations (usually IEEE754-compliant) are used for the operation.\n.   In case of multi-channel arrays, each channel is processed\n.   independently. In the second and third cases above, the scalar is first\n.   converted to the array type.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array that has the same size and type as the input\n.   arrays.\n.   @param mask optional operation mask, 8-bit single channel array, that\n.   specifies elements of the output array to be changed.'
    pass

def bitwise_not(src, dst=None, mask=None):
    'bitwise_not(src[, dst[, mask]]) -> dst\n.   @brief  Inverts every bit of an array.\n.   \n.   The function cv::bitwise_not calculates per-element bit-wise inversion of the input\n.   array:\n.   \\f[\\texttt{dst} (I) =  \\neg \\texttt{src} (I)\\f]\n.   In case of a floating-point input array, its machine-specific bit\n.   representation (usually IEEE754-compliant) is used for the operation. In\n.   case of multi-channel arrays, each channel is processed independently.\n.   @param src input array.\n.   @param dst output array that has the same size and type as the input\n.   array.\n.   @param mask optional operation mask, 8-bit single channel array, that\n.   specifies elements of the output array to be changed.'
    pass

def bitwise_or(src1, src2, dst=None, mask=None):
    'bitwise_or(src1, src2[, dst[, mask]]) -> dst\n.   @brief Calculates the per-element bit-wise disjunction of two arrays or an\n.   array and a scalar.\n.   \n.   The function cv::bitwise_or calculates the per-element bit-wise logical disjunction for:\n.   *   Two arrays when src1 and src2 have the same size:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   An array and a scalar when src2 is constructed from Scalar or has\n.   the same number of elements as `src1.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\vee \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   A scalar and an array when src1 is constructed from Scalar or has\n.   the same number of elements as `src2.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1}  \\vee \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   In case of floating-point arrays, their machine-specific bit\n.   representations (usually IEEE754-compliant) are used for the operation.\n.   In case of multi-channel arrays, each channel is processed\n.   independently. In the second and third cases above, the scalar is first\n.   converted to the array type.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array that has the same size and type as the input\n.   arrays.\n.   @param mask optional operation mask, 8-bit single channel array, that\n.   specifies elements of the output array to be changed.'
    pass

def bitwise_xor(src1, src2, dst=None, mask=None):
    'bitwise_xor(src1, src2[, dst[, mask]]) -> dst\n.   @brief Calculates the per-element bit-wise "exclusive or" operation on two\n.   arrays or an array and a scalar.\n.   \n.   The function cv::bitwise_xor calculates the per-element bit-wise logical "exclusive-or"\n.   operation for:\n.   *   Two arrays when src1 and src2 have the same size:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   An array and a scalar when src2 is constructed from Scalar or has\n.   the same number of elements as `src1.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\oplus \\texttt{src2} \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   *   A scalar and an array when src1 is constructed from Scalar or has\n.   the same number of elements as `src2.channels()`:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1}  \\oplus \\texttt{src2} (I) \\quad \\texttt{if mask} (I) \\ne0\\f]\n.   In case of floating-point arrays, their machine-specific bit\n.   representations (usually IEEE754-compliant) are used for the operation.\n.   In case of multi-channel arrays, each channel is processed\n.   independently. In the 2nd and 3rd cases above, the scalar is first\n.   converted to the array type.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array that has the same size and type as the input\n.   arrays.\n.   @param mask optional operation mask, 8-bit single channel array, that\n.   specifies elements of the output array to be changed.'
    pass

def blur(src, ksize, dst=None, anchor=None, borderType=None):
    'blur(src, ksize[, dst[, anchor[, borderType]]]) -> dst\n.   @brief Blurs an image using the normalized box filter.\n.   \n.   The function smooths an image using the kernel:\n.   \n.   \\f[\\texttt{K} =  \\frac{1}{\\texttt{ksize.width*ksize.height}} \\begin{bmatrix} 1 & 1 & 1 &  \\cdots & 1 & 1  \\\\ 1 & 1 & 1 &  \\cdots & 1 & 1  \\\\ \\hdotsfor{6} \\\\ 1 & 1 & 1 &  \\cdots & 1 & 1  \\\\ \\end{bmatrix}\\f]\n.   \n.   The call `blur(src, dst, ksize, anchor, borderType)` is equivalent to `boxFilter(src, dst, src.type(),\n.   anchor, true, borderType)`.\n.   \n.   @param src input image; it can have any number of channels, which are processed independently, but\n.   the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.\n.   @param dst output image of the same size and type as src.\n.   @param ksize blurring kernel size.\n.   @param anchor anchor point; default value Point(-1,-1) means that the anchor is at the kernel\n.   center.\n.   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes\n.   @sa  boxFilter, bilateralFilter, GaussianBlur, medianBlur'
    pass

def borderInterpolate(p, len, borderType):
    'borderInterpolate(p, len, borderType) -> retval\n.   @brief Computes the source location of an extrapolated pixel.\n.   \n.   The function computes and returns the coordinate of a donor pixel corresponding to the specified\n.   extrapolated pixel when using the specified extrapolation border mode. For example, if you use\n.   cv::BORDER_WRAP mode in the horizontal direction, cv::BORDER_REFLECT_101 in the vertical direction and\n.   want to compute value of the "virtual" pixel Point(-5, 100) in a floating-point image img , it\n.   looks like:\n.   @code{.cpp}\n.   float val = img.at<float>(borderInterpolate(100, img.rows, cv::BORDER_REFLECT_101),\n.   borderInterpolate(-5, img.cols, cv::BORDER_WRAP));\n.   @endcode\n.   Normally, the function is not called directly. It is used inside filtering functions and also in\n.   copyMakeBorder.\n.   @param p 0-based coordinate of the extrapolated pixel along one of the axes, likely \\<0 or \\>= len\n.   @param len Length of the array along the corresponding axis.\n.   @param borderType Border type, one of the #BorderTypes, except for #BORDER_TRANSPARENT and\n.   #BORDER_ISOLATED . When borderType==#BORDER_CONSTANT , the function always returns -1, regardless\n.   of p and len.\n.   \n.   @sa copyMakeBorder'
    pass

def boundingRect(points):
    'boundingRect(points) -> retval\n.   @brief Calculates the up-right bounding rectangle of a point set.\n.   \n.   The function calculates and returns the minimal up-right bounding rectangle for the specified point set.\n.   \n.   @param points Input 2D point set, stored in std::vector or Mat.'
    pass

def boxFilter(src, ddepth, ksize, dst=None, anchor=None, normalize=None, borderType=None):
    'boxFilter(src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]) -> dst\n.   @brief Blurs an image using the box filter.\n.   \n.   The function smooths an image using the kernel:\n.   \n.   \\f[\\texttt{K} =  \\alpha \\begin{bmatrix} 1 & 1 & 1 &  \\cdots & 1 & 1  \\\\ 1 & 1 & 1 &  \\cdots & 1 & 1  \\\\ \\hdotsfor{6} \\\\ 1 & 1 & 1 &  \\cdots & 1 & 1 \\end{bmatrix}\\f]\n.   \n.   where\n.   \n.   \\f[\\alpha = \\fork{\\frac{1}{\\texttt{ksize.width*ksize.height}}}{when \\texttt{normalize=true}}{1}{otherwise}\\f]\n.   \n.   Unnormalized box filter is useful for computing various integral characteristics over each pixel\n.   neighborhood, such as covariance matrices of image derivatives (used in dense optical flow\n.   algorithms, and so on). If you need to compute pixel sums over variable-size windows, use #integral.\n.   \n.   @param src input image.\n.   @param dst output image of the same size and type as src.\n.   @param ddepth the output image depth (-1 to use src.depth()).\n.   @param ksize blurring kernel size.\n.   @param anchor anchor point; default value Point(-1,-1) means that the anchor is at the kernel\n.   center.\n.   @param normalize flag, specifying whether the kernel is normalized by its area or not.\n.   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes\n.   @sa  blur, bilateralFilter, GaussianBlur, medianBlur, integral'
    pass

def boxPoints(box, points=None):
    'boxPoints(box[, points]) -> points\n.   @brief Finds the four vertices of a rotated rect. Useful to draw the rotated rectangle.\n.   \n.   The function finds the four vertices of a rotated rectangle. This function is useful to draw the\n.   rectangle. In C++, instead of using this function, you can directly use RotatedRect::points method. Please\n.   visit the @ref tutorial_bounding_rotated_ellipses "tutorial on Creating Bounding rotated boxes and ellipses for contours" for more information.\n.   \n.   @param box The input rotated rectangle. It may be the output of\n.   @param points The output array of four vertices of rectangles.'
    pass

def buildOpticalFlowPyramid(img, winSize, maxLevel, pyramid=None, withDerivatives=None, pyrBorder=None, derivBorder=None, tryReuseInputImage=None):
    'buildOpticalFlowPyramid(img, winSize, maxLevel[, pyramid[, withDerivatives[, pyrBorder[, derivBorder[, tryReuseInputImage]]]]]) -> retval, pyramid\n.   @brief Constructs the image pyramid which can be passed to calcOpticalFlowPyrLK.\n.   \n.   @param img 8-bit input image.\n.   @param pyramid output pyramid.\n.   @param winSize window size of optical flow algorithm. Must be not less than winSize argument of\n.   calcOpticalFlowPyrLK. It is needed to calculate required padding for pyramid levels.\n.   @param maxLevel 0-based maximal pyramid level number.\n.   @param withDerivatives set to precompute gradients for the every pyramid level. If pyramid is\n.   constructed without the gradients then calcOpticalFlowPyrLK will calculate them internally.\n.   @param pyrBorder the border mode for pyramid layers.\n.   @param derivBorder the border mode for gradients.\n.   @param tryReuseInputImage put ROI of input image into the pyramid if possible. You can pass false\n.   to force data copying.\n.   @return number of levels in constructed pyramid. Can be less than maxLevel.'
    pass

def calcBackProject(images, channels, hist, ranges, scale, dst=None):
    'calcBackProject(images, channels, hist, ranges, scale[, dst]) -> dst\n.   @overload'
    pass

def calcCovarMatrix(samples, mean, flags, covar=None, ctype=None):
    "calcCovarMatrix(samples, mean, flags[, covar[, ctype]]) -> covar, mean\n.   @overload\n.   @note use #COVAR_ROWS or #COVAR_COLS flag\n.   @param samples samples stored as rows/columns of a single matrix.\n.   @param covar output covariance matrix of the type ctype and square size.\n.   @param mean input or output (depending on the flags) array as the average value of the input vectors.\n.   @param flags operation flags as a combination of #CovarFlags\n.   @param ctype type of the matrixl; it equals 'CV_64F' by default."
    pass

def calcHist(images, channels, mask, histSize, ranges, hist=None, accumulate=None):
    'calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate]]) -> hist\n.   @overload'
    pass

def calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags):
    "calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags) -> flow\n.   @brief Computes a dense optical flow using the Gunnar Farneback's algorithm.\n.   \n.   @param prev first 8-bit single-channel input image.\n.   @param next second input image of the same size and the same type as prev.\n.   @param flow computed flow image that has the same size as prev and type CV_32FC2.\n.   @param pyr_scale parameter, specifying the image scale (\\<1) to build pyramids for each image;\n.   pyr_scale=0.5 means a classical pyramid, where each next layer is twice smaller than the previous\n.   one.\n.   @param levels number of pyramid layers including the initial image; levels=1 means that no extra\n.   layers are created and only the original images are used.\n.   @param winsize averaging window size; larger values increase the algorithm robustness to image\n.   noise and give more chances for fast motion detection, but yield more blurred motion field.\n.   @param iterations number of iterations the algorithm does at each pyramid level.\n.   @param poly_n size of the pixel neighborhood used to find polynomial expansion in each pixel;\n.   larger values mean that the image will be approximated with smoother surfaces, yielding more\n.   robust algorithm and more blurred motion field, typically poly_n =5 or 7.\n.   @param poly_sigma standard deviation of the Gaussian that is used to smooth derivatives used as a\n.   basis for the polynomial expansion; for poly_n=5, you can set poly_sigma=1.1, for poly_n=7, a\n.   good value would be poly_sigma=1.5.\n.   @param flags operation flags that can be a combination of the following:\n.   -   **OPTFLOW_USE_INITIAL_FLOW** uses the input flow as an initial flow approximation.\n.   -   **OPTFLOW_FARNEBACK_GAUSSIAN** uses the Gaussian \\f$\\texttt{winsize}\\times\\texttt{winsize}\\f$\n.   filter instead of a box filter of the same size for optical flow estimation; usually, this\n.   option gives z more accurate flow than with a box filter, at the cost of lower speed;\n.   normally, winsize for a Gaussian window should be set to a larger value to achieve the same\n.   level of robustness.\n.   \n.   The function finds an optical flow for each prev pixel using the @cite Farneback2003 algorithm so that\n.   \n.   \\f[\\texttt{prev} (y,x)  \\sim \\texttt{next} ( y + \\texttt{flow} (y,x)[1],  x + \\texttt{flow} (y,x)[0])\\f]\n.   \n.   @note\n.   \n.   -   An example using the optical flow algorithm described by Gunnar Farneback can be found at\n.   opencv_source_code/samples/cpp/fback.cpp\n.   -   (Python) An example using the optical flow algorithm described by Gunnar Farneback can be\n.   found at opencv_source_code/samples/python/opt_flow.py"
    pass

def calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status=None, err=None, winSize=None, maxLevel=None, criteria=None, flags=None, minEigThreshold=None):
    "calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts[, status[, err[, winSize[, maxLevel[, criteria[, flags[, minEigThreshold]]]]]]]) -> nextPts, status, err\n.   @brief Calculates an optical flow for a sparse feature set using the iterative Lucas-Kanade method with\n.   pyramids.\n.   \n.   @param prevImg first 8-bit input image or pyramid constructed by buildOpticalFlowPyramid.\n.   @param nextImg second input image or pyramid of the same size and the same type as prevImg.\n.   @param prevPts vector of 2D points for which the flow needs to be found; point coordinates must be\n.   single-precision floating-point numbers.\n.   @param nextPts output vector of 2D points (with single-precision floating-point coordinates)\n.   containing the calculated new positions of input features in the second image; when\n.   OPTFLOW_USE_INITIAL_FLOW flag is passed, the vector must have the same size as in the input.\n.   @param status output status vector (of unsigned chars); each element of the vector is set to 1 if\n.   the flow for the corresponding features has been found, otherwise, it is set to 0.\n.   @param err output vector of errors; each element of the vector is set to an error for the\n.   corresponding feature, type of the error measure can be set in flags parameter; if the flow wasn't\n.   found then the error is not defined (use the status parameter to find such cases).\n.   @param winSize size of the search window at each pyramid level.\n.   @param maxLevel 0-based maximal pyramid level number; if set to 0, pyramids are not used (single\n.   level), if set to 1, two levels are used, and so on; if pyramids are passed to input then\n.   algorithm will use as many levels as pyramids have but no more than maxLevel.\n.   @param criteria parameter, specifying the termination criteria of the iterative search algorithm\n.   (after the specified maximum number of iterations criteria.maxCount or when the search window\n.   moves by less than criteria.epsilon.\n.   @param flags operation flags:\n.   -   **OPTFLOW_USE_INITIAL_FLOW** uses initial estimations, stored in nextPts; if the flag is\n.   not set, then prevPts is copied to nextPts and is considered the initial estimate.\n.   -   **OPTFLOW_LK_GET_MIN_EIGENVALS** use minimum eigen values as an error measure (see\n.   minEigThreshold description); if the flag is not set, then L1 distance between patches\n.   around the original and a moved point, divided by number of pixels in a window, is used as a\n.   error measure.\n.   @param minEigThreshold the algorithm calculates the minimum eigen value of a 2x2 normal matrix of\n.   optical flow equations (this matrix is called a spatial gradient matrix in @cite Bouguet00), divided\n.   by number of pixels in a window; if this value is less than minEigThreshold, then a corresponding\n.   feature is filtered out and its flow is not processed, so it allows to remove bad points and get a\n.   performance boost.\n.   \n.   The function implements a sparse iterative version of the Lucas-Kanade optical flow in pyramids. See\n.   @cite Bouguet00 . The function is parallelized with the TBB library.\n.   \n.   @note\n.   \n.   -   An example using the Lucas-Kanade optical flow algorithm can be found at\n.   opencv_source_code/samples/cpp/lkdemo.cpp\n.   -   (Python) An example using the Lucas-Kanade optical flow algorithm can be found at\n.   opencv_source_code/samples/python/lk_track.py\n.   -   (Python) An example using the Lucas-Kanade tracker for homography matching can be found at\n.   opencv_source_code/samples/python/lk_homography.py"
    pass

def calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, flags=None, criteria=None):
    'calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, flags[, criteria]]]]) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs\n.   @overload double calibrateCamera( InputArrayOfArrays objectPoints,\n.   InputArrayOfArrays imagePoints, Size imageSize,\n.   InputOutputArray cameraMatrix, InputOutputArray distCoeffs,\n.   OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs,\n.   OutputArray stdDeviations, OutputArray perViewErrors,\n.   int flags = 0, TermCriteria criteria = TermCriteria(\n.   TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON) )'
    pass

def calibrateCameraExtended(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, stdDeviationsIntrinsics=None, stdDeviationsExtrinsics=None, perViewErrors=None, flags=None, criteria=None):
    "calibrateCameraExtended(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, stdDeviationsIntrinsics[, stdDeviationsExtrinsics[, perViewErrors[, flags[, criteria]]]]]]]) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors\n.   @brief Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.\n.   \n.   @param objectPoints In the new interface it is a vector of vectors of calibration pattern points in\n.   the calibration pattern coordinate space (e.g. std::vector<std::vector<cv::Vec3f>>). The outer\n.   vector contains as many elements as the number of the pattern views. If the same calibration pattern\n.   is shown in each view and it is fully visible, all the vectors will be the same. Although, it is\n.   possible to use partially occluded patterns, or even different patterns in different views. Then,\n.   the vectors will be different. The points are 3D, but since they are in a pattern coordinate system,\n.   then, if the rig is planar, it may make sense to put the model to a XY coordinate plane so that\n.   Z-coordinate of each input object point is 0.\n.   In the old interface all the vectors of object points from different views are concatenated\n.   together.\n.   @param imagePoints In the new interface it is a vector of vectors of the projections of calibration\n.   pattern points (e.g. std::vector<std::vector<cv::Vec2f>>). imagePoints.size() and\n.   objectPoints.size() and imagePoints[i].size() must be equal to objectPoints[i].size() for each i.\n.   In the old interface all the vectors of object points from different views are concatenated\n.   together.\n.   @param imageSize Size of the image used only to initialize the intrinsic camera matrix.\n.   @param cameraMatrix Output 3x3 floating-point camera matrix\n.   \\f$A = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ . If CV\\_CALIB\\_USE\\_INTRINSIC\\_GUESS\n.   and/or CALIB_FIX_ASPECT_RATIO are specified, some or all of fx, fy, cx, cy must be\n.   initialized before calling the function.\n.   @param distCoeffs Output vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements.\n.   @param rvecs Output vector of rotation vectors (see Rodrigues ) estimated for each pattern view\n.   (e.g. std::vector<cv::Mat>>). That is, each k-th rotation vector together with the corresponding\n.   k-th translation vector (see the next output parameter description) brings the calibration pattern\n.   from the model coordinate space (in which object points are specified) to the world coordinate\n.   space, that is, a real position of the calibration pattern in the k-th pattern view (k=0.. *M* -1).\n.   @param tvecs Output vector of translation vectors estimated for each pattern view.\n.   @param stdDeviationsIntrinsics Output vector of standard deviations estimated for intrinsic parameters.\n.   Order of deviations values:\n.   \\f$(f_x, f_y, c_x, c_y, k_1, k_2, p_1, p_2, k_3, k_4, k_5, k_6 , s_1, s_2, s_3,\n.   s_4, \\tau_x, \\tau_y)\\f$ If one of parameters is not estimated, it's deviation is equals to zero.\n.   @param stdDeviationsExtrinsics Output vector of standard deviations estimated for extrinsic parameters.\n.   Order of deviations values: \\f$(R_1, T_1, \\dotsc , R_M, T_M)\\f$ where M is number of pattern views,\n.   \\f$R_i, T_i\\f$ are concatenated 1x3 vectors.\n.   @param perViewErrors Output vector of the RMS re-projection error estimated for each pattern view.\n.   @param flags Different flags that may be zero or a combination of the following values:\n.   -   **CALIB_USE_INTRINSIC_GUESS** cameraMatrix contains valid initial values of\n.   fx, fy, cx, cy that are optimized further. Otherwise, (cx, cy) is initially set to the image\n.   center ( imageSize is used), and focal distances are computed in a least-squares fashion.\n.   Note, that if intrinsic parameters are known, there is no need to use this function just to\n.   estimate extrinsic parameters. Use solvePnP instead.\n.   -   **CALIB_FIX_PRINCIPAL_POINT** The principal point is not changed during the global\n.   optimization. It stays at the center or at a different location specified when\n.   CALIB_USE_INTRINSIC_GUESS is set too.\n.   -   **CALIB_FIX_ASPECT_RATIO** The functions considers only fy as a free parameter. The\n.   ratio fx/fy stays the same as in the input cameraMatrix . When\n.   CALIB_USE_INTRINSIC_GUESS is not set, the actual input values of fx and fy are\n.   ignored, only their ratio is computed and used further.\n.   -   **CALIB_ZERO_TANGENT_DIST** Tangential distortion coefficients \\f$(p_1, p_2)\\f$ are set\n.   to zeros and stay zero.\n.   -   **CALIB_FIX_K1,...,CALIB_FIX_K6** The corresponding radial distortion\n.   coefficient is not changed during the optimization. If CALIB_USE_INTRINSIC_GUESS is\n.   set, the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   -   **CALIB_RATIONAL_MODEL** Coefficients k4, k5, and k6 are enabled. To provide the\n.   backward compatibility, this extra flag should be explicitly specified to make the\n.   calibration function use the rational model and return 8 coefficients. If the flag is not\n.   set, the function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_THIN_PRISM_MODEL** Coefficients s1, s2, s3 and s4 are enabled. To provide the\n.   backward compatibility, this extra flag should be explicitly specified to make the\n.   calibration function use the thin prism model and return 12 coefficients. If the flag is not\n.   set, the function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_FIX_S1_S2_S3_S4** The thin prism distortion coefficients are not changed during\n.   the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the\n.   supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   -   **CALIB_TILTED_MODEL** Coefficients tauX and tauY are enabled. To provide the\n.   backward compatibility, this extra flag should be explicitly specified to make the\n.   calibration function use the tilted sensor model and return 14 coefficients. If the flag is not\n.   set, the function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_FIX_TAUX_TAUY** The coefficients of the tilted sensor model are not changed during\n.   the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the\n.   supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   @param criteria Termination criteria for the iterative optimization algorithm.\n.   \n.   @return the overall RMS re-projection error.\n.   \n.   The function estimates the intrinsic camera parameters and extrinsic parameters for each of the\n.   views. The algorithm is based on @cite Zhang2000 and @cite BouguetMCT . The coordinates of 3D object\n.   points and their corresponding 2D projections in each view must be specified. That may be achieved\n.   by using an object with a known geometry and easily detectable feature points. Such an object is\n.   called a calibration rig or calibration pattern, and OpenCV has built-in support for a chessboard as\n.   a calibration rig (see findChessboardCorners ). Currently, initialization of intrinsic parameters\n.   (when CALIB_USE_INTRINSIC_GUESS is not set) is only implemented for planar calibration\n.   patterns (where Z-coordinates of the object points must be all zeros). 3D calibration rigs can also\n.   be used as long as initial cameraMatrix is provided.\n.   \n.   The algorithm performs the following steps:\n.   \n.   -   Compute the initial intrinsic parameters (the option only available for planar calibration\n.   patterns) or read them from the input parameters. The distortion coefficients are all set to\n.   zeros initially unless some of CALIB_FIX_K? are specified.\n.   \n.   -   Estimate the initial camera pose as if the intrinsic parameters have been already known. This is\n.   done using solvePnP .\n.   \n.   -   Run the global Levenberg-Marquardt optimization algorithm to minimize the reprojection error,\n.   that is, the total sum of squared distances between the observed feature points imagePoints and\n.   the projected (using the current estimates for camera parameters and the poses) object points\n.   objectPoints. See projectPoints for details.\n.   \n.   @note\n.   If you use a non-square (=non-NxN) grid and findChessboardCorners for calibration, and\n.   calibrateCamera returns bad values (zero distortion coefficients, an image center very far from\n.   (w/2-0.5,h/2-0.5), and/or large differences between \\f$f_x\\f$ and \\f$f_y\\f$ (ratios of 10:1 or more)),\n.   then you have probably used patternSize=cvSize(rows,cols) instead of using\n.   patternSize=cvSize(cols,rows) in findChessboardCorners .\n.   \n.   @sa\n.   findChessboardCorners, solvePnP, initCameraMatrix2D, stereoCalibrate, undistort"
    pass

def calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight):
    "calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight) -> fovx, fovy, focalLength, principalPoint, aspectRatio\n.   @brief Computes useful camera characteristics from the camera matrix.\n.   \n.   @param cameraMatrix Input camera matrix that can be estimated by calibrateCamera or\n.   stereoCalibrate .\n.   @param imageSize Input image size in pixels.\n.   @param apertureWidth Physical width in mm of the sensor.\n.   @param apertureHeight Physical height in mm of the sensor.\n.   @param fovx Output field of view in degrees along the horizontal sensor axis.\n.   @param fovy Output field of view in degrees along the vertical sensor axis.\n.   @param focalLength Focal length of the lens in mm.\n.   @param principalPoint Principal point in mm.\n.   @param aspectRatio \\f$f_y/f_x\\f$\n.   \n.   The function computes various useful camera characteristics from the previously estimated camera\n.   matrix.\n.   \n.   @note\n.   Do keep in mind that the unity measure 'mm' stands for whatever unit of measure one chooses for\n.   the chessboard pitch (it can thus be any value)."
    pass

def cartToPolar(x, y, magnitude=None, angle=None, angleInDegrees=None):
    'cartToPolar(x, y[, magnitude[, angle[, angleInDegrees]]]) -> magnitude, angle\n.   @brief Calculates the magnitude and angle of 2D vectors.\n.   \n.   The function cv::cartToPolar calculates either the magnitude, angle, or both\n.   for every 2D vector (x(I),y(I)):\n.   \\f[\\begin{array}{l} \\texttt{magnitude} (I)= \\sqrt{\\texttt{x}(I)^2+\\texttt{y}(I)^2} , \\\\ \\texttt{angle} (I)= \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))[ \\cdot180 / \\pi ] \\end{array}\\f]\n.   \n.   The angles are calculated with accuracy about 0.3 degrees. For the point\n.   (0,0), the angle is set to 0.\n.   @param x array of x-coordinates; this must be a single-precision or\n.   double-precision floating-point array.\n.   @param y array of y-coordinates, that must have the same size and same type as x.\n.   @param magnitude output array of magnitudes of the same size and type as x.\n.   @param angle output array of angles that has the same size and type as\n.   x; the angles are measured in radians (from 0 to 2\\*Pi) or in degrees (0 to 360 degrees).\n.   @param angleInDegrees a flag, indicating whether the angles are measured\n.   in radians (which is by default), or in degrees.\n.   @sa Sobel, Scharr'
    pass

def checkHardwareSupport(feature):
    'checkHardwareSupport(feature) -> retval\n.   @brief Returns true if the specified feature is supported by the host hardware.\n.   \n.   The function returns true if the host hardware supports the specified feature. When user calls\n.   setUseOptimized(false), the subsequent calls to checkHardwareSupport() will return false until\n.   setUseOptimized(true) is called. This way user can dynamically switch on and off the optimized code\n.   in OpenCV.\n.   @param feature The feature of interest, one of cv::CpuFeatures'
    pass

def checkRange(a, quiet=None, minVal=None, maxVal=None):
    'checkRange(a[, quiet[, minVal[, maxVal]]]) -> retval, pos\n.   @brief Checks every element of an input array for invalid values.\n.   \n.   The function cv::checkRange checks that every array element is neither NaN nor infinite. When minVal \\>\n.   -DBL_MAX and maxVal \\< DBL_MAX, the function also checks that each value is between minVal and\n.   maxVal. In case of multi-channel arrays, each channel is processed independently. If some values\n.   are out of range, position of the first outlier is stored in pos (when pos != NULL). Then, the\n.   function either returns false (when quiet=true) or throws an exception.\n.   @param a input array.\n.   @param quiet a flag, indicating whether the functions quietly return false when the array elements\n.   are out of range or they throw an exception.\n.   @param pos optional output parameter, when not NULL, must be a pointer to array of src.dims\n.   elements.\n.   @param minVal inclusive lower boundary of valid values range.\n.   @param maxVal exclusive upper boundary of valid values range.'
    pass

def circle(img, center, radius, color, thickness=None, lineType=None, shift=None):
    'circle(img, center, radius, color[, thickness[, lineType[, shift]]]) -> img\n.   @brief Draws a circle.\n.   \n.   The function cv::circle draws a simple or filled circle with a given center and radius.\n.   @param img Image where the circle is drawn.\n.   @param center Center of the circle.\n.   @param radius Radius of the circle.\n.   @param color Circle color.\n.   @param thickness Thickness of the circle outline, if positive. Negative values, like #FILLED,\n.   mean that a filled circle is to be drawn.\n.   @param lineType Type of the circle boundary. See #LineTypes\n.   @param shift Number of fractional bits in the coordinates of the center and in the radius value.'
    pass

def clipLine(imgRect, pt1, pt2):
    'clipLine(imgRect, pt1, pt2) -> retval, pt1, pt2\n.   @overload\n.   @param imgRect Image rectangle.\n.   @param pt1 First line point.\n.   @param pt2 Second line point.'
    pass

def colorChange(src, mask, dst=None, red_mul=None, green_mul=None, blue_mul=None):
    'colorChange(src, mask[, dst[, red_mul[, green_mul[, blue_mul]]]]) -> dst\n.   @brief Given an original color image, two differently colored versions of this image can be mixed\n.   seamlessly.\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param mask Input 8-bit 1 or 3-channel image.\n.   @param dst Output image with the same size and type as src .\n.   @param red_mul R-channel multiply factor.\n.   @param green_mul G-channel multiply factor.\n.   @param blue_mul B-channel multiply factor.\n.   \n.   Multiplication factor is between .5 to 2.5.'
    pass

def compare(src1, src2, cmpop, dst=None):
    'compare(src1, src2, cmpop[, dst]) -> dst\n.   @brief Performs the per-element comparison of two arrays or an array and scalar value.\n.   \n.   The function compares:\n.   *   Elements of two arrays when src1 and src2 have the same size:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\f]\n.   *   Elements of src1 with a scalar src2 when src2 is constructed from\n.   Scalar or has a single element:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1}(I) \\,\\texttt{cmpop}\\,  \\texttt{src2}\\f]\n.   *   src1 with elements of src2 when src1 is constructed from Scalar or\n.   has a single element:\n.   \\f[\\texttt{dst} (I) =  \\texttt{src1}  \\,\\texttt{cmpop}\\, \\texttt{src2} (I)\\f]\n.   When the comparison result is true, the corresponding element of output\n.   array is set to 255. The comparison operations can be replaced with the\n.   equivalent matrix expressions:\n.   @code{.cpp}\n.   Mat dst1 = src1 >= src2;\n.   Mat dst2 = src1 < 8;\n.   ...\n.   @endcode\n.   @param src1 first input array or a scalar; when it is an array, it must have a single channel.\n.   @param src2 second input array or a scalar; when it is an array, it must have a single channel.\n.   @param dst output array of type ref CV_8U that has the same size and the same number of channels as\n.   the input arrays.\n.   @param cmpop a flag, that specifies correspondence between the arrays (cv::CmpTypes)\n.   @sa checkRange, min, max, threshold'
    pass

def compareHist(H1, H2, method):
    'compareHist(H1, H2, method) -> retval\n.   @brief Compares two histograms.\n.   \n.   The function cv::compareHist compares two dense or two sparse histograms using the specified method.\n.   \n.   The function returns \\f$d(H_1, H_2)\\f$ .\n.   \n.   While the function works well with 1-, 2-, 3-dimensional dense histograms, it may not be suitable\n.   for high-dimensional sparse histograms. In such histograms, because of aliasing and sampling\n.   problems, the coordinates of non-zero histogram bins can slightly shift. To compare such histograms\n.   or more general sparse configurations of weighted points, consider using the #EMD function.\n.   \n.   @param H1 First compared histogram.\n.   @param H2 Second compared histogram of the same size as H1 .\n.   @param method Comparison method, see #HistCompMethods'
    pass

def completeSymm(m, lowerToUpper=None):
    'completeSymm(m[, lowerToUpper]) -> m\n.   @brief Copies the lower or the upper half of a square matrix to its another half.\n.   \n.   The function cv::completeSymm copies the lower or the upper half of a square matrix to\n.   its another half. The matrix diagonal remains unchanged:\n.   - \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i > j\\f$ if\n.   lowerToUpper=false\n.   - \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i < j\\f$ if\n.   lowerToUpper=true\n.   \n.   @param m input-output floating-point square matrix.\n.   @param lowerToUpper operation flag; if true, the lower half is copied to\n.   the upper half. Otherwise, the upper half is copied to the lower half.\n.   @sa flip, transpose'
    pass

def composeRT(rvec1, tvec1, rvec2, tvec2, rvec3=None, tvec3=None, dr3dr1=None, dr3dt1=None, dr3dr2=None, dr3dt2=None, dt3dr1=None, dt3dt1=None, dt3dr2=None, dt3dt2=None):
    'composeRT(rvec1, tvec1, rvec2, tvec2[, rvec3[, tvec3[, dr3dr1[, dr3dt1[, dr3dr2[, dr3dt2[, dt3dr1[, dt3dt1[, dt3dr2[, dt3dt2]]]]]]]]]]) -> rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2\n.   @brief Combines two rotation-and-shift transformations.\n.   \n.   @param rvec1 First rotation vector.\n.   @param tvec1 First translation vector.\n.   @param rvec2 Second rotation vector.\n.   @param tvec2 Second translation vector.\n.   @param rvec3 Output rotation vector of the superposition.\n.   @param tvec3 Output translation vector of the superposition.\n.   @param dr3dr1\n.   @param dr3dt1\n.   @param dr3dr2\n.   @param dr3dt2\n.   @param dt3dr1\n.   @param dt3dt1\n.   @param dt3dr2\n.   @param dt3dt2 Optional output derivatives of rvec3 or tvec3 with regard to rvec1, rvec2, tvec1 and\n.   tvec2, respectively.\n.   \n.   The functions compute:\n.   \n.   \\f[\\begin{array}{l} \\texttt{rvec3} =  \\mathrm{rodrigues} ^{-1} \\left ( \\mathrm{rodrigues} ( \\texttt{rvec2} )  \\cdot \\mathrm{rodrigues} ( \\texttt{rvec1} ) \\right )  \\\\ \\texttt{tvec3} =  \\mathrm{rodrigues} ( \\texttt{rvec2} )  \\cdot \\texttt{tvec1} +  \\texttt{tvec2} \\end{array} ,\\f]\n.   \n.   where \\f$\\mathrm{rodrigues}\\f$ denotes a rotation vector to a rotation matrix transformation, and\n.   \\f$\\mathrm{rodrigues}^{-1}\\f$ denotes the inverse transformation. See Rodrigues for details.\n.   \n.   Also, the functions can compute the derivatives of the output vectors with regards to the input\n.   vectors (see matMulDeriv ). The functions are used inside stereoCalibrate but can also be used in\n.   your own code where Levenberg-Marquardt or another gradient-based solver is used to optimize a\n.   function that contains a matrix multiplication.'
    pass

def computeCorrespondEpilines(points, whichImage, F, lines=None):
    'computeCorrespondEpilines(points, whichImage, F[, lines]) -> lines\n.   @brief For points in an image of a stereo pair, computes the corresponding epilines in the other image.\n.   \n.   @param points Input points. \\f$N \\times 1\\f$ or \\f$1 \\times N\\f$ matrix of type CV_32FC2 or\n.   vector\\<Point2f\\> .\n.   @param whichImage Index of the image (1 or 2) that contains the points .\n.   @param F Fundamental matrix that can be estimated using findFundamentalMat or stereoRectify .\n.   @param lines Output vector of the epipolar lines corresponding to the points in the other image.\n.   Each line \\f$ax + by + c=0\\f$ is encoded by 3 numbers \\f$(a, b, c)\\f$ .\n.   \n.   For every point in one of the two images of a stereo pair, the function finds the equation of the\n.   corresponding epipolar line in the other image.\n.   \n.   From the fundamental matrix definition (see findFundamentalMat ), line \\f$l^{(2)}_i\\f$ in the second\n.   image for the point \\f$p^{(1)}_i\\f$ in the first image (when whichImage=1 ) is computed as:\n.   \n.   \\f[l^{(2)}_i = F p^{(1)}_i\\f]\n.   \n.   And vice versa, when whichImage=2, \\f$l^{(1)}_i\\f$ is computed from \\f$p^{(2)}_i\\f$ as:\n.   \n.   \\f[l^{(1)}_i = F^T p^{(2)}_i\\f]\n.   \n.   Line coefficients are defined up to a scale. They are normalized so that \\f$a_i^2+b_i^2=1\\f$ .'
    pass

def connectedComponents(image, labels=None, connectivity=None, ltype=None):
    'connectedComponents(image[, labels[, connectivity[, ltype]]]) -> retval, labels\n.   @overload\n.   \n.   @param image the 8-bit single-channel image to be labeled\n.   @param labels destination labeled image\n.   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively\n.   @param ltype output image label type. Currently CV_32S and CV_16U are supported.'
    pass

def connectedComponentsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None):
    "connectedComponentsWithAlgorithm(image, connectivity, ltype, ccltype[, labels]) -> retval, labels\n.   @brief computes the connected components labeled image of boolean image\n.   \n.   image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0\n.   represents the background label. ltype specifies the output label image type, an important\n.   consideration based on the total number of labels or alternatively the total number of pixels in\n.   the source image. ccltype specifies the connected components labeling algorithm to use, currently\n.   Grana (BBDT) and Wu's (SAUF) algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes\n.   for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not.\n.   This function uses parallel version of both Grana and Wu's algorithms if at least one allowed\n.   parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs.\n.   \n.   @param image the 8-bit single-channel image to be labeled\n.   @param labels destination labeled image\n.   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively\n.   @param ltype output image label type. Currently CV_32S and CV_16U are supported.\n.   @param ccltype connected components algorithm type (see the #ConnectedComponentsAlgorithmsTypes)."
    pass

def connectedComponentsWithStats(image, labels=None, stats=None, centroids=None, connectivity=None, ltype=None):
    'connectedComponentsWithStats(image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]) -> retval, labels, stats, centroids\n.   @overload\n.   @param image the 8-bit single-channel image to be labeled\n.   @param labels destination labeled image\n.   @param stats statistics output for each label, including the background label, see below for\n.   available statistics. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of\n.   #ConnectedComponentsTypes. The data type is CV_32S.\n.   @param centroids centroid output for each label, including the background label. Centroids are\n.   accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.\n.   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively\n.   @param ltype output image label type. Currently CV_32S and CV_16U are supported.'
    pass

def connectedComponentsWithStatsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None, stats=None, centroids=None):
    "connectedComponentsWithStatsWithAlgorithm(image, connectivity, ltype, ccltype[, labels[, stats[, centroids]]]) -> retval, labels, stats, centroids\n.   @brief computes the connected components labeled image of boolean image and also produces a statistics output for each label\n.   \n.   image with 4 or 8 way connectivity - returns N, the total number of labels [0, N-1] where 0\n.   represents the background label. ltype specifies the output label image type, an important\n.   consideration based on the total number of labels or alternatively the total number of pixels in\n.   the source image. ccltype specifies the connected components labeling algorithm to use, currently\n.   Grana's (BBDT) and Wu's (SAUF) algorithms are supported, see the #ConnectedComponentsAlgorithmsTypes\n.   for details. Note that SAUF algorithm forces a row major ordering of labels while BBDT does not.\n.   This function uses parallel version of both Grana and Wu's algorithms (statistics included) if at least one allowed\n.   parallel framework is enabled and if the rows of the image are at least twice the number returned by #getNumberOfCPUs.\n.   \n.   @param image the 8-bit single-channel image to be labeled\n.   @param labels destination labeled image\n.   @param stats statistics output for each label, including the background label, see below for\n.   available statistics. Statistics are accessed via stats(label, COLUMN) where COLUMN is one of\n.   #ConnectedComponentsTypes. The data type is CV_32S.\n.   @param centroids centroid output for each label, including the background label. Centroids are\n.   accessed via centroids(label, 0) for x and centroids(label, 1) for y. The data type CV_64F.\n.   @param connectivity 8 or 4 for 8-way or 4-way connectivity respectively\n.   @param ltype output image label type. Currently CV_32S and CV_16U are supported.\n.   @param ccltype connected components algorithm type (see #ConnectedComponentsAlgorithmsTypes)."
    pass

def contourArea(contour, oriented=None):
    'contourArea(contour[, oriented]) -> retval\n.   @brief Calculates a contour area.\n.   \n.   The function computes a contour area. Similarly to moments , the area is computed using the Green\n.   formula. Thus, the returned area and the number of non-zero pixels, if you draw the contour using\n.   #drawContours or #fillPoly , can be different. Also, the function will most certainly give a wrong\n.   results for contours with self-intersections.\n.   \n.   Example:\n.   @code\n.   vector<Point> contour;\n.   contour.push_back(Point2f(0, 0));\n.   contour.push_back(Point2f(10, 0));\n.   contour.push_back(Point2f(10, 10));\n.   contour.push_back(Point2f(5, 4));\n.   \n.   double area0 = contourArea(contour);\n.   vector<Point> approx;\n.   approxPolyDP(contour, approx, 5, true);\n.   double area1 = contourArea(approx);\n.   \n.   cout << "area0 =" << area0 << endl <<\n.   "area1 =" << area1 << endl <<\n.   "approx poly vertices" << approx.size() << endl;\n.   @endcode\n.   @param contour Input vector of 2D points (contour vertices), stored in std::vector or Mat.\n.   @param oriented Oriented area flag. If it is true, the function returns a signed area value,\n.   depending on the contour orientation (clockwise or counter-clockwise). Using this feature you can\n.   determine orientation of a contour by taking the sign of an area. By default, the parameter is\n.   false, which means that the absolute value is returned.'
    pass

def convertFp16(src, dst=None):
    'convertFp16(src[, dst]) -> dst\n.   @brief Converts an array to half precision floating number.\n.   \n.   This function converts FP32 (single precision floating point) from/to FP16 (half precision floating point). CV_16S format is used to represent FP16 data.\n.   There are two use modes (src -> dst): CV_32F -> CV_16S and CV_16S -> CV_32F. The input array has to have type of CV_32F or\n.   CV_16S to represent the bit depth. If the input array is neither of them, the function will raise an error.\n.   The format of half precision floating point is defined in IEEE 754-2008.\n.   \n.   @param src input array.\n.   @param dst output array.'
    pass

def convertMaps(map1, map2, dstmap1type, dstmap1=None, dstmap2=None, nninterpolation=None):
    'convertMaps(map1, map2, dstmap1type[, dstmap1[, dstmap2[, nninterpolation]]]) -> dstmap1, dstmap2\n.   @brief Converts image transformation maps from one representation to another.\n.   \n.   The function converts a pair of maps for remap from one representation to another. The following\n.   options ( (map1.type(), map2.type()) \\f$\\rightarrow\\f$ (dstmap1.type(), dstmap2.type()) ) are\n.   supported:\n.   \n.   - \\f$\\texttt{(CV_32FC1, CV_32FC1)} \\rightarrow \\texttt{(CV_16SC2, CV_16UC1)}\\f$. This is the\n.   most frequently used conversion operation, in which the original floating-point maps (see remap )\n.   are converted to a more compact and much faster fixed-point representation. The first output array\n.   contains the rounded coordinates and the second array (created only when nninterpolation=false )\n.   contains indices in the interpolation tables.\n.   \n.   - \\f$\\texttt{(CV_32FC2)} \\rightarrow \\texttt{(CV_16SC2, CV_16UC1)}\\f$. The same as above but\n.   the original maps are stored in one 2-channel matrix.\n.   \n.   - Reverse conversion. Obviously, the reconstructed floating-point maps will not be exactly the same\n.   as the originals.\n.   \n.   @param map1 The first input map of type CV_16SC2, CV_32FC1, or CV_32FC2 .\n.   @param map2 The second input map of type CV_16UC1, CV_32FC1, or none (empty matrix),\n.   respectively.\n.   @param dstmap1 The first output map that has the type dstmap1type and the same size as src .\n.   @param dstmap2 The second output map.\n.   @param dstmap1type Type of the first output map that should be CV_16SC2, CV_32FC1, or\n.   CV_32FC2 .\n.   @param nninterpolation Flag indicating whether the fixed-point maps are used for the\n.   nearest-neighbor or for a more complex interpolation.\n.   \n.   @sa  remap, undistort, initUndistortRectifyMap'
    pass

def convertPointsFromHomogeneous(src, dst=None):
    'convertPointsFromHomogeneous(src[, dst]) -> dst\n.   @brief Converts points from homogeneous to Euclidean space.\n.   \n.   @param src Input vector of N-dimensional points.\n.   @param dst Output vector of N-1-dimensional points.\n.   \n.   The function converts points homogeneous to Euclidean space using perspective projection. That is,\n.   each point (x1, x2, ... x(n-1), xn) is converted to (x1/xn, x2/xn, ..., x(n-1)/xn). When xn=0, the\n.   output point coordinates will be (0,0,0,...).'
    pass

def convertPointsToHomogeneous(src, dst=None):
    "convertPointsToHomogeneous(src[, dst]) -> dst\n.   @brief Converts points from Euclidean to homogeneous space.\n.   \n.   @param src Input vector of N-dimensional points.\n.   @param dst Output vector of N+1-dimensional points.\n.   \n.   The function converts points from Euclidean to homogeneous space by appending 1's to the tuple of\n.   point coordinates. That is, each point (x1, x2, ..., xn) is converted to (x1, x2, ..., xn, 1)."
    pass

def convertScaleAbs(src, dst=None, alpha=None, beta=None):
    'convertScaleAbs(src[, dst[, alpha[, beta]]]) -> dst\n.   @brief Scales, calculates absolute values, and converts the result to 8-bit.\n.   \n.   On each element of the input array, the function convertScaleAbs\n.   performs three operations sequentially: scaling, taking an absolute\n.   value, conversion to an unsigned 8-bit type:\n.   \\f[\\texttt{dst} (I)= \\texttt{saturate\\_cast<uchar>} (| \\texttt{src} (I)* \\texttt{alpha} +  \\texttt{beta} |)\\f]\n.   In case of multi-channel arrays, the function processes each channel\n.   independently. When the output is not 8-bit, the operation can be\n.   emulated by calling the Mat::convertTo method (or by using matrix\n.   expressions) and then by calculating an absolute value of the result.\n.   For example:\n.   @code{.cpp}\n.   Mat_<float> A(30,30);\n.   randu(A, Scalar(-100), Scalar(100));\n.   Mat_<float> B = A*5 + 3;\n.   B = abs(B);\n.   // Mat_<float> B = abs(A*5+3) will also do the job,\n.   // but it will allocate a temporary matrix\n.   @endcode\n.   @param src input array.\n.   @param dst output array.\n.   @param alpha optional scale factor.\n.   @param beta optional delta added to the scaled values.\n.   @sa  Mat::convertTo, cv::abs(const Mat&)'
    pass

def convexHull(points, hull=None, clockwise=None, returnPoints=None):
    "convexHull(points[, hull[, clockwise[, returnPoints]]]) -> hull\n.   @brief Finds the convex hull of a point set.\n.   \n.   The function cv::convexHull finds the convex hull of a 2D point set using the Sklansky's algorithm @cite Sklansky82\n.   that has *O(N logN)* complexity in the current implementation.\n.   \n.   @param points Input 2D point set, stored in std::vector or Mat.\n.   @param hull Output convex hull. It is either an integer vector of indices or vector of points. In\n.   the first case, the hull elements are 0-based indices of the convex hull points in the original\n.   array (since the set of convex hull points is a subset of the original point set). In the second\n.   case, hull elements are the convex hull points themselves.\n.   @param clockwise Orientation flag. If it is true, the output convex hull is oriented clockwise.\n.   Otherwise, it is oriented counter-clockwise. The assumed coordinate system has its X axis pointing\n.   to the right, and its Y axis pointing upwards.\n.   @param returnPoints Operation flag. In case of a matrix, when the flag is true, the function\n.   returns convex hull points. Otherwise, it returns indices of the convex hull points. When the\n.   output array is std::vector, the flag is ignored, and the output depends on the type of the\n.   vector: std::vector\\<int\\> implies returnPoints=false, std::vector\\<Point\\> implies\n.   returnPoints=true.\n.   \n.   @note `points` and `hull` should be different arrays, inplace processing isn't supported."
    pass

def convexityDefects(contour, convexhull, convexityDefects=None):
    'convexityDefects(contour, convexhull[, convexityDefects]) -> convexityDefects\n.   @brief Finds the convexity defects of a contour.\n.   \n.   The figure below displays convexity defects of a hand contour:\n.   \n.   ![image](pics/defects.png)\n.   \n.   @param contour Input contour.\n.   @param convexhull Convex hull obtained using convexHull that should contain indices of the contour\n.   points that make the hull.\n.   @param convexityDefects The output vector of convexity defects. In C++ and the new Python/Java\n.   interface each convexity defect is represented as 4-element integer vector (a.k.a. #Vec4i):\n.   (start_index, end_index, farthest_pt_index, fixpt_depth), where indices are 0-based indices\n.   in the original contour of the convexity defect beginning, end and the farthest point, and\n.   fixpt_depth is fixed-point approximation (with 8 fractional bits) of the distance between the\n.   farthest contour point and the hull. That is, to get the floating-point value of the depth will be\n.   fixpt_depth/256.0.'
    pass

def copyMakeBorder(src, top, bottom, left, right, borderType, dst=None, value=None):
    'copyMakeBorder(src, top, bottom, left, right, borderType[, dst[, value]]) -> dst\n.   @brief Forms a border around an image.\n.   \n.   The function copies the source image into the middle of the destination image. The areas to the\n.   left, to the right, above and below the copied source image will be filled with extrapolated\n.   pixels. This is not what filtering functions based on it do (they extrapolate pixels on-fly), but\n.   what other more complex functions, including your own, may do to simplify image boundary handling.\n.   \n.   The function supports the mode when src is already in the middle of dst . In this case, the\n.   function does not copy src itself but simply constructs the border, for example:\n.   \n.   @code{.cpp}\n.   // let border be the same in all directions\n.   int border=2;\n.   // constructs a larger image to fit both the image and the border\n.   Mat gray_buf(rgb.rows + border*2, rgb.cols + border*2, rgb.depth());\n.   // select the middle part of it w/o copying data\n.   Mat gray(gray_canvas, Rect(border, border, rgb.cols, rgb.rows));\n.   // convert image from RGB to grayscale\n.   cvtColor(rgb, gray, COLOR_RGB2GRAY);\n.   // form a border in-place\n.   copyMakeBorder(gray, gray_buf, border, border,\n.   border, border, BORDER_REPLICATE);\n.   // now do some custom filtering ...\n.   ...\n.   @endcode\n.   @note When the source image is a part (ROI) of a bigger image, the function will try to use the\n.   pixels outside of the ROI to form a border. To disable this feature and always do extrapolation, as\n.   if src was not a ROI, use borderType | #BORDER_ISOLATED.\n.   \n.   @param src Source image.\n.   @param dst Destination image of the same type as src and the size Size(src.cols+left+right,\n.   src.rows+top+bottom) .\n.   @param top\n.   @param bottom\n.   @param left\n.   @param right Parameter specifying how many pixels in each direction from the source image rectangle\n.   to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 pixel-wide border needs\n.   to be built.\n.   @param borderType Border type. See borderInterpolate for details.\n.   @param value Border value if borderType==BORDER_CONSTANT .\n.   \n.   @sa  borderInterpolate'
    pass

def cornerEigenValsAndVecs(src, blockSize, ksize, dst=None, borderType=None):
    'cornerEigenValsAndVecs(src, blockSize, ksize[, dst[, borderType]]) -> dst\n.   @brief Calculates eigenvalues and eigenvectors of image blocks for corner detection.\n.   \n.   For every pixel \\f$p\\f$ , the function cornerEigenValsAndVecs considers a blockSize \\f$\\times\\f$ blockSize\n.   neighborhood \\f$S(p)\\f$ . It calculates the covariation matrix of derivatives over the neighborhood as:\n.   \n.   \\f[M =  \\begin{bmatrix} \\sum _{S(p)}(dI/dx)^2 &  \\sum _{S(p)}dI/dx dI/dy  \\\\ \\sum _{S(p)}dI/dx dI/dy &  \\sum _{S(p)}(dI/dy)^2 \\end{bmatrix}\\f]\n.   \n.   where the derivatives are computed using the Sobel operator.\n.   \n.   After that, it finds eigenvectors and eigenvalues of \\f$M\\f$ and stores them in the destination image as\n.   \\f$(\\lambda_1, \\lambda_2, x_1, y_1, x_2, y_2)\\f$ where\n.   \n.   -   \\f$\\lambda_1, \\lambda_2\\f$ are the non-sorted eigenvalues of \\f$M\\f$\n.   -   \\f$x_1, y_1\\f$ are the eigenvectors corresponding to \\f$\\lambda_1\\f$\n.   -   \\f$x_2, y_2\\f$ are the eigenvectors corresponding to \\f$\\lambda_2\\f$\n.   \n.   The output of the function can be used for robust edge or corner detection.\n.   \n.   @param src Input single-channel 8-bit or floating-point image.\n.   @param dst Image to store the results. It has the same size as src and the type CV_32FC(6) .\n.   @param blockSize Neighborhood size (see details below).\n.   @param ksize Aperture parameter for the Sobel operator.\n.   @param borderType Pixel extrapolation method. See #BorderTypes.\n.   \n.   @sa  cornerMinEigenVal, cornerHarris, preCornerDetect'
    pass

def cornerHarris(src, blockSize, ksize, k, dst=None, borderType=None):
    'cornerHarris(src, blockSize, ksize, k[, dst[, borderType]]) -> dst\n.   @brief Harris corner detector.\n.   \n.   The function runs the Harris corner detector on the image. Similarly to cornerMinEigenVal and\n.   cornerEigenValsAndVecs , for each pixel \\f$(x, y)\\f$ it calculates a \\f$2\\times2\\f$ gradient covariance\n.   matrix \\f$M^{(x,y)}\\f$ over a \\f$\\texttt{blockSize} \\times \\texttt{blockSize}\\f$ neighborhood. Then, it\n.   computes the following characteristic:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\mathrm{det} M^{(x,y)} - k  \\cdot \\left ( \\mathrm{tr} M^{(x,y)} \\right )^2\\f]\n.   \n.   Corners in the image can be found as the local maxima of this response map.\n.   \n.   @param src Input single-channel 8-bit or floating-point image.\n.   @param dst Image to store the Harris detector responses. It has the type CV_32FC1 and the same\n.   size as src .\n.   @param blockSize Neighborhood size (see the details on #cornerEigenValsAndVecs ).\n.   @param ksize Aperture parameter for the Sobel operator.\n.   @param k Harris detector free parameter. See the formula above.\n.   @param borderType Pixel extrapolation method. See #BorderTypes.'
    pass

def cornerMinEigenVal(src, blockSize, dst=None, ksize=None, borderType=None):
    'cornerMinEigenVal(src, blockSize[, dst[, ksize[, borderType]]]) -> dst\n.   @brief Calculates the minimal eigenvalue of gradient matrices for corner detection.\n.   \n.   The function is similar to cornerEigenValsAndVecs but it calculates and stores only the minimal\n.   eigenvalue of the covariance matrix of derivatives, that is, \\f$\\min(\\lambda_1, \\lambda_2)\\f$ in terms\n.   of the formulae in the cornerEigenValsAndVecs description.\n.   \n.   @param src Input single-channel 8-bit or floating-point image.\n.   @param dst Image to store the minimal eigenvalues. It has the type CV_32FC1 and the same size as\n.   src .\n.   @param blockSize Neighborhood size (see the details on #cornerEigenValsAndVecs ).\n.   @param ksize Aperture parameter for the Sobel operator.\n.   @param borderType Pixel extrapolation method. See #BorderTypes.'
    pass

def cornerSubPix(image, corners, winSize, zeroZone, criteria):
    'cornerSubPix(image, corners, winSize, zeroZone, criteria) -> corners\n.   @brief Refines the corner locations.\n.   \n.   The function iterates to find the sub-pixel accurate location of corners or radial saddle points, as\n.   shown on the figure below.\n.   \n.   ![image](pics/cornersubpix.png)\n.   \n.   Sub-pixel accurate corner locator is based on the observation that every vector from the center \\f$q\\f$\n.   to a point \\f$p\\f$ located within a neighborhood of \\f$q\\f$ is orthogonal to the image gradient at \\f$p\\f$\n.   subject to image and measurement noise. Consider the expression:\n.   \n.   \\f[\\epsilon _i = {DI_{p_i}}^T  \\cdot (q - p_i)\\f]\n.   \n.   where \\f${DI_{p_i}}\\f$ is an image gradient at one of the points \\f$p_i\\f$ in a neighborhood of \\f$q\\f$ . The\n.   value of \\f$q\\f$ is to be found so that \\f$\\epsilon_i\\f$ is minimized. A system of equations may be set up\n.   with \\f$\\epsilon_i\\f$ set to zero:\n.   \n.   \\f[\\sum _i(DI_{p_i}  \\cdot {DI_{p_i}}^T) \\cdot q -  \\sum _i(DI_{p_i}  \\cdot {DI_{p_i}}^T  \\cdot p_i)\\f]\n.   \n.   where the gradients are summed within a neighborhood ("search window") of \\f$q\\f$ . Calling the first\n.   gradient term \\f$G\\f$ and the second gradient term \\f$b\\f$ gives:\n.   \n.   \\f[q = G^{-1}  \\cdot b\\f]\n.   \n.   The algorithm sets the center of the neighborhood window at this new center \\f$q\\f$ and then iterates\n.   until the center stays within a set threshold.\n.   \n.   @param image Input single-channel, 8-bit or float image.\n.   @param corners Initial coordinates of the input corners and refined coordinates provided for\n.   output.\n.   @param winSize Half of the side length of the search window. For example, if winSize=Size(5,5) ,\n.   then a \\f$(5*2+1) \\times (5*2+1) = 11 \\times 11\\f$ search window is used.\n.   @param zeroZone Half of the size of the dead region in the middle of the search zone over which\n.   the summation in the formula below is not done. It is used sometimes to avoid possible\n.   singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such\n.   a size.\n.   @param criteria Criteria for termination of the iterative process of corner refinement. That is,\n.   the process of corner position refinement stops either after criteria.maxCount iterations or when\n.   the corner position moves by less than criteria.epsilon on some iteration.'
    pass

def correctMatches(F, points1, points2, newPoints1=None, newPoints2=None):
    'correctMatches(F, points1, points2[, newPoints1[, newPoints2]]) -> newPoints1, newPoints2\n.   @brief Refines coordinates of corresponding points.\n.   \n.   @param F 3x3 fundamental matrix.\n.   @param points1 1xN array containing the first set of points.\n.   @param points2 1xN array containing the second set of points.\n.   @param newPoints1 The optimized points1.\n.   @param newPoints2 The optimized points2.\n.   \n.   The function implements the Optimal Triangulation Method (see Multiple View Geometry for details).\n.   For each given point correspondence points1[i] \\<-\\> points2[i], and a fundamental matrix F, it\n.   computes the corrected correspondences newPoints1[i] \\<-\\> newPoints2[i] that minimize the geometric\n.   error \\f$d(points1[i], newPoints1[i])^2 + d(points2[i],newPoints2[i])^2\\f$ (where \\f$d(a,b)\\f$ is the\n.   geometric distance between points \\f$a\\f$ and \\f$b\\f$ ) subject to the epipolar constraint\n.   \\f$newPoints2^T * F * newPoints1 = 0\\f$ .'
    pass

def countNonZero(src):
    'countNonZero(src) -> retval\n.   @brief Counts non-zero array elements.\n.   \n.   The function returns the number of non-zero elements in src :\n.   \\f[\\sum _{I: \\; \\texttt{src} (I) \\ne0 } 1\\f]\n.   @param src single-channel array.\n.   @sa  mean, meanStdDev, norm, minMaxLoc, calcCovarMatrix'
    pass

def createAffineTransformer(fullAffine):
    'createAffineTransformer(fullAffine) -> retval\n.   Complete constructor'
    pass

def createAlignMTB(max_bits=None, exclude_range=None, cut=None):
    'createAlignMTB([, max_bits[, exclude_range[, cut]]]) -> retval\n.   @brief Creates AlignMTB object\n.   \n.   @param max_bits logarithm to the base 2 of maximal shift in each dimension. Values of 5 and 6 are\n.   usually good enough (31 and 63 pixels shift respectively).\n.   @param exclude_range range for exclusion bitmap that is constructed to suppress noise around the\n.   median value.\n.   @param cut if true cuts images, otherwise fills the new regions with zeros.'
    pass

def createBackgroundSubtractorKNN(history=None, dist2Threshold=None, detectShadows=None):
    'createBackgroundSubtractorKNN([, history[, dist2Threshold[, detectShadows]]]) -> retval\n.   @brief Creates KNN Background Subtractor\n.   \n.   @param history Length of the history.\n.   @param dist2Threshold Threshold on the squared distance between the pixel and the sample to decide\n.   whether a pixel is close to that sample. This parameter does not affect the background update.\n.   @param detectShadows If true, the algorithm will detect shadows and mark them. It decreases the\n.   speed a bit, so if you do not need this feature, set the parameter to false.'
    pass

def createBackgroundSubtractorMOG2(history=None, varThreshold=None, detectShadows=None):
    'createBackgroundSubtractorMOG2([, history[, varThreshold[, detectShadows]]]) -> retval\n.   @brief Creates MOG2 Background Subtractor\n.   \n.   @param history Length of the history.\n.   @param varThreshold Threshold on the squared Mahalanobis distance between the pixel and the model\n.   to decide whether a pixel is well described by the background model. This parameter does not\n.   affect the background update.\n.   @param detectShadows If true, the algorithm will detect shadows and mark them. It decreases the\n.   speed a bit, so if you do not need this feature, set the parameter to false.'
    pass

def createButton(buttonName, onChange, userData=None, buttonType=None, initialButtonState=None):
    'createButton(buttonName, onChange [, userData, buttonType, initialButtonState]) -> None'
    pass

def createCLAHE(clipLimit=None, tileGridSize=None):
    'createCLAHE([, clipLimit[, tileGridSize]]) -> retval\n.   @brief Creates implementation for cv::CLAHE .\n.   \n.   @param clipLimit Threshold for contrast limiting.\n.   @param tileGridSize Size of grid for histogram equalization. Input image will be divided into\n.   equally sized rectangular tiles. tileGridSize defines the number of tiles in row and column.'
    pass

def createCalibrateDebevec(samples=None, lambda_=None, random=None):
    'createCalibrateDebevec([, samples[, lambda[, random]]]) -> retval\n.   @brief Creates CalibrateDebevec object\n.   \n.   @param samples number of pixel locations to use\n.   @param lambda smoothness term weight. Greater values produce smoother results, but can alter the\n.   response.\n.   @param random if true sample pixel locations are chosen at random, otherwise they form a\n.   rectangular grid.'
    pass

def createCalibrateRobertson(max_iter=None, threshold=None):
    'createCalibrateRobertson([, max_iter[, threshold]]) -> retval\n.   @brief Creates CalibrateRobertson object\n.   \n.   @param max_iter maximal number of Gauss-Seidel solver iterations.\n.   @param threshold target difference between results of two successive steps of the minimization.'
    pass

def createChiHistogramCostExtractor(nDummies=None, defaultCost=None):
    'createChiHistogramCostExtractor([, nDummies[, defaultCost]]) -> retval\n.'
    pass

def createEMDHistogramCostExtractor(flag=None, nDummies=None, defaultCost=None):
    'createEMDHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval\n.'
    pass

def createEMDL1HistogramCostExtractor(nDummies=None, defaultCost=None):
    'createEMDL1HistogramCostExtractor([, nDummies[, defaultCost]]) -> retval\n.'
    pass

def createHanningWindow(winSize, type, dst=None):
    'createHanningWindow(winSize, type[, dst]) -> dst\n.   @brief This function computes a Hanning window coefficients in two dimensions.\n.   \n.   See (http://en.wikipedia.org/wiki/Hann_function) and (http://en.wikipedia.org/wiki/Window_function)\n.   for more information.\n.   \n.   An example is shown below:\n.   @code\n.   // create hanning window of size 100x100 and type CV_32F\n.   Mat hann;\n.   createHanningWindow(hann, Size(100, 100), CV_32F);\n.   @endcode\n.   @param dst Destination array to place Hann coefficients in\n.   @param winSize The window size specifications (both width and height must be > 1)\n.   @param type Created array type'
    pass

def createHausdorffDistanceExtractor(distanceFlag=None, rankProp=None):
    'createHausdorffDistanceExtractor([, distanceFlag[, rankProp]]) -> retval\n.'
    pass

def createLineSegmentDetector(_refine=None, _scale=None, _sigma_scale=None, _quant=None, _ang_th=None, _log_eps=None, _density_th=None, _n_bins=None):
    'createLineSegmentDetector([, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]) -> retval\n.   @brief Creates a smart pointer to a LineSegmentDetector object and initializes it.\n.   \n.   The LineSegmentDetector algorithm is defined using the standard values. Only advanced users may want\n.   to edit those, as to tailor it for their own application.\n.   \n.   @param _refine The way found lines will be refined, see #LineSegmentDetectorModes\n.   @param _scale The scale of the image that will be used to find the lines. Range (0..1].\n.   @param _sigma_scale Sigma for Gaussian filter. It is computed as sigma = _sigma_scale/_scale.\n.   @param _quant Bound to the quantization error on the gradient norm.\n.   @param _ang_th Gradient angle tolerance in degrees.\n.   @param _log_eps Detection threshold: -log10(NFA) \\> log_eps. Used only when advance refinement\n.   is chosen.\n.   @param _density_th Minimal density of aligned region points in the enclosing rectangle.\n.   @param _n_bins Number of bins in pseudo-ordering of gradient modulus.'
    pass

def createMergeDebevec():
    'createMergeDebevec() -> retval\n.   @brief Creates MergeDebevec object'
    pass

def createMergeMertens(contrast_weight=None, saturation_weight=None, exposure_weight=None):
    'createMergeMertens([, contrast_weight[, saturation_weight[, exposure_weight]]]) -> retval\n.   @brief Creates MergeMertens object\n.   \n.   @param contrast_weight contrast measure weight. See MergeMertens.\n.   @param saturation_weight saturation measure weight\n.   @param exposure_weight well-exposedness measure weight'
    pass

def createMergeRobertson():
    'createMergeRobertson() -> retval\n.   @brief Creates MergeRobertson object'
    pass

def createNormHistogramCostExtractor(flag=None, nDummies=None, defaultCost=None):
    'createNormHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval\n.'
    pass

def createOptFlow_DualTVL1():
    'createOptFlow_DualTVL1() -> retval\n.   @brief Creates instance of cv::DenseOpticalFlow'
    pass

def createShapeContextDistanceExtractor(nAngularBins=None, nRadialBins=None, innerRadius=None, outerRadius=None, iterations=None, comparer=None, transformer=None):
    'createShapeContextDistanceExtractor([, nAngularBins[, nRadialBins[, innerRadius[, outerRadius[, iterations[, comparer[, transformer]]]]]]]) -> retval\n.'
    pass

def createStitcher(try_use_gpu=None):
    'createStitcher([, try_use_gpu]) -> retval\n.'
    pass

def createStitcherScans(try_use_gpu=None):
    'createStitcherScans([, try_use_gpu]) -> retval\n.'
    pass

def createThinPlateSplineShapeTransformer(regularizationParameter=None):
    'createThinPlateSplineShapeTransformer([, regularizationParameter]) -> retval\n.   Complete constructor'
    pass

def createTonemap(gamma=None):
    'createTonemap([, gamma]) -> retval\n.   @brief Creates simple linear mapper with gamma correction\n.   \n.   @param gamma positive value for gamma correction. Gamma value of 1.0 implies no correction, gamma\n.   equal to 2.2f is suitable for most displays.\n.   Generally gamma \\> 1 brightens the image and gamma \\< 1 darkens it.'
    pass

def createTonemapDrago(gamma=None, saturation=None, bias=None):
    'createTonemapDrago([, gamma[, saturation[, bias]]]) -> retval\n.   @brief Creates TonemapDrago object\n.   \n.   @param gamma gamma value for gamma correction. See createTonemap\n.   @param saturation positive saturation enhancement value. 1.0 preserves saturation, values greater\n.   than 1 increase saturation and values less than 1 decrease it.\n.   @param bias value for bias function in [0, 1] range. Values from 0.7 to 0.9 usually give best\n.   results, default value is 0.85.'
    pass

def createTonemapDurand(gamma=None, contrast=None, saturation=None, sigma_space=None, sigma_color=None):
    'createTonemapDurand([, gamma[, contrast[, saturation[, sigma_space[, sigma_color]]]]]) -> retval\n.   @brief Creates TonemapDurand object\n.   \n.   @param gamma gamma value for gamma correction. See createTonemap\n.   @param contrast resulting contrast on logarithmic scale, i. e. log(max / min), where max and min\n.   are maximum and minimum luminance values of the resulting image.\n.   @param saturation saturation enhancement value. See createTonemapDrago\n.   @param sigma_space bilateral filter sigma in color space\n.   @param sigma_color bilateral filter sigma in coordinate space'
    pass

def createTonemapMantiuk(gamma=None, scale=None, saturation=None):
    'createTonemapMantiuk([, gamma[, scale[, saturation]]]) -> retval\n.   @brief Creates TonemapMantiuk object\n.   \n.   @param gamma gamma value for gamma correction. See createTonemap\n.   @param scale contrast scale factor. HVS response is multiplied by this parameter, thus compressing\n.   dynamic range. Values from 0.6 to 0.9 produce best results.\n.   @param saturation saturation enhancement value. See createTonemapDrago'
    pass

def createTonemapReinhard(gamma=None, intensity=None, light_adapt=None, color_adapt=None):
    "createTonemapReinhard([, gamma[, intensity[, light_adapt[, color_adapt]]]]) -> retval\n.   @brief Creates TonemapReinhard object\n.   \n.   @param gamma gamma value for gamma correction. See createTonemap\n.   @param intensity result intensity in [-8, 8] range. Greater intensity produces brighter results.\n.   @param light_adapt light adaptation in [0, 1] range. If 1 adaptation is based only on pixel\n.   value, if 0 it's global, otherwise it's a weighted mean of this two cases.\n.   @param color_adapt chromatic adaptation in [0, 1] range. If 1 channels are treated independently,\n.   if 0 adaptation level is the same for each channel."
    pass

def createTrackbar(trackbarName, windowName, value, count, onChange):
    'createTrackbar(trackbarName, windowName, value, count, onChange) -> None'
    pass

def cubeRoot(val):
    'cubeRoot(val) -> retval\n.   @brief Computes the cube root of an argument.\n.   \n.   The function cubeRoot computes \\f$\\sqrt[3]{\\texttt{val}}\\f$. Negative arguments are handled correctly.\n.   NaN and Inf are not handled. The accuracy approaches the maximum possible accuracy for\n.   single-precision data.\n.   @param val A function argument.'
    pass

def cvtColor(src, code, dst=None, dstCn=None):
    'cvtColor(src, code[, dst[, dstCn]]) -> dst\n.   @brief Converts an image from one color space to another.\n.   \n.   The function converts an input image from one color space to another. In case of a transformation\n.   to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note\n.   that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the\n.   bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue\n.   component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and\n.   sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on.\n.   \n.   The conventional ranges for R, G, and B channel values are:\n.   -   0 to 255 for CV_8U images\n.   -   0 to 65535 for CV_16U images\n.   -   0 to 1 for CV_32F images\n.   \n.   In case of linear transformations, the range does not matter. But in case of a non-linear\n.   transformation, an input RGB image should be normalized to the proper value range to get the correct\n.   results, for example, for RGB \\f$\\rightarrow\\f$ L\\*u\\*v\\* transformation. For example, if you have a\n.   32-bit floating-point image directly converted from an 8-bit image without any scaling, then it will\n.   have the 0..255 value range instead of 0..1 assumed by the function. So, before calling #cvtColor ,\n.   you need first to scale the image down:\n.   @code\n.   img *= 1./255;\n.   cvtColor(img, img, COLOR_BGR2Luv);\n.   @endcode\n.   If you use #cvtColor with 8-bit images, the conversion will have some information lost. For many\n.   applications, this will not be noticeable but it is recommended to use 32-bit images in applications\n.   that need the full range of colors or that convert an image before an operation and then convert\n.   back.\n.   \n.   If conversion adds the alpha channel, its value will set to the maximum of corresponding channel\n.   range: 255 for CV_8U, 65535 for CV_16U, 1 for CV_32F.\n.   \n.   @param src input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC... ), or single-precision\n.   floating-point.\n.   @param dst output image of the same size and depth as src.\n.   @param code color space conversion code (see #ColorConversionCodes).\n.   @param dstCn number of channels in the destination image; if the parameter is 0, the number of the\n.   channels is derived automatically from src and code.\n.   \n.   @see @ref imgproc_color_conversions'
    pass

def cvtColorTwoPlane(src1, src2, code, dst=None):
    'cvtColorTwoPlane(src1, src2, code[, dst]) -> dst\n.'
    pass

def dct(src, dst=None, flags=None):
    'dct(src[, dst[, flags]]) -> dst\n.   @brief Performs a forward or inverse discrete Cosine transform of 1D or 2D array.\n.   \n.   The function cv::dct performs a forward or inverse discrete Cosine transform (DCT) of a 1D or 2D\n.   floating-point array:\n.   -   Forward Cosine transform of a 1D vector of N elements:\n.   \\f[Y = C^{(N)}  \\cdot X\\f]\n.   where\n.   \\f[C^{(N)}_{jk}= \\sqrt{\\alpha_j/N} \\cos \\left ( \\frac{\\pi(2k+1)j}{2N} \\right )\\f]\n.   and\n.   \\f$\\alpha_0=1\\f$, \\f$\\alpha_j=2\\f$ for *j \\> 0*.\n.   -   Inverse Cosine transform of a 1D vector of N elements:\n.   \\f[X =  \\left (C^{(N)} \\right )^{-1}  \\cdot Y =  \\left (C^{(N)} \\right )^T  \\cdot Y\\f]\n.   (since \\f$C^{(N)}\\f$ is an orthogonal matrix, \\f$C^{(N)} \\cdot \\left(C^{(N)}\\right)^T = I\\f$ )\n.   -   Forward 2D Cosine transform of M x N matrix:\n.   \\f[Y = C^{(N)}  \\cdot X  \\cdot \\left (C^{(N)} \\right )^T\\f]\n.   -   Inverse 2D Cosine transform of M x N matrix:\n.   \\f[X =  \\left (C^{(N)} \\right )^T  \\cdot X  \\cdot C^{(N)}\\f]\n.   \n.   The function chooses the mode of operation by looking at the flags and size of the input array:\n.   -   If (flags & #DCT_INVERSE) == 0 , the function does a forward 1D or 2D transform. Otherwise, it\n.   is an inverse 1D or 2D transform.\n.   -   If (flags & #DCT_ROWS) != 0 , the function performs a 1D transform of each row.\n.   -   If the array is a single column or a single row, the function performs a 1D transform.\n.   -   If none of the above is true, the function performs a 2D transform.\n.   \n.   @note Currently dct supports even-size arrays (2, 4, 6 ...). For data analysis and approximation, you\n.   can pad the array when necessary.\n.   Also, the function performance depends very much, and not monotonically, on the array size (see\n.   getOptimalDFTSize ). In the current implementation DCT of a vector of size N is calculated via DFT\n.   of a vector of size N/2 . Thus, the optimal DCT size N1 \\>= N can be calculated as:\n.   @code\n.   size_t getOptimalDCTSize(size_t N) { return 2*getOptimalDFTSize((N+1)/2); }\n.   N1 = getOptimalDCTSize(N);\n.   @endcode\n.   @param src input floating-point array.\n.   @param dst output array of the same size and type as src .\n.   @param flags transformation flags as a combination of cv::DftFlags (DCT_*)\n.   @sa dft , getOptimalDFTSize , idct'
    pass

def decolor(src, grayscale=None, color_boost=None):
    'decolor(src[, grayscale[, color_boost]]) -> grayscale, color_boost\n.   @brief Transforms a color image to a grayscale image. It is a basic tool in digital printing, stylized\n.   black-and-white photograph rendering, and in many single channel image processing applications\n.   @cite CL12 .\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param grayscale Output 8-bit 1-channel image.\n.   @param color_boost Output 8-bit 3-channel image.\n.   \n.   This function is to be applied on color images.'
    pass

def decomposeEssentialMat(E, R1=None, R2=None, t=None):
    'decomposeEssentialMat(E[, R1[, R2[, t]]]) -> R1, R2, t\n.   @brief Decompose an essential matrix to possible rotations and translation.\n.   \n.   @param E The input essential matrix.\n.   @param R1 One possible rotation matrix.\n.   @param R2 Another possible rotation matrix.\n.   @param t One possible translation.\n.   \n.   This function decompose an essential matrix E using svd decomposition @cite HartleyZ00 . Generally 4\n.   possible poses exists for a given E. They are \\f$[R_1, t]\\f$, \\f$[R_1, -t]\\f$, \\f$[R_2, t]\\f$, \\f$[R_2, -t]\\f$. By\n.   decomposing E, you can only get the direction of the translation, so the function returns unit t.'
    pass

def decomposeHomographyMat():
    'decomposeHomographyMat(H, K[, rotations[, translations[, normals]]]) -> retval, rotations, translations, normals\n.   @brief Decompose a homography matrix to rotation(s), translation(s) and plane normal(s).\n.   \n.   @param H The input homography matrix between two images.\n.   @param K The input intrinsic camera calibration matrix.\n.   @param rotations Array of rotation matrices.\n.   @param translations Array of translation matrices.\n.   @param normals Array of plane normal matrices.\n.   \n.   This function extracts relative camera motion between two views observing a planar object from the\n.   homography H induced by the plane. The intrinsic camera matrix K must also be provided. The function\n.   may return up to four mathematical solution sets. At least two of the solutions may further be\n.   invalidated if point correspondences are available by applying positive depth constraint (all points\n.   must be in front of the camera). The decomposition method is described in detail in @cite Malis .'
    pass

def decomposeProjectionMatrix(projMatrix, cameraMatrix=None, rotMatrix=None, transVect=None, rotMatrixX=None, rotMatrixY=None, rotMatrixZ=None, eulerAngles=None):
    'decomposeProjectionMatrix(projMatrix[, cameraMatrix[, rotMatrix[, transVect[, rotMatrixX[, rotMatrixY[, rotMatrixZ[, eulerAngles]]]]]]]) -> cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles\n.   @brief Decomposes a projection matrix into a rotation matrix and a camera matrix.\n.   \n.   @param projMatrix 3x4 input projection matrix P.\n.   @param cameraMatrix Output 3x3 camera matrix K.\n.   @param rotMatrix Output 3x3 external rotation matrix R.\n.   @param transVect Output 4x1 translation vector T.\n.   @param rotMatrixX Optional 3x3 rotation matrix around x-axis.\n.   @param rotMatrixY Optional 3x3 rotation matrix around y-axis.\n.   @param rotMatrixZ Optional 3x3 rotation matrix around z-axis.\n.   @param eulerAngles Optional three-element vector containing three Euler angles of rotation in\n.   degrees.\n.   \n.   The function computes a decomposition of a projection matrix into a calibration and a rotation\n.   matrix and the position of a camera.\n.   \n.   It optionally returns three rotation matrices, one for each axis, and three Euler angles that could\n.   be used in OpenGL. Note, there is always more than one sequence of rotations about the three\n.   principal axes that results in the same orientation of an object, e.g. see @cite Slabaugh . Returned\n.   tree rotation matrices and corresponding three Euler angles are only one of the possible solutions.\n.   \n.   The function is based on RQDecomp3x3 .'
    pass

def demosaicing(_src, code, _dst=None, dcn=None):
    'demosaicing(_src, code[, _dst[, dcn]]) -> _dst\n.'
    pass

def denoise_TVL1(observations, result, lambda_=None, niters=None):
    "denoise_TVL1(observations, result[, lambda[, niters]]) -> None\n.   @brief Primal-dual algorithm is an algorithm for solving special types of variational problems (that is,\n.   finding a function to minimize some functional). As the image denoising, in particular, may be seen\n.   as the variational problem, primal-dual algorithm then can be used to perform denoising and this is\n.   exactly what is implemented.\n.   \n.   It should be noted, that this implementation was taken from the July 2013 blog entry\n.   @cite MA13 , which also contained (slightly more general) ready-to-use source code on Python.\n.   Subsequently, that code was rewritten on C++ with the usage of openCV by Vadim Pisarevsky at the end\n.   of July 2013 and finally it was slightly adapted by later authors.\n.   \n.   Although the thorough discussion and justification of the algorithm involved may be found in\n.   @cite ChambolleEtAl, it might make sense to skim over it here, following @cite MA13 . To begin\n.   with, we consider the 1-byte gray-level images as the functions from the rectangular domain of\n.   pixels (it may be seen as set\n.   \\f$\\left\\{(x,y)\\in\\mathbb{N}\\times\\mathbb{N}\\mid 1\\leq x\\leq n,\\;1\\leq y\\leq m\\right\\}\\f$ for some\n.   \\f$m,\\;n\\in\\mathbb{N}\\f$) into \\f$\\{0,1,\\dots,255\\}\\f$. We shall denote the noised images as \\f$f_i\\f$ and with\n.   this view, given some image \\f$x\\f$ of the same size, we may measure how bad it is by the formula\n.   \n.   \\f[\\left\\|\\left\\|\\nabla x\\right\\|\\right\\| + \\lambda\\sum_i\\left\\|\\left\\|x-f_i\\right\\|\\right\\|\\f]\n.   \n.   \\f$\\|\\|\\cdot\\|\\|\\f$ here denotes \\f$L_2\\f$-norm and as you see, the first addend states that we want our\n.   image to be smooth (ideally, having zero gradient, thus being constant) and the second states that\n.   we want our result to be close to the observations we've got. If we treat \\f$x\\f$ as a function, this is\n.   exactly the functional what we seek to minimize and here the Primal-Dual algorithm comes into play.\n.   \n.   @param observations This array should contain one or more noised versions of the image that is to\n.   be restored.\n.   @param result Here the denoised image will be stored. There is no need to do pre-allocation of\n.   storage space, as it will be automatically allocated, if necessary.\n.   @param lambda Corresponds to \\f$\\lambda\\f$ in the formulas above. As it is enlarged, the smooth\n.   (blurred) images are treated more favorably than detailed (but maybe more noised) ones. Roughly\n.   speaking, as it becomes smaller, the result will be more blur but more sever outliers will be\n.   removed.\n.   @param niters Number of iterations that the algorithm will run. Of course, as more iterations as\n.   better, but it is hard to quantitatively refine this statement, so just use the default and\n.   increase it if the results are poor."
    pass

def destroyAllWindows():
    'destroyAllWindows() -> None\n.   @brief Destroys all of the HighGUI windows.\n.   \n.   The function destroyAllWindows destroys all of the opened HighGUI windows.'
    pass

def destroyWindow(winname):
    'destroyWindow(winname) -> None\n.   @brief Destroys the specified window.\n.   \n.   The function destroyWindow destroys the window with the given name.\n.   \n.   @param winname Name of the window to be destroyed.'
    pass

def detailEnhance(src, dst=None, sigma_s=None, sigma_r=None):
    'detailEnhance(src[, dst[, sigma_s[, sigma_r]]]) -> dst\n.   @brief This filter enhances the details of a particular image.\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst Output image with the same size and type as src.\n.   @param sigma_s Range between 0 to 200.\n.   @param sigma_r Range between 0 to 1.'
    pass

def determinant(mtx):
    'determinant(mtx) -> retval\n.   @brief Returns the determinant of a square floating-point matrix.\n.   \n.   The function cv::determinant calculates and returns the determinant of the\n.   specified matrix. For small matrices ( mtx.cols=mtx.rows\\<=3 ), the\n.   direct method is used. For larger matrices, the function uses LU\n.   factorization with partial pivoting.\n.   \n.   For symmetric positively-determined matrices, it is also possible to use\n.   eigen decomposition to calculate the determinant.\n.   @param mtx input matrix that must have CV_32FC1 or CV_64FC1 type and\n.   square size.\n.   @sa trace, invert, solve, eigen, @ref MatrixExpressions'
    pass

def dft(src, dst=None, flags=None, nonzeroRows=None):
    'dft(src[, dst[, flags[, nonzeroRows]]]) -> dst\n.   @brief Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.\n.   \n.   The function cv::dft performs one of the following:\n.   -   Forward the Fourier transform of a 1D vector of N elements:\n.   \\f[Y = F^{(N)}  \\cdot X,\\f]\n.   where \\f$F^{(N)}_{jk}=\\exp(-2\\pi i j k/N)\\f$ and \\f$i=\\sqrt{-1}\\f$\n.   -   Inverse the Fourier transform of a 1D vector of N elements:\n.   \\f[\\begin{array}{l} X\'=  \\left (F^{(N)} \\right )^{-1}  \\cdot Y =  \\left (F^{(N)} \\right )^*  \\cdot y  \\\\ X = (1/N)  \\cdot X, \\end{array}\\f]\n.   where \\f$F^*=\\left(\\textrm{Re}(F^{(N)})-\\textrm{Im}(F^{(N)})\\right)^T\\f$\n.   -   Forward the 2D Fourier transform of a M x N matrix:\n.   \\f[Y = F^{(M)}  \\cdot X  \\cdot F^{(N)}\\f]\n.   -   Inverse the 2D Fourier transform of a M x N matrix:\n.   \\f[\\begin{array}{l} X\'=  \\left (F^{(M)} \\right )^*  \\cdot Y  \\cdot \\left (F^{(N)} \\right )^* \\\\ X =  \\frac{1}{M \\cdot N} \\cdot X\' \\end{array}\\f]\n.   \n.   In case of real (single-channel) data, the output spectrum of the forward Fourier transform or input\n.   spectrum of the inverse Fourier transform can be represented in a packed format called *CCS*\n.   (complex-conjugate-symmetrical). It was borrowed from IPL (Intel\\* Image Processing Library). Here\n.   is how 2D *CCS* spectrum looks:\n.   \\f[\\begin{bmatrix} Re Y_{0,0} & Re Y_{0,1} & Im Y_{0,1} & Re Y_{0,2} & Im Y_{0,2} &  \\cdots & Re Y_{0,N/2-1} & Im Y_{0,N/2-1} & Re Y_{0,N/2}  \\\\ Re Y_{1,0} & Re Y_{1,1} & Im Y_{1,1} & Re Y_{1,2} & Im Y_{1,2} &  \\cdots & Re Y_{1,N/2-1} & Im Y_{1,N/2-1} & Re Y_{1,N/2}  \\\\ Im Y_{1,0} & Re Y_{2,1} & Im Y_{2,1} & Re Y_{2,2} & Im Y_{2,2} &  \\cdots & Re Y_{2,N/2-1} & Im Y_{2,N/2-1} & Im Y_{1,N/2}  \\\\ \\hdotsfor{9} \\\\ Re Y_{M/2-1,0} &  Re Y_{M-3,1}  & Im Y_{M-3,1} &  \\hdotsfor{3} & Re Y_{M-3,N/2-1} & Im Y_{M-3,N/2-1}& Re Y_{M/2-1,N/2}  \\\\ Im Y_{M/2-1,0} &  Re Y_{M-2,1}  & Im Y_{M-2,1} &  \\hdotsfor{3} & Re Y_{M-2,N/2-1} & Im Y_{M-2,N/2-1}& Im Y_{M/2-1,N/2}  \\\\ Re Y_{M/2,0}  &  Re Y_{M-1,1} &  Im Y_{M-1,1} &  \\hdotsfor{3} & Re Y_{M-1,N/2-1} & Im Y_{M-1,N/2-1}& Re Y_{M/2,N/2} \\end{bmatrix}\\f]\n.   \n.   In case of 1D transform of a real vector, the output looks like the first row of the matrix above.\n.   \n.   So, the function chooses an operation mode depending on the flags and size of the input array:\n.   -   If #DFT_ROWS is set or the input array has a single row or single column, the function\n.   performs a 1D forward or inverse transform of each row of a matrix when #DFT_ROWS is set.\n.   Otherwise, it performs a 2D transform.\n.   -   If the input array is real and #DFT_INVERSE is not set, the function performs a forward 1D or\n.   2D transform:\n.   -   When #DFT_COMPLEX_OUTPUT is set, the output is a complex matrix of the same size as\n.   input.\n.   -   When #DFT_COMPLEX_OUTPUT is not set, the output is a real matrix of the same size as\n.   input. In case of 2D transform, it uses the packed format as shown above. In case of a\n.   single 1D transform, it looks like the first row of the matrix above. In case of\n.   multiple 1D transforms (when using the #DFT_ROWS flag), each row of the output matrix\n.   looks like the first row of the matrix above.\n.   -   If the input array is complex and either #DFT_INVERSE or #DFT_REAL_OUTPUT are not set, the\n.   output is a complex array of the same size as input. The function performs a forward or\n.   inverse 1D or 2D transform of the whole input array or each row of the input array\n.   independently, depending on the flags DFT_INVERSE and DFT_ROWS.\n.   -   When #DFT_INVERSE is set and the input array is real, or it is complex but #DFT_REAL_OUTPUT\n.   is set, the output is a real array of the same size as input. The function performs a 1D or 2D\n.   inverse transformation of the whole input array or each individual row, depending on the flags\n.   #DFT_INVERSE and #DFT_ROWS.\n.   \n.   If #DFT_SCALE is set, the scaling is done after the transformation.\n.   \n.   Unlike dct , the function supports arrays of arbitrary size. But only those arrays are processed\n.   efficiently, whose sizes can be factorized in a product of small prime numbers (2, 3, and 5 in the\n.   current implementation). Such an efficient DFT size can be calculated using the getOptimalDFTSize\n.   method.\n.   \n.   The sample below illustrates how to calculate a DFT-based convolution of two 2D real arrays:\n.   @code\n.   void convolveDFT(InputArray A, InputArray B, OutputArray C)\n.   {\n.   // reallocate the output array if needed\n.   C.create(abs(A.rows - B.rows)+1, abs(A.cols - B.cols)+1, A.type());\n.   Size dftSize;\n.   // calculate the size of DFT transform\n.   dftSize.width = getOptimalDFTSize(A.cols + B.cols - 1);\n.   dftSize.height = getOptimalDFTSize(A.rows + B.rows - 1);\n.   \n.   // allocate temporary buffers and initialize them with 0\'s\n.   Mat tempA(dftSize, A.type(), Scalar::all(0));\n.   Mat tempB(dftSize, B.type(), Scalar::all(0));\n.   \n.   // copy A and B to the top-left corners of tempA and tempB, respectively\n.   Mat roiA(tempA, Rect(0,0,A.cols,A.rows));\n.   A.copyTo(roiA);\n.   Mat roiB(tempB, Rect(0,0,B.cols,B.rows));\n.   B.copyTo(roiB);\n.   \n.   // now transform the padded A & B in-place;\n.   // use "nonzeroRows" hint for faster processing\n.   dft(tempA, tempA, 0, A.rows);\n.   dft(tempB, tempB, 0, B.rows);\n.   \n.   // multiply the spectrums;\n.   // the function handles packed spectrum representations well\n.   mulSpectrums(tempA, tempB, tempA);\n.   \n.   // transform the product back from the frequency domain.\n.   // Even though all the result rows will be non-zero,\n.   // you need only the first C.rows of them, and thus you\n.   // pass nonzeroRows == C.rows\n.   dft(tempA, tempA, DFT_INVERSE + DFT_SCALE, C.rows);\n.   \n.   // now copy the result back to C.\n.   tempA(Rect(0, 0, C.cols, C.rows)).copyTo(C);\n.   \n.   // all the temporary buffers will be deallocated automatically\n.   }\n.   @endcode\n.   To optimize this sample, consider the following approaches:\n.   -   Since nonzeroRows != 0 is passed to the forward transform calls and since A and B are copied to\n.   the top-left corners of tempA and tempB, respectively, it is not necessary to clear the whole\n.   tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( tempB.cols - B.cols)\n.   rightmost columns of the matrices.\n.   -   This DFT-based convolution does not have to be applied to the whole big arrays, especially if B\n.   is significantly smaller than A or vice versa. Instead, you can calculate convolution by parts.\n.   To do this, you need to split the output array C into multiple tiles. For each tile, estimate\n.   which parts of A and B are required to calculate convolution in this tile. If the tiles in C are\n.   too small, the speed will decrease a lot because of repeated work. In the ultimate case, when\n.   each tile in C is a single pixel, the algorithm becomes equivalent to the naive convolution\n.   algorithm. If the tiles are too big, the temporary arrays tempA and tempB become too big and\n.   there is also a slowdown because of bad cache locality. So, there is an optimal tile size\n.   somewhere in the middle.\n.   -   If different tiles in C can be calculated in parallel and, thus, the convolution is done by\n.   parts, the loop can be threaded.\n.   \n.   All of the above improvements have been implemented in #matchTemplate and #filter2D . Therefore, by\n.   using them, you can get the performance even better than with the above theoretically optimal\n.   implementation. Though, those two functions actually calculate cross-correlation, not convolution,\n.   so you need to "flip" the second convolution operand B vertically and horizontally using flip .\n.   @note\n.   -   An example using the discrete fourier transform can be found at\n.   opencv_source_code/samples/cpp/dft.cpp\n.   -   (Python) An example using the dft functionality to perform Wiener deconvolution can be found\n.   at opencv_source/samples/python/deconvolution.py\n.   -   (Python) An example rearranging the quadrants of a Fourier image can be found at\n.   opencv_source/samples/python/dft.py\n.   @param src input array that could be real or complex.\n.   @param dst output array whose size and type depends on the flags .\n.   @param flags transformation flags, representing a combination of the #DftFlags\n.   @param nonzeroRows when the parameter is not zero, the function assumes that only the first\n.   nonzeroRows rows of the input array (#DFT_INVERSE is not set) or only the first nonzeroRows of the\n.   output array (#DFT_INVERSE is set) contain non-zeros, thus, the function can handle the rest of the\n.   rows more efficiently and save some time; this technique is very useful for calculating array\n.   cross-correlation or convolution using DFT.\n.   @sa dct , getOptimalDFTSize , mulSpectrums, filter2D , matchTemplate , flip , cartToPolar ,\n.   magnitude , phase'
    pass

def dilate(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None):
    "dilate(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst\n.   @brief Dilates an image by using a specific structuring element.\n.   \n.   The function dilates the source image using the specified structuring element that determines the\n.   shape of a pixel neighborhood over which the maximum is taken:\n.   \\f[\\texttt{dst} (x,y) =  \\max _{(x',y'):  \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\f]\n.   \n.   The function supports the in-place mode. Dilation can be applied several ( iterations ) times. In\n.   case of multi-channel images, each channel is processed independently.\n.   \n.   @param src input image; the number of channels can be arbitrary, but the depth should be one of\n.   CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.\n.   @param dst output image of the same size and type as src.\n.   @param kernel structuring element used for dilation; if elemenat=Mat(), a 3 x 3 rectangular\n.   structuring element is used. Kernel can be created using #getStructuringElement\n.   @param anchor position of the anchor within the element; default value (-1, -1) means that the\n.   anchor is at the element center.\n.   @param iterations number of times dilation is applied.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   @param borderValue border value in case of a constant border\n.   @sa  erode, morphologyEx, getStructuringElement"
    pass

def displayOverlay(winname, text, delayms=None):
    'displayOverlay(winname, text[, delayms]) -> None\n.   @brief Displays a text on a window image as an overlay for a specified duration.\n.   \n.   The function displayOverlay displays useful information/tips on top of the window for a certain\n.   amount of time *delayms*. The function does not modify the image, displayed in the window, that is,\n.   after the specified delay the original content of the window is restored.\n.   \n.   @param winname Name of the window.\n.   @param text Overlay text to write on a window image.\n.   @param delayms The period (in milliseconds), during which the overlay text is displayed. If this\n.   function is called before the previous overlay text timed out, the timer is restarted and the text\n.   is updated. If this value is zero, the text never disappears.'
    pass

def displayStatusBar(winname, text, delayms=None):
    'displayStatusBar(winname, text[, delayms]) -> None\n.   @brief Displays a text on the window statusbar during the specified period of time.\n.   \n.   The function displayStatusBar displays useful information/tips on top of the window for a certain\n.   amount of time *delayms* . This information is displayed on the window statusbar (the window must be\n.   created with the CV_GUI_EXPANDED flags).\n.   \n.   @param winname Name of the window.\n.   @param text Text to write on the window statusbar.\n.   @param delayms Duration (in milliseconds) to display the text. If this function is called before\n.   the previous text timed out, the timer is restarted and the text is updated. If this value is\n.   zero, the text never disappears.'
    pass

def distanceTransform(src, distanceType, maskSize, dst=None, dstType=None):
    'distanceTransform(src, distanceType, maskSize[, dst[, dstType]]) -> dst\n.   @overload\n.   @param src 8-bit, single-channel (binary) source image.\n.   @param dst Output image with calculated distances. It is a 8-bit or 32-bit floating-point,\n.   single-channel image of the same size as src .\n.   @param distanceType Type of distance, see #DistanceTypes\n.   @param maskSize Size of the distance transform mask, see #DistanceTransformMasks. In case of the\n.   #DIST_L1 or #DIST_C distance type, the parameter is forced to 3 because a \\f$3\\times 3\\f$ mask gives\n.   the same result as \\f$5\\times 5\\f$ or any larger aperture.\n.   @param dstType Type of output image. It can be CV_8U or CV_32F. Type CV_8U can be used only for\n.   the first variant of the function and distanceType == #DIST_L1.'
    pass

def distanceTransformWithLabels(src, distanceType, maskSize, dst=None, labels=None, labelType=None):
    "distanceTransformWithLabels(src, distanceType, maskSize[, dst[, labels[, labelType]]]) -> dst, labels\n.   @brief Calculates the distance to the closest zero pixel for each pixel of the source image.\n.   \n.   The function cv::distanceTransform calculates the approximate or precise distance from every binary\n.   image pixel to the nearest zero pixel. For zero image pixels, the distance will obviously be zero.\n.   \n.   When maskSize == #DIST_MASK_PRECISE and distanceType == #DIST_L2 , the function runs the\n.   algorithm described in @cite Felzenszwalb04 . This algorithm is parallelized with the TBB library.\n.   \n.   In other cases, the algorithm @cite Borgefors86 is used. This means that for a pixel the function\n.   finds the shortest path to the nearest zero pixel consisting of basic shifts: horizontal, vertical,\n.   diagonal, or knight's move (the latest is available for a \\f$5\\times 5\\f$ mask). The overall\n.   distance is calculated as a sum of these basic distances. Since the distance function should be\n.   symmetric, all of the horizontal and vertical shifts must have the same cost (denoted as a ), all\n.   the diagonal shifts must have the same cost (denoted as `b`), and all knight's moves must have the\n.   same cost (denoted as `c`). For the #DIST_C and #DIST_L1 types, the distance is calculated\n.   precisely, whereas for #DIST_L2 (Euclidean distance) the distance can be calculated only with a\n.   relative error (a \\f$5\\times 5\\f$ mask gives more accurate results). For `a`,`b`, and `c`, OpenCV\n.   uses the values suggested in the original paper:\n.   - DIST_L1: `a = 1, b = 2`\n.   - DIST_L2:\n.   - `3 x 3`: `a=0.955, b=1.3693`\n.   - `5 x 5`: `a=1, b=1.4, c=2.1969`\n.   - DIST_C: `a = 1, b = 1`\n.   \n.   Typically, for a fast, coarse distance estimation #DIST_L2, a \\f$3\\times 3\\f$ mask is used. For a\n.   more accurate distance estimation #DIST_L2, a \\f$5\\times 5\\f$ mask or the precise algorithm is used.\n.   Note that both the precise and the approximate algorithms are linear on the number of pixels.\n.   \n.   This variant of the function does not only compute the minimum distance for each pixel \\f$(x, y)\\f$\n.   but also identifies the nearest connected component consisting of zero pixels\n.   (labelType==#DIST_LABEL_CCOMP) or the nearest zero pixel (labelType==#DIST_LABEL_PIXEL). Index of the\n.   component/pixel is stored in `labels(x, y)`. When labelType==#DIST_LABEL_CCOMP, the function\n.   automatically finds connected components of zero pixels in the input image and marks them with\n.   distinct labels. When labelType==#DIST_LABEL_CCOMP, the function scans through the input image and\n.   marks all the zero pixels with distinct labels.\n.   \n.   In this mode, the complexity is still linear. That is, the function provides a very fast way to\n.   compute the Voronoi diagram for a binary image. Currently, the second variant can use only the\n.   approximate distance transform algorithm, i.e. maskSize=#DIST_MASK_PRECISE is not supported\n.   yet.\n.   \n.   @param src 8-bit, single-channel (binary) source image.\n.   @param dst Output image with calculated distances. It is a 8-bit or 32-bit floating-point,\n.   single-channel image of the same size as src.\n.   @param labels Output 2D array of labels (the discrete Voronoi diagram). It has the type\n.   CV_32SC1 and the same size as src.\n.   @param distanceType Type of distance, see #DistanceTypes\n.   @param maskSize Size of the distance transform mask, see #DistanceTransformMasks.\n.   #DIST_MASK_PRECISE is not supported by this variant. In case of the #DIST_L1 or #DIST_C distance type,\n.   the parameter is forced to 3 because a \\f$3\\times 3\\f$ mask gives the same result as \\f$5\\times\n.   5\\f$ or any larger aperture.\n.   @param labelType Type of the label array to build, see #DistanceTransformLabelTypes."
    pass

def divide(src1, src2, dst=None, scale=None, dtype=None):
    'divide(src1, src2[, dst[, scale[, dtype]]]) -> dst\n.   @brief Performs per-element division of two arrays or a scalar by an array.\n.   \n.   The function cv::divide divides one array by another:\n.   \\f[\\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}\\f]\n.   or a scalar by an array when there is no src1 :\n.   \\f[\\texttt{dst(I) = saturate(scale/src2(I))}\\f]\n.   \n.   When src2(I) is zero, dst(I) will also be zero. Different channels of\n.   multi-channel arrays are processed independently.\n.   \n.   @note Saturation is not applied when the output array has the depth CV_32S. You may even get\n.   result of an incorrect sign in the case of overflow.\n.   @param src1 first input array.\n.   @param src2 second input array of the same size and type as src1.\n.   @param scale scalar factor.\n.   @param dst output array of the same size and type as src2.\n.   @param dtype optional depth of the output array; if -1, dst will have depth src2.depth(), but in\n.   case of an array-by-array division, you can only pass -1 when src1.depth()==src2.depth().\n.   @sa  multiply, add, subtract\n\n\n\ndivide(scale, src2[, dst[, dtype]]) -> dst\n.   @overload'
    pass

class dnn_DictValue(_mod_builtins.object):
    __class__ = dnn_DictValue
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getIntValue(self, idx=None):
        'getIntValue([, idx]) -> retval\n.'
        pass
    
    def getRealValue(self, idx=None):
        'getRealValue([, idx]) -> retval\n.'
        pass
    
    def getStringValue(self, idx=None):
        'getStringValue([, idx]) -> retval\n.'
        pass
    
    def isInt(self):
        'isInt() -> retval\n.'
        pass
    
    def isReal(self):
        'isReal() -> retval\n.'
        pass
    
    def isString(self):
        'isString() -> retval\n.'
        pass
    

class dnn_Layer(Algorithm):
    __class__ = dnn_Layer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def blobs(self):
        'blobs'
        pass
    
    def finalize(self, inputs, outputs=None):
        'finalize(inputs[, outputs]) -> outputs\n.   @brief @overload\n\n\n\nfinalize(inputs) -> retval\n.   @brief @overload'
        pass
    
    @property
    def name(self):
        'name'
        pass
    
    def outputNameToIndex(self, outputName):
        'outputNameToIndex(outputName) -> retval\n.   @brief Returns index of output blob in output array.\n.   *  @see inputNameToIndex()'
        pass
    
    @property
    def preferableTarget(self):
        'preferableTarget'
        pass
    
    def run(self, inputs, internals, outputs=None):
        'run(inputs, internals[, outputs]) -> outputs, internals\n.   @brief Allocates layer and computes output.'
        pass
    
    @property
    def type(self):
        'type'
        pass
    

class dnn_Net(_mod_builtins.object):
    __class__ = dnn_Net
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def connect(self, outPin, inpPin):
        'connect(outPin, inpPin) -> None\n.   @brief Connects output of the first layer to input of the second layer.\n.   *  @param outPin descriptor of the first layer output.\n.   *  @param inpPin descriptor of the second layer input.\n.   *\n.   * Descriptors have the following template <DFN>&lt;layer_name&gt;[.input_number]</DFN>:\n.   * - the first part of the template <DFN>layer_name</DFN> is sting name of the added layer.\n.   *   If this part is empty then the network input pseudo layer will be used;\n.   * - the second optional part of the template <DFN>input_number</DFN>\n.   *   is either number of the layer input, either label one.\n.   *   If this part is omitted then the first layer input will be used.\n.   *\n.   *  @see setNetInputs(), Layer::inputNameToIndex(), Layer::outputNameToIndex()'
        pass
    
    def deleteLayer(self):
        'deleteLayer(layer) -> None\n.   @brief Delete layer for the network (not implemented yet)'
        pass
    
    def empty(self):
        'empty() -> retval\n.   Returns true if there are no layers in the network.'
        pass
    
    def enableFusion(self, fusion):
        'enableFusion(fusion) -> None\n.   @brief Enables or disables layer fusion in the network.\n.   * @param fusion true to enable the fusion, false to disable. The fusion is enabled by default.'
        pass
    
    def forward(self, outputName=None):
        'forward([, outputName]) -> retval\n.   @brief Runs forward pass to compute output of layer with name @p outputName.\n.   *  @param outputName name for layer which output is needed to get\n.   *  @return blob for first output of specified layer.\n.   *  @details By default runs forward pass for the whole network.\n\n\n\nforward([, outputBlobs[, outputName]]) -> outputBlobs\n.   @brief Runs forward pass to compute output of layer with name @p outputName.\n.   *  @param outputBlobs contains all output blobs for specified layer.\n.   *  @param outputName name for layer which output is needed to get\n.   *  @details If @p outputName is empty, runs forward pass for the whole network.\n\n\n\nforward(outBlobNames[, outputBlobs]) -> outputBlobs\n.   @brief Runs forward pass to compute outputs of layers listed in @p outBlobNames.\n.   *  @param outputBlobs contains blobs for first outputs of specified layers.\n.   *  @param outBlobNames names for layers which outputs are needed to get'
        pass
    
    def forwardAndRetrieve(self, outBlobNames):
        'forwardAndRetrieve(outBlobNames) -> outputBlobs\n.   @brief Runs forward pass to compute outputs of layers listed in @p outBlobNames.\n.   *  @param outputBlobs contains all output blobs for each layer specified in @p outBlobNames.\n.   *  @param outBlobNames names for layers which outputs are needed to get'
        pass
    
    def getFLOPS(self, netInputShapes):
        'getFLOPS(netInputShapes) -> retval\n.   @brief Computes FLOP for whole loaded model with specified input shapes.\n.   * @param netInputShapes vector of shapes for all net inputs.\n.   * @returns computed FLOP.\n\n\n\ngetFLOPS(netInputShape) -> retval\n.   @overload\n\n\n\ngetFLOPS(layerId, netInputShapes) -> retval\n.   @overload\n\n\n\ngetFLOPS(layerId, netInputShape) -> retval\n.   @overload'
        pass
    
    def getLayer(self, layerId):
        'getLayer(layerId) -> retval\n.   @brief Returns pointer to layer with specified id or name which the network use.'
        pass
    
    def getLayerId(self, layer):
        "getLayerId(layer) -> retval\n.   @brief Converts string name of the layer to the integer identifier.\n.   *  @returns id of the layer, or -1 if the layer wasn't found."
        pass
    
    def getLayerNames(self):
        'getLayerNames() -> retval\n.'
        pass
    
    def getLayerTypes(self):
        'getLayerTypes() -> layersTypes\n.   @brief Returns list of types for layer used in model.\n.   * @param layersTypes output parameter for returning types.'
        pass
    
    def getLayersCount(self, layerType):
        'getLayersCount(layerType) -> retval\n.   @brief Returns count of layers of specified type.\n.   * @param layerType type.\n.   * @returns count of layers'
        pass
    
    def getLayersShapes(self, netInputShapes):
        "getLayersShapes(netInputShapes) -> layersIds, inLayersShapes, outLayersShapes\n.   @brief Returns input and output shapes for all layers in loaded model;\n.   *  preliminary inferencing isn't necessary.\n.   *  @param netInputShapes shapes for all input blobs in net input layer.\n.   *  @param layersIds output parameter for layer IDs.\n.   *  @param inLayersShapes output parameter for input layers shapes;\n.   * order is the same as in layersIds\n.   *  @param outLayersShapes output parameter for output layers shapes;\n.   * order is the same as in layersIds\n\n\n\ngetLayersShapes(netInputShape) -> layersIds, inLayersShapes, outLayersShapes\n.   @overload"
        pass
    
    def getMemoryConsumption(self, netInputShape):
        'getMemoryConsumption(netInputShape) -> weights, blobs\n.   @overload\n\n\n\ngetMemoryConsumption(layerId, netInputShapes) -> weights, blobs\n.   @overload\n\n\n\ngetMemoryConsumption(layerId, netInputShape) -> weights, blobs\n.   @overload'
        pass
    
    def getParam(self, layer, numParam=None):
        'getParam(layer[, numParam]) -> retval\n.   @brief Returns parameter blob of the layer.\n.   *  @param layer name or id of the layer.\n.   *  @param numParam index of the layer parameter in the Layer::blobs array.\n.   *  @see Layer::blobs'
        pass
    
    def getPerfProfile(self):
        'getPerfProfile() -> retval, timings\n.   @brief Returns overall time for inference and timings (in ticks) for layers.\n.   * Indexes in returned vector correspond to layers ids. Some layers can be fused with others,\n.   * in this case zero ticks count will be return for that skipped layers.\n.   * @param timings vector for tick timings for all layers.\n.   * @return overall ticks for model inference.'
        pass
    
    def getUnconnectedOutLayers(self):
        'getUnconnectedOutLayers() -> retval\n.   @brief Returns indexes of layers with unconnected outputs.'
        pass
    
    @classmethod
    def readFromModelOptimizer(cls, xml, bin):
        "readFromModelOptimizer(xml, bin) -> retval\n.   @brief Create a network from Intel's Model Optimizer intermediate representation.\n.   *  @param[in] xml XML configuration file with network's topology.\n.   *  @param[in] bin Binary file with trained weights.\n.   *  Networks imported from Intel's Model Optimizer are launched in Intel's Inference Engine\n.   *  backend."
        pass
    
    def setHalideScheduler(self, scheduler):
        'setHalideScheduler(scheduler) -> None\n.   * @brief Compile Halide layers.\n.   * @param[in] scheduler Path to YAML file with scheduling directives.\n.   * @see setPreferableBackend\n.   *\n.   * Schedule layers that support Halide backend. Then compile them for\n.   * specific target. For layers that not represented in scheduling file\n.   * or if no manual scheduling used at all, automatic scheduling will be applied.'
        pass
    
    def setInput(self, blob, name=None, scalefactor=None, mean=None):
        'setInput(blob[, name[, scalefactor[, mean]]]) -> None\n.   @brief Sets the new input value for the network\n.   *  @param blob        A new blob. Should have CV_32F or CV_8U depth.\n.   *  @param name        A name of input layer.\n.   *  @param scalefactor An optional normalization scale.\n.   *  @param mean        An optional mean subtraction values.\n.   *  @see connect(String, String) to know format of the descriptor.\n.   *\n.   *  If scale or mean values are specified, a final input blob is computed\n.   *  as:\n.   * \\f[input(n,c,h,w) = scalefactor \\times (blob(n,c,h,w) - mean_c)\\f]'
        pass
    
    def setInputsNames(self, inputBlobNames):
        "setInputsNames(inputBlobNames) -> None\n.   @brief Sets outputs names of the network input pseudo layer.\n.   *\n.   * Each net always has special own the network input pseudo layer with id=0.\n.   * This layer stores the user blobs only and don't make any computations.\n.   * In fact, this layer provides the only way to pass user data into the network.\n.   * As any other layer, this layer can label its outputs and this function provides an easy way to do this."
        pass
    
    def setParam(self, layer, numParam, blob):
        'setParam(layer, numParam, blob) -> None\n.   @brief Sets the new value for the learned param of the layer.\n.   *  @param layer name or id of the layer.\n.   *  @param numParam index of the layer parameter in the Layer::blobs array.\n.   *  @param blob the new value.\n.   *  @see Layer::blobs\n.   *  @note If shape of the new blob differs from the previous shape,\n.   *  then the following forward pass may fail.'
        pass
    
    def setPreferableBackend(self, backendId):
        "setPreferableBackend(backendId) -> None\n.   * @brief Ask network to use specific computation backend where it supported.\n.   * @param[in] backendId backend identifier.\n.   * @see Backend\n.   *\n.   * If OpenCV is compiled with Intel's Inference Engine library, DNN_BACKEND_DEFAULT\n.   * means DNN_BACKEND_INFERENCE_ENGINE. Otherwise it equals to DNN_BACKEND_OPENCV."
        pass
    
    def setPreferableTarget(self, targetId):
        'setPreferableTarget(targetId) -> None\n.   * @brief Ask network to make computations on specific target device.\n.   * @param[in] targetId target identifier.\n.   * @see Target\n.   *\n.   * List of supported combinations backend / target:\n.   * |                        | DNN_BACKEND_OPENCV | DNN_BACKEND_INFERENCE_ENGINE | DNN_BACKEND_HALIDE |\n.   * |------------------------|--------------------|------------------------------|--------------------|\n.   * | DNN_TARGET_CPU         |                  + |                            + |                  + |\n.   * | DNN_TARGET_OPENCL      |                  + |                            + |                  + |\n.   * | DNN_TARGET_OPENCL_FP16 |                  + |                            + |                    |\n.   * | DNN_TARGET_MYRIAD      |                    |                            + |                    |'
        pass
    

def dnn_registerLayer():
    'registerLayer(type, class) -> None'
    pass

def dnn_unregisterLayer():
    'unregisterLayer(type) -> None'
    pass

class dpm_DPMDetector(_mod_builtins.object):
    __class__ = dpm_DPMDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class dpm_DPMDetector_ObjectDetection(_mod_builtins.object):
    __class__ = dpm_DPMDetector_ObjectDetection
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

def drawChessboardCorners(image, patternSize, corners, patternWasFound):
    'drawChessboardCorners(image, patternSize, corners, patternWasFound) -> image\n.   @brief Renders the detected chessboard corners.\n.   \n.   @param image Destination image. It must be an 8-bit color image.\n.   @param patternSize Number of inner corners per a chessboard row and column\n.   (patternSize = cv::Size(points_per_row,points_per_column)).\n.   @param corners Array of detected corners, the output of findChessboardCorners.\n.   @param patternWasFound Parameter indicating whether the complete board was found or not. The\n.   return value of findChessboardCorners should be passed here.\n.   \n.   The function draws individual chessboard corners detected either as red circles if the board was not\n.   found, or as colored corners connected with lines if the board was found.'
    pass

def drawContours(image, contours, contourIdx, color, thickness=None, lineType=None, hierarchy=None, maxLevel=None, offset=None):
    'drawContours(image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]) -> image\n.   @brief Draws contours outlines or filled contours.\n.   \n.   The function draws contour outlines in the image if \\f$\\texttt{thickness} \\ge 0\\f$ or fills the area\n.   bounded by the contours if \\f$\\texttt{thickness}<0\\f$ . The example below shows how to retrieve\n.   connected components from the binary image and label them: :\n.   @include snippets/imgproc_drawContours.cpp\n.   \n.   @param image Destination image.\n.   @param contours All the input contours. Each contour is stored as a point vector.\n.   @param contourIdx Parameter indicating a contour to draw. If it is negative, all the contours are drawn.\n.   @param color Color of the contours.\n.   @param thickness Thickness of lines the contours are drawn with. If it is negative (for example,\n.   thickness=#FILLED ), the contour interiors are drawn.\n.   @param lineType Line connectivity. See #LineTypes\n.   @param hierarchy Optional information about hierarchy. It is only needed if you want to draw only\n.   some of the contours (see maxLevel ).\n.   @param maxLevel Maximal level for drawn contours. If it is 0, only the specified contour is drawn.\n.   If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function\n.   draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This\n.   parameter is only taken into account when there is hierarchy available.\n.   @param offset Optional contour shift parameter. Shift all the drawn contours by the specified\n.   \\f$\\texttt{offset}=(dx,dy)\\f$ .\n.   @note When thickness=#FILLED, the function is designed to handle connected components with holes correctly\n.   even when no hierarchy date is provided. This is done by analyzing all the outlines together\n.   using even-odd rule. This may give incorrect results if you have a joint collection of separately retrieved\n.   contours. In order to solve this problem, you need to call #drawContours separately for each sub-group\n.   of contours, or iterate over the collection using contourIdx parameter.'
    pass

def drawKeypoints(image, keypoints, outImage, color=None, flags=None):
    'drawKeypoints(image, keypoints, outImage[, color[, flags]]) -> outImage\n.   @brief Draws keypoints.\n.   \n.   @param image Source image.\n.   @param keypoints Keypoints from the source image.\n.   @param outImage Output image. Its content depends on the flags value defining what is drawn in the\n.   output image. See possible flags bit values below.\n.   @param color Color of keypoints.\n.   @param flags Flags setting drawing features. Possible flags bit values are defined by\n.   DrawMatchesFlags. See details above in drawMatches .\n.   \n.   @note\n.   For Python API, flags are modified as cv2.DRAW_MATCHES_FLAGS_DEFAULT,\n.   cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS, cv2.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG,\n.   cv2.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS'
    pass

def drawMarker(img, position, color, markerType=None, markerSize=None, thickness=None, line_type=None):
    'drawMarker(img, position, color[, markerType[, markerSize[, thickness[, line_type]]]]) -> img\n.   @brief Draws a marker on a predefined position in an image.\n.   \n.   The function cv::drawMarker draws a marker on a given position in the image. For the moment several\n.   marker types are supported, see #MarkerTypes for more information.\n.   \n.   @param img Image.\n.   @param position The point where the crosshair is positioned.\n.   @param color Line color.\n.   @param markerType The specific type of marker you want to use, see #MarkerTypes\n.   @param thickness Line thickness.\n.   @param line_type Type of the line, See #LineTypes\n.   @param markerSize The length of the marker axis [default = 20 pixels]'
    pass

def drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None):
    'drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg\n.   @brief Draws the found matches of keypoints from two images.\n.   \n.   @param img1 First source image.\n.   @param keypoints1 Keypoints from the first source image.\n.   @param img2 Second source image.\n.   @param keypoints2 Keypoints from the second source image.\n.   @param matches1to2 Matches from the first image to the second one, which means that keypoints1[i]\n.   has a corresponding point in keypoints2[matches[i]] .\n.   @param outImg Output image. Its content depends on the flags value defining what is drawn in the\n.   output image. See possible flags bit values below.\n.   @param matchColor Color of matches (lines and connected keypoints). If matchColor==Scalar::all(-1)\n.   , the color is generated randomly.\n.   @param singlePointColor Color of single keypoints (circles), which means that keypoints do not\n.   have the matches. If singlePointColor==Scalar::all(-1) , the color is generated randomly.\n.   @param matchesMask Mask determining which matches are drawn. If the mask is empty, all matches are\n.   drawn.\n.   @param flags Flags setting drawing features. Possible flags bit values are defined by\n.   DrawMatchesFlags.\n.   \n.   This function draws matches of keypoints from two images in the output image. Match is a line\n.   connecting two keypoints (circles). See cv::DrawMatchesFlags.'
    pass

def drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None):
    'drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg\n.   @overload'
    pass

def edgePreservingFilter(src, dst=None, flags=None, sigma_s=None, sigma_r=None):
    'edgePreservingFilter(src[, dst[, flags[, sigma_s[, sigma_r]]]]) -> dst\n.   @brief Filtering is the fundamental operation in image and video processing. Edge-preserving smoothing\n.   filters are used in many different applications @cite EM11 .\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst Output 8-bit 3-channel image.\n.   @param flags Edge preserving filters:\n.   -   **RECURS_FILTER** = 1\n.   -   **NORMCONV_FILTER** = 2\n.   @param sigma_s Range between 0 to 200.\n.   @param sigma_r Range between 0 to 1.'
    pass

def eigen(src, eigenvalues=None, eigenvectors=None):
    'eigen(src[, eigenvalues[, eigenvectors]]) -> retval, eigenvalues, eigenvectors\n.   @brief Calculates eigenvalues and eigenvectors of a symmetric matrix.\n.   \n.   The function cv::eigen calculates just eigenvalues, or eigenvalues and eigenvectors of the symmetric\n.   matrix src:\n.   @code\n.   src*eigenvectors.row(i).t() = eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()\n.   @endcode\n.   \n.   @note Use cv::eigenNonSymmetric for calculation of real eigenvalues and eigenvectors of non-symmetric matrix.\n.   \n.   @param src input matrix that must have CV_32FC1 or CV_64FC1 type, square size and be symmetrical\n.   (src ^T^ == src).\n.   @param eigenvalues output vector of eigenvalues of the same type as src; the eigenvalues are stored\n.   in the descending order.\n.   @param eigenvectors output matrix of eigenvectors; it has the same size and type as src; the\n.   eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding\n.   eigenvalues.\n.   @sa eigenNonSymmetric, completeSymm , PCA'
    pass

def eigenNonSymmetric():
    'eigenNonSymmetric(src[, eigenvalues[, eigenvectors]]) -> eigenvalues, eigenvectors\n.   @brief Calculates eigenvalues and eigenvectors of a non-symmetric matrix (real eigenvalues only).\n.   \n.   @note Assumes real eigenvalues.\n.   \n.   The function calculates eigenvalues and eigenvectors (optional) of the square matrix src:\n.   @code\n.   src*eigenvectors.row(i).t() = eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()\n.   @endcode\n.   \n.   @param src input matrix (CV_32FC1 or CV_64FC1 type).\n.   @param eigenvalues output vector of eigenvalues (type is the same type as src).\n.   @param eigenvectors output matrix of eigenvectors (type is the same type as src). The eigenvectors are stored as subsequent matrix rows, in the same order as the corresponding eigenvalues.\n.   @sa eigen'
    pass

def ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness=None, lineType=None, shift=None):
    'ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]) -> img\n.   @brief Draws a simple or thick elliptic arc or fills an ellipse sector.\n.   \n.   The function cv::ellipse with more parameters draws an ellipse outline, a filled ellipse, an elliptic\n.   arc, or a filled ellipse sector. The drawing code uses general parametric form.\n.   A piecewise-linear curve is used to approximate the elliptic arc\n.   boundary. If you need more control of the ellipse rendering, you can retrieve the curve using\n.   #ellipse2Poly and then render it with #polylines or fill it with #fillPoly. If you use the first\n.   variant of the function and want to draw the whole ellipse, not an arc, pass `startAngle=0` and\n.   `endAngle=360`. If `startAngle` is greater than `endAngle`, they are swapped. The figure below explains\n.   the meaning of the parameters to draw the blue arc.\n.   \n.   ![Parameters of Elliptic Arc](pics/ellipse.svg)\n.   \n.   @param img Image.\n.   @param center Center of the ellipse.\n.   @param axes Half of the size of the ellipse main axes.\n.   @param angle Ellipse rotation angle in degrees.\n.   @param startAngle Starting angle of the elliptic arc in degrees.\n.   @param endAngle Ending angle of the elliptic arc in degrees.\n.   @param color Ellipse color.\n.   @param thickness Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that\n.   a filled ellipse sector is to be drawn.\n.   @param lineType Type of the ellipse boundary. See #LineTypes\n.   @param shift Number of fractional bits in the coordinates of the center and values of axes.\n\n\n\nellipse(img, box, color[, thickness[, lineType]]) -> img\n.   @overload\n.   @param img Image.\n.   @param box Alternative ellipse representation via RotatedRect. This means that the function draws\n.   an ellipse inscribed in the rotated rectangle.\n.   @param color Ellipse color.\n.   @param thickness Thickness of the ellipse arc outline, if positive. Otherwise, this indicates that\n.   a filled ellipse sector is to be drawn.\n.   @param lineType Type of the ellipse boundary. See #LineTypes'
    pass

def ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta):
    'ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta) -> pts\n.   @brief Approximates an elliptic arc with a polyline.\n.   \n.   The function ellipse2Poly computes the vertices of a polyline that approximates the specified\n.   elliptic arc. It is used by #ellipse. If `arcStart` is greater than `arcEnd`, they are swapped.\n.   \n.   @param center Center of the arc.\n.   @param axes Half of the size of the ellipse main axes. See #ellipse for details.\n.   @param angle Rotation angle of the ellipse in degrees. See #ellipse for details.\n.   @param arcStart Starting angle of the elliptic arc in degrees.\n.   @param arcEnd Ending angle of the elliptic arc in degrees.\n.   @param delta Angle between the subsequent polyline vertices. It defines the approximation\n.   accuracy.\n.   @param pts Output vector of polyline vertices.'
    pass

def equalizeHist(src, dst=None):
    "equalizeHist(src[, dst]) -> dst\n.   @brief Equalizes the histogram of a grayscale image.\n.   \n.   The function equalizes the histogram of the input image using the following algorithm:\n.   \n.   - Calculate the histogram \\f$H\\f$ for src .\n.   - Normalize the histogram so that the sum of histogram bins is 255.\n.   - Compute the integral of the histogram:\n.   \\f[H'_i =  \\sum _{0  \\le j < i} H(j)\\f]\n.   - Transform the image using \\f$H'\\f$ as a look-up table: \\f$\\texttt{dst}(x,y) = H'(\\texttt{src}(x,y))\\f$\n.   \n.   The algorithm normalizes the brightness and increases the contrast of the image.\n.   \n.   @param src Source 8-bit single channel image.\n.   @param dst Destination image of the same size and type as src ."
    pass

def erode(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None):
    "erode(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst\n.   @brief Erodes an image by using a specific structuring element.\n.   \n.   The function erodes the source image using the specified structuring element that determines the\n.   shape of a pixel neighborhood over which the minimum is taken:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\min _{(x',y'):  \\, \\texttt{element} (x',y') \\ne0 } \\texttt{src} (x+x',y+y')\\f]\n.   \n.   The function supports the in-place mode. Erosion can be applied several ( iterations ) times. In\n.   case of multi-channel images, each channel is processed independently.\n.   \n.   @param src input image; the number of channels can be arbitrary, but the depth should be one of\n.   CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.\n.   @param dst output image of the same size and type as src.\n.   @param kernel structuring element used for erosion; if `element=Mat()`, a `3 x 3` rectangular\n.   structuring element is used. Kernel can be created using #getStructuringElement.\n.   @param anchor position of the anchor within the element; default value (-1, -1) means that the\n.   anchor is at the element center.\n.   @param iterations number of times erosion is applied.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   @param borderValue border value in case of a constant border\n.   @sa  dilate, morphologyEx, getStructuringElement"
    pass

class error(_mod_builtins.Exception):
    __class__ = error
    __dict__ = {}
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    __module__ = 'cv2'
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def __weakref__(self):
        'list of weak references to the object (if defined)'
        pass
    

def estimateAffine2D(from_, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None):
    'estimateAffine2D(from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]) -> retval, inliers\n.   @brief Computes an optimal affine transformation between two 2D point sets.\n.   \n.   It computes\n.   \\f[\n.   \\begin{bmatrix}\n.   x\\\\\n.   y\\\\\n.   \\end{bmatrix}\n.   =\n.   \\begin{bmatrix}\n.   a_{11} & a_{12}\\\\\n.   a_{21} & a_{22}\\\\\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   X\\\\\n.   Y\\\\\n.   \\end{bmatrix}\n.   +\n.   \\begin{bmatrix}\n.   b_1\\\\\n.   b_2\\\\\n.   \\end{bmatrix}\n.   \\f]\n.   \n.   @param from First input 2D point set containing \\f$(X,Y)\\f$.\n.   @param to Second input 2D point set containing \\f$(x,y)\\f$.\n.   @param inliers Output vector indicating which points are inliers (1-inlier, 0-outlier).\n.   @param method Robust method used to compute transformation. The following methods are possible:\n.   -   cv::RANSAC - RANSAC-based robust method\n.   -   cv::LMEDS - Least-Median robust method\n.   RANSAC is the default method.\n.   @param ransacReprojThreshold Maximum reprojection error in the RANSAC algorithm to consider\n.   a point as an inlier. Applies only to RANSAC.\n.   @param maxIters The maximum number of robust method iterations.\n.   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything\n.   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation\n.   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.\n.   @param refineIters Maximum number of iterations of refining algorithm (Levenberg-Marquardt).\n.   Passing 0 will disable refining, so the output matrix will be output of robust method.\n.   \n.   @return Output 2D affine transformation matrix \\f$2 \\times 3\\f$ or empty matrix if transformation\n.   could not be estimated. The returned matrix has the following form:\n.   \\f[\n.   \\begin{bmatrix}\n.   a_{11} & a_{12} & b_1\\\\\n.   a_{21} & a_{22} & b_2\\\\\n.   \\end{bmatrix}\n.   \\f]\n.   \n.   The function estimates an optimal 2D affine transformation between two 2D point sets using the\n.   selected robust algorithm.\n.   \n.   The computed transformation is then refined further (using only inliers) with the\n.   Levenberg-Marquardt method to reduce the re-projection error even more.\n.   \n.   @note\n.   The RANSAC method can handle practically any ratio of outliers but needs a threshold to\n.   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works\n.   correctly only when there are more than 50% of inliers.\n.   \n.   @sa estimateAffinePartial2D, getAffineTransform'
    pass

def estimateAffine3D(src, dst, out=None, inliers=None, ransacThreshold=None, confidence=None):
    'estimateAffine3D(src, dst[, out[, inliers[, ransacThreshold[, confidence]]]]) -> retval, out, inliers\n.   @brief Computes an optimal affine transformation between two 3D point sets.\n.   \n.   It computes\n.   \\f[\n.   \\begin{bmatrix}\n.   x\\\\\n.   y\\\\\n.   z\\\\\n.   \\end{bmatrix}\n.   =\n.   \\begin{bmatrix}\n.   a_{11} & a_{12} & a_{13}\\\\\n.   a_{21} & a_{22} & a_{23}\\\\\n.   a_{31} & a_{32} & a_{33}\\\\\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   X\\\\\n.   Y\\\\\n.   Z\\\\\n.   \\end{bmatrix}\n.   +\n.   \\begin{bmatrix}\n.   b_1\\\\\n.   b_2\\\\\n.   b_3\\\\\n.   \\end{bmatrix}\n.   \\f]\n.   \n.   @param src First input 3D point set containing \\f$(X,Y,Z)\\f$.\n.   @param dst Second input 3D point set containing \\f$(x,y,z)\\f$.\n.   @param out Output 3D affine transformation matrix \\f$3 \\times 4\\f$ of the form\n.   \\f[\n.   \\begin{bmatrix}\n.   a_{11} & a_{12} & a_{13} & b_1\\\\\n.   a_{21} & a_{22} & a_{23} & b_2\\\\\n.   a_{31} & a_{32} & a_{33} & b_3\\\\\n.   \\end{bmatrix}\n.   \\f]\n.   @param inliers Output vector indicating which points are inliers (1-inlier, 0-outlier).\n.   @param ransacThreshold Maximum reprojection error in the RANSAC algorithm to consider a point as\n.   an inlier.\n.   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything\n.   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation\n.   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.\n.   \n.   The function estimates an optimal 3D affine transformation between two 3D point sets using the\n.   RANSAC algorithm.'
    pass

def estimateAffinePartial2D(from_, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None):
    'estimateAffinePartial2D(from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]) -> retval, inliers\n.   @brief Computes an optimal limited affine transformation with 4 degrees of freedom between\n.   two 2D point sets.\n.   \n.   @param from First input 2D point set.\n.   @param to Second input 2D point set.\n.   @param inliers Output vector indicating which points are inliers.\n.   @param method Robust method used to compute transformation. The following methods are possible:\n.   -   cv::RANSAC - RANSAC-based robust method\n.   -   cv::LMEDS - Least-Median robust method\n.   RANSAC is the default method.\n.   @param ransacReprojThreshold Maximum reprojection error in the RANSAC algorithm to consider\n.   a point as an inlier. Applies only to RANSAC.\n.   @param maxIters The maximum number of robust method iterations.\n.   @param confidence Confidence level, between 0 and 1, for the estimated transformation. Anything\n.   between 0.95 and 0.99 is usually good enough. Values too close to 1 can slow down the estimation\n.   significantly. Values lower than 0.8-0.9 can result in an incorrectly estimated transformation.\n.   @param refineIters Maximum number of iterations of refining algorithm (Levenberg-Marquardt).\n.   Passing 0 will disable refining, so the output matrix will be output of robust method.\n.   \n.   @return Output 2D affine transformation (4 degrees of freedom) matrix \\f$2 \\times 3\\f$ or\n.   empty matrix if transformation could not be estimated.\n.   \n.   The function estimates an optimal 2D affine transformation with 4 degrees of freedom limited to\n.   combinations of translation, rotation, and uniform scaling. Uses the selected algorithm for robust\n.   estimation.\n.   \n.   The computed transformation is then refined further (using only inliers) with the\n.   Levenberg-Marquardt method to reduce the re-projection error even more.\n.   \n.   Estimated transformation matrix is:\n.   \\f[ \\begin{bmatrix} \\cos(\\theta) \\cdot s & -\\sin(\\theta) \\cdot s & t_x \\\\\n.   \\sin(\\theta) \\cdot s & \\cos(\\theta) \\cdot s & t_y\n.   \\end{bmatrix} \\f]\n.   Where \\f$ \\theta \\f$ is the rotation angle, \\f$ s \\f$ the scaling factor and \\f$ t_x, t_y \\f$ are\n.   translations in \\f$ x, y \\f$ axes respectively.\n.   \n.   @note\n.   The RANSAC method can handle practically any ratio of outliers but need a threshold to\n.   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works\n.   correctly only when there are more than 50% of inliers.\n.   \n.   @sa estimateAffine2D, getAffineTransform'
    pass

def estimateRigidTransform(src, dst, fullAffine):
    'estimateRigidTransform(src, dst, fullAffine) -> retval\n.   @brief Computes an optimal affine transformation between two 2D point sets.\n.   \n.   @param src First input 2D point set stored in std::vector or Mat, or an image stored in Mat.\n.   @param dst Second input 2D point set of the same size and the same type as A, or another image.\n.   @param fullAffine If true, the function finds an optimal affine transformation with no additional\n.   restrictions (6 degrees of freedom). Otherwise, the class of transformations to choose from is\n.   limited to combinations of translation, rotation, and uniform scaling (4 degrees of freedom).\n.   \n.   The function finds an optimal affine transform *[A|b]* (a 2 x 3 floating-point matrix) that\n.   approximates best the affine transformation between:\n.   \n.   *   Two point sets\n.   *   Two raster images. In this case, the function first finds some features in the src image and\n.   finds the corresponding features in dst image. After that, the problem is reduced to the first\n.   case.\n.   In case of point sets, the problem is formulated as follows: you need to find a 2x2 matrix *A* and\n.   2x1 vector *b* so that:\n.   \n.   \\f[[A^*|b^*] = arg  \\min _{[A|b]}  \\sum _i  \\| \\texttt{dst}[i] - A { \\texttt{src}[i]}^T - b  \\| ^2\\f]\n.   where src[i] and dst[i] are the i-th points in src and dst, respectively\n.   \\f$[A|b]\\f$ can be either arbitrary (when fullAffine=true ) or have a form of\n.   \\f[\\begin{bmatrix} a_{11} & a_{12} & b_1  \\\\ -a_{12} & a_{11} & b_2  \\end{bmatrix}\\f]\n.   when fullAffine=false.\n.   \n.   @sa\n.   estimateAffine2D, estimateAffinePartial2D, getAffineTransform, getPerspectiveTransform, findHomography\n\n\n\nestimateRigidTransform(src, dst, fullAffine, ransacMaxIters, ransacGoodRatio, ransacSize0) -> retval\n.'
    pass

def exp(src, dst=None):
    'exp(src[, dst]) -> dst\n.   @brief Calculates the exponent of every array element.\n.   \n.   The function cv::exp calculates the exponent of every element of the input\n.   array:\n.   \\f[\\texttt{dst} [I] = e^{ src(I) }\\f]\n.   \n.   The maximum relative error is about 7e-6 for single-precision input and\n.   less than 1e-10 for double-precision input. Currently, the function\n.   converts denormalized values to zeros on output. Special values (NaN,\n.   Inf) are not handled.\n.   @param src input array.\n.   @param dst output array of the same size and type as src.\n.   @sa log , cartToPolar , polarToCart , phase , pow , sqrt , magnitude'
    pass

def extractChannel():
    'extractChannel(src, coi[, dst]) -> dst\n.   @brief Extracts a single channel from src (coi is 0-based index)\n.   @param src input array\n.   @param dst output array\n.   @param coi index of channel to extract\n.   @sa mixChannels, split'
    pass

class face_BIF(Algorithm):
    __class__ = face_BIF
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compute(self, image, features=None):
        'compute(image[, features]) -> features\n.   Computes features sby input image.\n.   *  @param image Input image (CV_32FC1).\n.   *  @param features Feature vector (CV_32FC1).'
        pass
    
    @classmethod
    def create(cls):
        'create([, num_bands[, num_rotations]]) -> retval\n.   * @param num_bands The number of filter bands (<=8) used for computing BIF.\n.   * @param num_rotations The number of image rotations for computing BIF.\n.   * @returns Object for computing BIF.'
        pass
    
    def getNumBands(self):
        'getNumBands() -> retval\n.   @returns The number of filter bands used for computing BIF.'
        pass
    
    def getNumRotations(self):
        'getNumRotations() -> retval\n.   @returns The number of image rotations.'
        pass
    

class face_BasicFaceRecognizer(face_FaceRecognizer):
    __class__ = face_BasicFaceRecognizer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getEigenValues(self):
        'getEigenValues() -> retval\n.'
        pass
    
    def getEigenVectors(self):
        'getEigenVectors() -> retval\n.'
        pass
    
    def getLabels(self):
        'getLabels() -> retval\n.'
        pass
    
    def getMean(self):
        'getMean() -> retval\n.'
        pass
    
    def getNumComponents(self):
        'getNumComponents() -> retval\n.   @see setNumComponents'
        pass
    
    def getProjections(self):
        'getProjections() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.   @see setThreshold'
        pass
    
    def setNumComponents(self, val):
        'setNumComponents(val) -> None\n.   @copybrief getNumComponents @see getNumComponents'
        pass
    
    def setThreshold(self, val):
        'setThreshold(val) -> None\n.   @copybrief getThreshold @see getThreshold'
        pass
    

class face_EigenFaceRecognizer(face_BasicFaceRecognizer):
    __class__ = face_EigenFaceRecognizer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        "create([, num_components[, threshold]]) -> retval\n.   @param num_components The number of components (read: Eigenfaces) kept for this Principal\n.   Component Analysis. As a hint: There's no rule how many components (read: Eigenfaces) should be\n.   kept for good reconstruction capabilities. It is based on your input data, so experiment with the\n.   number. Keeping 80 components should almost always be sufficient.\n.   @param threshold The threshold applied in the prediction.\n.   \n.   ### Notes:\n.   \n.   -   Training and prediction must be done on grayscale images, use cvtColor to convert between the\n.   color spaces.\n.   -   **THE EIGENFACES METHOD MAKES THE ASSUMPTION, THAT THE TRAINING AND TEST IMAGES ARE OF EQUAL\n.   SIZE.** (caps-lock, because I got so many mails asking for this). You have to make sure your\n.   input data has the correct shape, else a meaningful exception is thrown. Use resize to resize\n.   the images.\n.   -   This model does not support updating.\n.   \n.   ### Model internal data:\n.   \n.   -   num_components see EigenFaceRecognizer::create.\n.   -   threshold see EigenFaceRecognizer::create.\n.   -   eigenvalues The eigenvalues for this Principal Component Analysis (ordered descending).\n.   -   eigenvectors The eigenvectors for this Principal Component Analysis (ordered by their\n.   eigenvalue).\n.   -   mean The sample mean calculated from the training data.\n.   -   projections The projections of the training data.\n.   -   labels The threshold applied in the prediction. If the distance to the nearest neighbor is\n.   larger than the threshold, this method returns -1."
        pass
    

class face_FaceRecognizer(Algorithm):
    __class__ = face_FaceRecognizer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getLabelInfo(self, label):
        'getLabelInfo(label) -> retval\n.   @brief Gets string information by label.\n.   \n.   If an unknown label id is provided or there is no label information associated with the specified\n.   label id the method returns an empty string.'
        pass
    
    def getLabelsByString(self, str):
        'getLabelsByString(str) -> retval\n.   @brief Gets vector of labels by string.\n.   \n.   The function searches for the labels containing the specified sub-string in the associated string\n.   info.'
        pass
    
    def predict(self):
        'predict(src) -> label, confidence\n.   @brief Predicts a label and associated confidence (e.g. distance) for a given input image.\n.   \n.   @param src Sample image to get a prediction from.\n.   @param label The predicted label for the given image.\n.   @param confidence Associated confidence (e.g. distance) for the predicted label.\n.   \n.   The suffix const means that prediction does not affect the internal model state, so the method can\n.   be safely called from within different threads.\n.   \n.   The following example shows how to get a prediction from a trained model:\n.   \n.   @code\n.   using namespace cv;\n.   // Do your initialization here (create the cv::FaceRecognizer model) ...\n.   // ...\n.   // Read in a sample image:\n.   Mat img = imread("person1/3.jpg", CV_LOAD_IMAGE_GRAYSCALE);\n.   // And get a prediction from the cv::FaceRecognizer:\n.   int predicted = model->predict(img);\n.   @endcode\n.   \n.   Or to get a prediction and the associated confidence (e.g. distance):\n.   \n.   @code\n.   using namespace cv;\n.   // Do your initialization here (create the cv::FaceRecognizer model) ...\n.   // ...\n.   Mat img = imread("person1/3.jpg", CV_LOAD_IMAGE_GRAYSCALE);\n.   // Some variables for the predicted label and associated confidence (e.g. distance):\n.   int predicted_label = -1;\n.   double predicted_confidence = 0.0;\n.   // Get the prediction and associated confidence from the model\n.   model->predict(img, predicted_label, predicted_confidence);\n.   @endcode'
        pass
    
    def predict_collect(self, src, collector):
        'predict_collect(src, collector) -> None\n.   @brief - if implemented - send all result of prediction to collector that can be used for somehow custom result handling\n.   @param src Sample image to get a prediction from.\n.   @param collector User-defined collector object that accepts all results\n.   \n.   To implement this method u just have to do same internal cycle as in predict(InputArray src, CV_OUT int &label, CV_OUT double &confidence) but\n.   not try to get "best@ result, just resend it to caller side with given collector'
        pass
    
    def predict_label(self, src):
        'predict_label(src) -> retval\n.   @overload'
        pass
    
    def read(self, filename):
        'read(filename) -> None\n.   @brief Loads a FaceRecognizer and its model state.\n.   \n.   Loads a persisted model and state from a given XML or YAML file . Every FaceRecognizer has to\n.   overwrite FaceRecognizer::load(FileStorage& fs) to enable loading the model state.\n.   FaceRecognizer::load(FileStorage& fs) in turn gets called by\n.   FaceRecognizer::load(const String& filename), to ease saving a model.'
        pass
    
    def setLabelInfo(self, label, strInfo):
        "setLabelInfo(label, strInfo) -> None\n.   @brief Sets string info for the specified model's label.\n.   \n.   The string info is replaced by the provided value if it was set before for the specified label."
        pass
    
    def train(self, src, labels):
        'train(src, labels) -> None\n.   @brief Trains a FaceRecognizer with given data and associated labels.\n.   \n.   @param src The training images, that means the faces you want to learn. The data has to be\n.   given as a vector\\<Mat\\>.\n.   @param labels The labels corresponding to the images have to be given either as a vector\\<int\\>\n.   or a\n.   \n.   The following source code snippet shows you how to learn a Fisherfaces model on a given set of\n.   images. The images are read with imread and pushed into a std::vector\\<Mat\\>. The labels of each\n.   image are stored within a std::vector\\<int\\> (you could also use a Mat of type CV_32SC1). Think of\n.   the label as the subject (the person) this image belongs to, so same subjects (persons) should have\n.   the same label. For the available FaceRecognizer you don\'t have to pay any attention to the order of\n.   the labels, just make sure same persons have the same label:\n.   \n.   @code\n.   // holds images and labels\n.   vector<Mat> images;\n.   vector<int> labels;\n.   // images for first person\n.   images.push_back(imread("person0/0.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(0);\n.   images.push_back(imread("person0/1.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(0);\n.   images.push_back(imread("person0/2.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(0);\n.   // images for second person\n.   images.push_back(imread("person1/0.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(1);\n.   images.push_back(imread("person1/1.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(1);\n.   images.push_back(imread("person1/2.jpg", CV_LOAD_IMAGE_GRAYSCALE)); labels.push_back(1);\n.   @endcode\n.   \n.   Now that you have read some images, we can create a new FaceRecognizer. In this example I\'ll create\n.   a Fisherfaces model and decide to keep all of the possible Fisherfaces:\n.   \n.   @code\n.   // Create a new Fisherfaces model and retain all available Fisherfaces,\n.   // this is the most common usage of this specific FaceRecognizer:\n.   //\n.   Ptr<FaceRecognizer> model =  FisherFaceRecognizer::create();\n.   @endcode\n.   \n.   And finally train it on the given dataset (the face images and labels):\n.   \n.   @code\n.   // This is the common interface to train all of the available cv::FaceRecognizer\n.   // implementations:\n.   //\n.   model->train(images, labels);\n.   @endcode'
        pass
    
    def update(self, src, labels):
        "update(src, labels) -> None\n.   @brief Updates a FaceRecognizer with given data and associated labels.\n.   \n.   @param src The training images, that means the faces you want to learn. The data has to be given\n.   as a vector\\<Mat\\>.\n.   @param labels The labels corresponding to the images have to be given either as a vector\\<int\\> or\n.   a\n.   \n.   This method updates a (probably trained) FaceRecognizer, but only if the algorithm supports it. The\n.   Local Binary Patterns Histograms (LBPH) recognizer (see createLBPHFaceRecognizer) can be updated.\n.   For the Eigenfaces and Fisherfaces method, this is algorithmically not possible and you have to\n.   re-estimate the model with FaceRecognizer::train. In any case, a call to train empties the existing\n.   model and learns a new model, while update does not delete any model data.\n.   \n.   @code\n.   // Create a new LBPH model (it can be updated) and use the default parameters,\n.   // this is the most common usage of this specific FaceRecognizer:\n.   //\n.   Ptr<FaceRecognizer> model =  LBPHFaceRecognizer::create();\n.   // This is the common interface to train all of the available cv::FaceRecognizer\n.   // implementations:\n.   //\n.   model->train(images, labels);\n.   // Some containers to hold new image:\n.   vector<Mat> newImages;\n.   vector<int> newLabels;\n.   // You should add some images to the containers:\n.   //\n.   // ...\n.   //\n.   // Now updating the model is as easy as calling:\n.   model->update(newImages,newLabels);\n.   // This will preserve the old model data and extend the existing model\n.   // with the new features extracted from newImages!\n.   @endcode\n.   \n.   Calling update on an Eigenfaces model (see EigenFaceRecognizer::create), which doesn't support\n.   updating, will throw an error similar to:\n.   \n.   @code\n.   OpenCV Error: The function/feature is not implemented (This FaceRecognizer (FaceRecognizer.Eigenfaces) does not support updating, you have to use FaceRecognizer::train to update it.) in update, file /home/philipp/git/opencv/modules/contrib/src/facerec.cpp, line 305\n.   terminate called after throwing an instance of 'cv::Exception'\n.   @endcode\n.   \n.   @note The FaceRecognizer does not store your training images, because this would be very\n.   memory intense and it's not the responsibility of te FaceRecognizer to do so. The caller is\n.   responsible for maintaining the dataset, he want to work with."
        pass
    
    def write(self, filename):
        'write(filename) -> None\n.   @brief Saves a FaceRecognizer and its model state.\n.   \n.   Saves this model to a given filename, either as XML or YAML.\n.   @param filename The filename to store this FaceRecognizer to (either XML/YAML).\n.   \n.   Every FaceRecognizer overwrites FaceRecognizer::save(FileStorage& fs) to save the internal model\n.   state. FaceRecognizer::save(const String& filename) saves the state of a model to the given\n.   filename.\n.   \n.   The suffix const means that prediction does not affect the internal model state, so the method can\n.   be safely called from within different threads.'
        pass
    

class face_Facemark(_mod_builtins.object):
    __class__ = face_Facemark
    def __delattr__(self, name):
        'Implement delattr(self, name).'
        return None
    
    def __eq__(self, value):
        'Return self==value.'
        return False
    
    def __ge__(self, value):
        'Return self>=value.'
        return False
    
    def __getattribute__(self, name):
        'Return getattr(self, name).'
        pass
    
    def __gt__(self, value):
        'Return self>value.'
        return False
    
    def __hash__(self):
        'Return hash(self).'
        return 0
    
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __le__(self, value):
        'Return self<=value.'
        return False
    
    def __lt__(self, value):
        'Return self<value.'
        return False
    
    def __ne__(self, value):
        'Return self!=value.'
        return False
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    def __setattr__(self, name, value):
        'Implement setattr(self, name, value).'
        return None
    
    def __str__(self):
        'Return str(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def fit(self, image, faces, landmarks=None):
        'fit(image, faces[, landmarks]) -> retval, landmarks\n.   @brief Detect facial landmarks from an image.\n.   @param image Input image.\n.   @param faces Output of the function which represent region of interest of the detected faces.\n.   Each face is stored in cv::Rect container.\n.   @param landmarks The detected landmark points for each faces.\n.   \n.   <B>Example of usage</B>\n.   @code\n.   Mat image = imread("image.jpg");\n.   std::vector<Rect> faces;\n.   std::vector<std::vector<Point2f> > landmarks;\n.   facemark->fit(image, faces, landmarks);\n.   @endcode'
        pass
    
    def loadModel(self, model):
        'loadModel(model) -> None\n.   @brief A function to load the trained model before the fitting process.\n.   @param model A string represent the filename of a trained model.\n.   \n.   <B>Example of usage</B>\n.   @code\n.   facemark->loadModel("../data/lbf.model");\n.   @endcode'
        pass
    

class face_FacemarkAAM(face_FacemarkTrain):
    __class__ = face_FacemarkAAM
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class face_FacemarkKazemi(face_Facemark):
    __class__ = face_FacemarkKazemi
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class face_FacemarkLBF(face_FacemarkTrain):
    __class__ = face_FacemarkLBF
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class face_FacemarkTrain(_mod_builtins.object):
    __class__ = face_FacemarkTrain
    def __delattr__(self, name):
        'Implement delattr(self, name).'
        return None
    
    def __eq__(self, value):
        'Return self==value.'
        return False
    
    def __ge__(self, value):
        'Return self>=value.'
        return False
    
    def __getattribute__(self, name):
        'Return getattr(self, name).'
        pass
    
    def __gt__(self, value):
        'Return self>value.'
        return False
    
    def __hash__(self):
        'Return hash(self).'
        return 0
    
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __le__(self, value):
        'Return self<=value.'
        return False
    
    def __lt__(self, value):
        'Return self<value.'
        return False
    
    def __ne__(self, value):
        'Return self!=value.'
        return False
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    def __setattr__(self, name, value):
        'Implement setattr(self, name, value).'
        return None
    
    def __str__(self):
        'Return str(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class face_FisherFaceRecognizer(face_BasicFaceRecognizer):
    __class__ = face_FisherFaceRecognizer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        "create([, num_components[, threshold]]) -> retval\n.   @param num_components The number of components (read: Fisherfaces) kept for this Linear\n.   Discriminant Analysis with the Fisherfaces criterion. It's useful to keep all components, that\n.   means the number of your classes c (read: subjects, persons you want to recognize). If you leave\n.   this at the default (0) or set it to a value less-equal 0 or greater (c-1), it will be set to the\n.   correct number (c-1) automatically.\n.   @param threshold The threshold applied in the prediction. If the distance to the nearest neighbor\n.   is larger than the threshold, this method returns -1.\n.   \n.   ### Notes:\n.   \n.   -   Training and prediction must be done on grayscale images, use cvtColor to convert between the\n.   color spaces.\n.   -   **THE FISHERFACES METHOD MAKES THE ASSUMPTION, THAT THE TRAINING AND TEST IMAGES ARE OF EQUAL\n.   SIZE.** (caps-lock, because I got so many mails asking for this). You have to make sure your\n.   input data has the correct shape, else a meaningful exception is thrown. Use resize to resize\n.   the images.\n.   -   This model does not support updating.\n.   \n.   ### Model internal data:\n.   \n.   -   num_components see FisherFaceRecognizer::create.\n.   -   threshold see FisherFaceRecognizer::create.\n.   -   eigenvalues The eigenvalues for this Linear Discriminant Analysis (ordered descending).\n.   -   eigenvectors The eigenvectors for this Linear Discriminant Analysis (ordered by their\n.   eigenvalue).\n.   -   mean The sample mean calculated from the training data.\n.   -   projections The projections of the training data.\n.   -   labels The labels corresponding to the projections."
        pass
    

class face_LBPHFaceRecognizer(face_FaceRecognizer):
    __class__ = face_LBPHFaceRecognizer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, radius=None, neighbors=None, grid_x=None, grid_y=None, threshold=None):
        'create([, radius[, neighbors[, grid_x[, grid_y[, threshold]]]]]) -> retval\n.   @param radius The radius used for building the Circular Local Binary Pattern. The greater the\n.   radius, the smoother the image but more spatial information you can get.\n.   @param neighbors The number of sample points to build a Circular Local Binary Pattern from. An\n.   appropriate value is to use `8` sample points. Keep in mind: the more sample points you include,\n.   the higher the computational cost.\n.   @param grid_x The number of cells in the horizontal direction, 8 is a common value used in\n.   publications. The more cells, the finer the grid, the higher the dimensionality of the resulting\n.   feature vector.\n.   @param grid_y The number of cells in the vertical direction, 8 is a common value used in\n.   publications. The more cells, the finer the grid, the higher the dimensionality of the resulting\n.   feature vector.\n.   @param threshold The threshold applied in the prediction. If the distance to the nearest neighbor\n.   is larger than the threshold, this method returns -1.\n.   \n.   ### Notes:\n.   \n.   -   The Circular Local Binary Patterns (used in training and prediction) expect the data given as\n.   grayscale images, use cvtColor to convert between the color spaces.\n.   -   This model supports updating.\n.   \n.   ### Model internal data:\n.   \n.   -   radius see LBPHFaceRecognizer::create.\n.   -   neighbors see LBPHFaceRecognizer::create.\n.   -   grid_x see LLBPHFaceRecognizer::create.\n.   -   grid_y see LBPHFaceRecognizer::create.\n.   -   threshold see LBPHFaceRecognizer::create.\n.   -   histograms Local Binary Patterns Histograms calculated from the given training data (empty if\n.   none was given).\n.   -   labels Labels corresponding to the calculated Local Binary Patterns Histograms.'
        pass
    
    def getGridX(self):
        'getGridX() -> retval\n.   @see setGridX'
        pass
    
    def getGridY(self):
        'getGridY() -> retval\n.   @see setGridY'
        pass
    
    def getHistograms(self):
        'getHistograms() -> retval\n.'
        pass
    
    def getLabels(self):
        'getLabels() -> retval\n.'
        pass
    
    def getNeighbors(self):
        'getNeighbors() -> retval\n.   @see setNeighbors'
        pass
    
    def getRadius(self):
        'getRadius() -> retval\n.   @see setRadius'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.   @see setThreshold'
        pass
    
    def setGridX(self, val):
        'setGridX(val) -> None\n.   @copybrief getGridX @see getGridX'
        pass
    
    def setGridY(self, val):
        'setGridY(val) -> None\n.   @copybrief getGridY @see getGridY'
        pass
    
    def setNeighbors(self, val):
        'setNeighbors(val) -> None\n.   @copybrief getNeighbors @see getNeighbors'
        pass
    
    def setRadius(self, val):
        'setRadius(val) -> None\n.   @copybrief getRadius @see getRadius'
        pass
    
    def setThreshold(self, val):
        'setThreshold(val) -> None\n.   @copybrief getThreshold @see getThreshold'
        pass
    

class face_MACE(Algorithm):
    __class__ = face_MACE
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, IMGSIZE=None):
        'create([, IMGSIZE]) -> retval\n.   @brief constructor\n.   @param IMGSIZE  images will get resized to this (should be an even number)'
        pass
    
    @classmethod
    def load(cls, filename, objname=None):
        'load(filename[, objname]) -> retval\n.   @brief constructor\n.   @param filename  build a new MACE instance from a pre-serialized FileStorage\n.   @param objname (optional) top-level node in the FileStorage'
        pass
    
    def salt(self, passphrase):
        'salt(passphrase) -> None\n.   @brief optionally encrypt images with random convolution\n.   @param passphrase a crc64 random seed will get generated from this'
        pass
    
    def same(self, query):
        'same(query) -> retval\n.   @brief correlate query img and threshold to min class value\n.   @param query  a Mat with query image'
        pass
    
    def train(self, images):
        'train(images) -> None\n.   @brief train it on positive features\n.   compute the mace filter: `h = D(-1) * X * (X(+) * D(-1) * X)(-1) * C`\n.   also calculate a minimal threshold for this class, the smallest self-similarity from the train images\n.   @param images  a vector<Mat> with the train images'
        pass
    

class face_PredictCollector(_mod_builtins.object):
    __class__ = face_PredictCollector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class face_StandardCollector(face_PredictCollector):
    __class__ = face_StandardCollector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, threshold=None):
        'create([, threshold]) -> retval\n.   @brief Static constructor\n.   @param threshold set threshold'
        pass
    
    def getMinDist(self):
        'getMinDist() -> retval\n.   @brief Returns minimal distance value'
        pass
    
    def getMinLabel(self):
        'getMinLabel() -> retval\n.   @brief Returns label with minimal distance'
        pass
    
    def getResults(self, sorted=None):
        'getResults([, sorted]) -> retval\n.   @brief Return results as vector\n.   @param sorted If set, results will be sorted by distance\n.   Each values is a pair of label and distance.'
        pass
    

def fastAtan2(y, x):
    'fastAtan2(y, x) -> retval\n.   @brief Calculates the angle of a 2D vector in degrees.\n.   \n.   The function fastAtan2 calculates the full-range angle of an input 2D vector. The angle is measured\n.   in degrees and varies from 0 to 360 degrees. The accuracy is about 0.3 degrees.\n.   @param x x-coordinate of the vector.\n.   @param y y-coordinate of the vector.'
    pass

def fastNlMeansDenoising(src, dst=None, h=None, templateWindowSize=None, searchWindowSize=None):
    'fastNlMeansDenoising(src[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst\n.   @brief Perform image denoising using Non-local Means Denoising algorithm\n.   <http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several computational\n.   optimizations. Noise expected to be a gaussian white noise\n.   \n.   @param src Input 8-bit 1-channel, 2-channel, 3-channel or 4-channel image.\n.   @param dst Output image with the same size and type as src .\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Parameter regulating filter strength. Big h value perfectly removes noise but also\n.   removes image details, smaller h value preserves details but also preserves some noise\n.   \n.   This function expected to be applied to grayscale images. For colored images look at\n.   fastNlMeansDenoisingColored. Advanced usage of this functions can be manual denoising of colored\n.   image in different colorspaces. Such approach is used in fastNlMeansDenoisingColored by converting\n.   image to CIELAB colorspace and then separately denoise L and AB components with different h\n.   parameter.\n\n\n\nfastNlMeansDenoising(src, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst\n.   @brief Perform image denoising using Non-local Means Denoising algorithm\n.   <http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several computational\n.   optimizations. Noise expected to be a gaussian white noise\n.   \n.   @param src Input 8-bit or 16-bit (only with NORM_L1) 1-channel,\n.   2-channel, 3-channel or 4-channel image.\n.   @param dst Output image with the same size and type as src .\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Array of parameters regulating filter strength, either one\n.   parameter applied to all channels or one per channel in dst. Big h value\n.   perfectly removes noise but also removes image details, smaller h\n.   value preserves details but also preserves some noise\n.   @param normType Type of norm used for weight calculation. Can be either NORM_L2 or NORM_L1\n.   \n.   This function expected to be applied to grayscale images. For colored images look at\n.   fastNlMeansDenoisingColored. Advanced usage of this functions can be manual denoising of colored\n.   image in different colorspaces. Such approach is used in fastNlMeansDenoisingColored by converting\n.   image to CIELAB colorspace and then separately denoise L and AB components with different h\n.   parameter.'
    pass

def fastNlMeansDenoisingColored(src, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None):
    'fastNlMeansDenoisingColored(src[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst\n.   @brief Modification of fastNlMeansDenoising function for colored images\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst Output image with the same size and type as src .\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Parameter regulating filter strength for luminance component. Bigger h value perfectly\n.   removes noise but also removes image details, smaller h value preserves details but also preserves\n.   some noise\n.   @param hColor The same as h but for color components. For most images value equals 10\n.   will be enough to remove colored noise and do not distort colors\n.   \n.   The function converts image to CIELAB colorspace and then separately denoise L and AB components\n.   with given h parameters using fastNlMeansDenoising function.'
    pass

def fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None):
    'fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst\n.   @brief Modification of fastNlMeansDenoisingMulti function for colored images sequences\n.   \n.   @param srcImgs Input 8-bit 3-channel images sequence. All images should have the same type and\n.   size.\n.   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence\n.   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should\n.   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n.   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise\n.   srcImgs[imgToDenoiseIndex] image.\n.   @param dst Output image with the same size and type as srcImgs images.\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Parameter regulating filter strength for luminance component. Bigger h value perfectly\n.   removes noise but also removes image details, smaller h value preserves details but also preserves\n.   some noise.\n.   @param hColor The same as h but for color components.\n.   \n.   The function converts images to CIELAB colorspace and then separately denoise L and AB components\n.   with given h parameters using fastNlMeansDenoisingMulti function.'
    pass

def fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, templateWindowSize=None, searchWindowSize=None):
    'fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst\n.   @brief Modification of fastNlMeansDenoising function for images sequence where consecutive images have been\n.   captured in small period of time. For example video. This version of the function is for grayscale\n.   images or for manual manipulation with colorspaces. For more details see\n.   <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>\n.   \n.   @param srcImgs Input 8-bit 1-channel, 2-channel, 3-channel or\n.   4-channel images sequence. All images should have the same type and\n.   size.\n.   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence\n.   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should\n.   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n.   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise\n.   srcImgs[imgToDenoiseIndex] image.\n.   @param dst Output image with the same size and type as srcImgs images.\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Parameter regulating filter strength. Bigger h value\n.   perfectly removes noise but also removes image details, smaller h\n.   value preserves details but also preserves some noise\n\n\n\nfastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst\n.   @brief Modification of fastNlMeansDenoising function for images sequence where consecutive images have been\n.   captured in small period of time. For example video. This version of the function is for grayscale\n.   images or for manual manipulation with colorspaces. For more details see\n.   <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>\n.   \n.   @param srcImgs Input 8-bit or 16-bit (only with NORM_L1) 1-channel,\n.   2-channel, 3-channel or 4-channel images sequence. All images should\n.   have the same type and size.\n.   @param imgToDenoiseIndex Target image to denoise index in srcImgs sequence\n.   @param temporalWindowSize Number of surrounding images to use for target image denoising. Should\n.   be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n.   imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to denoise\n.   srcImgs[imgToDenoiseIndex] image.\n.   @param dst Output image with the same size and type as srcImgs images.\n.   @param templateWindowSize Size in pixels of the template patch that is used to compute weights.\n.   Should be odd. Recommended value 7 pixels\n.   @param searchWindowSize Size in pixels of the window that is used to compute weighted average for\n.   given pixel. Should be odd. Affect performance linearly: greater searchWindowsSize - greater\n.   denoising time. Recommended value 21 pixels\n.   @param h Array of parameters regulating filter strength, either one\n.   parameter applied to all channels or one per channel in dst. Big h value\n.   perfectly removes noise but also removes image details, smaller h\n.   value preserves details but also preserves some noise\n.   @param normType Type of norm used for weight calculation. Can be either NORM_L2 or NORM_L1'
    pass

def fillConvexPoly(img, points, color, lineType=None, shift=None):
    'fillConvexPoly(img, points, color[, lineType[, shift]]) -> img\n.   @brief Fills a convex polygon.\n.   \n.   The function cv::fillConvexPoly draws a filled convex polygon. This function is much faster than the\n.   function #fillPoly . It can fill not only convex polygons but any monotonic polygon without\n.   self-intersections, that is, a polygon whose contour intersects every horizontal line (scan line)\n.   twice at the most (though, its top-most and/or the bottom edge could be horizontal).\n.   \n.   @param img Image.\n.   @param points Polygon vertices.\n.   @param color Polygon color.\n.   @param lineType Type of the polygon boundaries. See #LineTypes\n.   @param shift Number of fractional bits in the vertex coordinates.'
    pass

def fillPoly(img, pts, color, lineType=None, shift=None, offset=None):
    'fillPoly(img, pts, color[, lineType[, shift[, offset]]]) -> img\n.   @brief Fills the area bounded by one or more polygons.\n.   \n.   The function cv::fillPoly fills an area bounded by several polygonal contours. The function can fill\n.   complex areas, for example, areas with holes, contours with self-intersections (some of their\n.   parts), and so forth.\n.   \n.   @param img Image.\n.   @param pts Array of polygons where each polygon is represented as an array of points.\n.   @param color Polygon color.\n.   @param lineType Type of the polygon boundaries. See #LineTypes\n.   @param shift Number of fractional bits in the vertex coordinates.\n.   @param offset Optional offset of all points of the contours.'
    pass

def filter2D(src, ddepth, kernel, dst=None, anchor=None, delta=None, borderType=None):
    'filter2D(src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]) -> dst\n.   @brief Convolves an image with the kernel.\n.   \n.   The function applies an arbitrary linear filter to an image. In-place operation is supported. When\n.   the aperture is partially outside the image, the function interpolates outlier pixel values\n.   according to the specified border mode.\n.   \n.   The function does actually compute correlation, not the convolution:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\sum _{ \\stackrel{0\\leq x\' < \\texttt{kernel.cols},}{0\\leq y\' < \\texttt{kernel.rows}} }  \\texttt{kernel} (x\',y\')* \\texttt{src} (x+x\'- \\texttt{anchor.x} ,y+y\'- \\texttt{anchor.y} )\\f]\n.   \n.   That is, the kernel is not mirrored around the anchor point. If you need a real convolution, flip\n.   the kernel using #flip and set the new anchor to `(kernel.cols - anchor.x - 1, kernel.rows -\n.   anchor.y - 1)`.\n.   \n.   The function uses the DFT-based algorithm in case of sufficiently large kernels (~`11 x 11` or\n.   larger) and the direct algorithm for small kernels.\n.   \n.   @param src input image.\n.   @param dst output image of the same size and the same number of channels as src.\n.   @param ddepth desired depth of the destination image, see @ref filter_depths "combinations"\n.   @param kernel convolution kernel (or rather a correlation kernel), a single-channel floating point\n.   matrix; if you want to apply different kernels to different channels, split the image into\n.   separate color planes using split and process them individually.\n.   @param anchor anchor of the kernel that indicates the relative position of a filtered point within\n.   the kernel; the anchor should lie within the kernel; default value (-1,-1) means that the anchor\n.   is at the kernel center.\n.   @param delta optional value added to the filtered pixels before storing them in dst.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   @sa  sepFilter2D, dft, matchTemplate'
    pass

def filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions=None, pointsMask=None):
    'filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints[, possibleSolutions[, pointsMask]]) -> possibleSolutions\n.   @brief Filters homography decompositions based on additional information.\n.   \n.   @param rotations Vector of rotation matrices.\n.   @param normals Vector of plane normal matrices.\n.   @param beforePoints Vector of (rectified) visible reference points before the homography is applied\n.   @param afterPoints Vector of (rectified) visible reference points after the homography is applied\n.   @param possibleSolutions Vector of int indices representing the viable solution set after filtering\n.   @param pointsMask optional Mat/Vector of 8u type representing the mask for the inliers as given by the findHomography function\n.   \n.   This function is intended to filter the output of the decomposeHomographyMat based on additional\n.   information as described in @cite Malis . The summary of the method: the decomposeHomographyMat function\n.   returns 2 unique solutions and their "opposites" for a total of 4 solutions. If we have access to the\n.   sets of points visible in the camera frame before and after the homography transformation is applied,\n.   we can determine which are the true potential solutions and which are the opposites by verifying which\n.   homographies are consistent with all visible reference points being in front of the camera. The inputs\n.   are left unchanged; the filtered solution set is returned as indices into the existing one.'
    pass

def filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf=None):
    'filterSpeckles(img, newVal, maxSpeckleSize, maxDiff[, buf]) -> img, buf\n.   @brief Filters off small noise blobs (speckles) in the disparity map\n.   \n.   @param img The input 16-bit signed disparity image\n.   @param newVal The disparity value used to paint-off the speckles\n.   @param maxSpeckleSize The maximum speckle size to consider it a speckle. Larger blobs are not\n.   affected by the algorithm\n.   @param maxDiff Maximum difference between neighbor disparity pixels to put them into the same\n.   blob. Note that since StereoBM, StereoSGBM and may be other algorithms return a fixed-point\n.   disparity map, where disparity values are multiplied by 16, this scale factor should be taken into\n.   account when specifying this parameter value.\n.   @param buf The optional temporary buffer to avoid memory allocation within the function.'
    pass

def findChessboardCorners(image, patternSize, corners=None, flags=None):
    'findChessboardCorners(image, patternSize[, corners[, flags]]) -> retval, corners\n.   @brief Finds the positions of internal corners of the chessboard.\n.   \n.   @param image Source chessboard view. It must be an 8-bit grayscale or color image.\n.   @param patternSize Number of inner corners per a chessboard row and column\n.   ( patternSize = cvSize(points_per_row,points_per_colum) = cvSize(columns,rows) ).\n.   @param corners Output array of detected corners.\n.   @param flags Various operation flags that can be zero or a combination of the following values:\n.   -   **CALIB_CB_ADAPTIVE_THRESH** Use adaptive thresholding to convert the image to black\n.   and white, rather than a fixed threshold level (computed from the average image brightness).\n.   -   **CALIB_CB_NORMALIZE_IMAGE** Normalize the image gamma with equalizeHist before\n.   applying fixed or adaptive thresholding.\n.   -   **CALIB_CB_FILTER_QUADS** Use additional criteria (like contour area, perimeter,\n.   square-like shape) to filter out false quads extracted at the contour retrieval stage.\n.   -   **CALIB_CB_FAST_CHECK** Run a fast check on the image that looks for chessboard corners,\n.   and shortcut the call if none is found. This can drastically speed up the call in the\n.   degenerate condition when no chessboard is observed.\n.   \n.   The function attempts to determine whether the input image is a view of the chessboard pattern and\n.   locate the internal chessboard corners. The function returns a non-zero value if all of the corners\n.   are found and they are placed in a certain order (row by row, left to right in every row).\n.   Otherwise, if the function fails to find all the corners or reorder them, it returns 0. For example,\n.   a regular chessboard has 8 x 8 squares and 7 x 7 internal corners, that is, points where the black\n.   squares touch each other. The detected coordinates are approximate, and to determine their positions\n.   more accurately, the function calls cornerSubPix. You also may use the function cornerSubPix with\n.   different parameters if returned coordinates are not accurate enough.\n.   \n.   Sample usage of detecting and drawing chessboard corners: :\n.   @code\n.   Size patternsize(8,6); //interior number of corners\n.   Mat gray = ....; //source image\n.   vector<Point2f> corners; //this will be filled by the detected corners\n.   \n.   //CALIB_CB_FAST_CHECK saves a lot of time on images\n.   //that do not contain any chessboard corners\n.   bool patternfound = findChessboardCorners(gray, patternsize, corners,\n.   CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE\n.   + CALIB_CB_FAST_CHECK);\n.   \n.   if(patternfound)\n.   cornerSubPix(gray, corners, Size(11, 11), Size(-1, -1),\n.   TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1));\n.   \n.   drawChessboardCorners(img, patternsize, Mat(corners), patternfound);\n.   @endcode\n.   @note The function requires white space (like a square-thick border, the wider the better) around\n.   the board to make the detection more robust in various environments. Otherwise, if there is no\n.   border and the background is dark, the outer black squares cannot be segmented properly and so the\n.   square grouping and ordering algorithm fails.'
    pass

def findCirclesGrid(image, patternSize, flags, blobDetector, parameters, centers=None):
    'findCirclesGrid(image, patternSize, flags, blobDetector, parameters[, centers]) -> retval, centers\n.   @brief Finds centers in the grid of circles.\n.   \n.   @param image grid view of input circles; it must be an 8-bit grayscale or color image.\n.   @param patternSize number of circles per row and column\n.   ( patternSize = Size(points_per_row, points_per_colum) ).\n.   @param centers output array of detected centers.\n.   @param flags various operation flags that can be one of the following values:\n.   -   **CALIB_CB_SYMMETRIC_GRID** uses symmetric pattern of circles.\n.   -   **CALIB_CB_ASYMMETRIC_GRID** uses asymmetric pattern of circles.\n.   -   **CALIB_CB_CLUSTERING** uses a special algorithm for grid detection. It is more robust to\n.   perspective distortions but much more sensitive to background clutter.\n.   @param blobDetector feature detector that finds blobs like dark circles on light background.\n.   @param parameters struct for finding circles in a grid pattern.\n.   \n.   The function attempts to determine whether the input image contains a grid of circles. If it is, the\n.   function locates centers of the circles. The function returns a non-zero value if all of the centers\n.   have been found and they have been placed in a certain order (row by row, left to right in every\n.   row). Otherwise, if the function fails to find all the corners or reorder them, it returns 0.\n.   \n.   Sample usage of detecting and drawing the centers of circles: :\n.   @code\n.   Size patternsize(7,7); //number of centers\n.   Mat gray = ....; //source image\n.   vector<Point2f> centers; //this will be filled by the detected centers\n.   \n.   bool patternfound = findCirclesGrid(gray, patternsize, centers);\n.   \n.   drawChessboardCorners(img, patternsize, Mat(centers), patternfound);\n.   @endcode\n.   @note The function requires white space (like a square-thick border, the wider the better) around\n.   the board to make the detection more robust in various environments.\n\n\n\nfindCirclesGrid(image, patternSize[, centers[, flags[, blobDetector]]]) -> retval, centers\n.   @overload'
    pass

def findCirclesGrid2(image, patternSize, flags, blobDetector, parameters, centers=None):
    'findCirclesGrid2(image, patternSize, flags, blobDetector, parameters[, centers]) -> retval, centers\n.   @overload'
    pass

def findContours(image, mode, method, contours=None, hierarchy=None, offset=None):
    "findContours(image, mode, method[, contours[, hierarchy[, offset]]]) -> image, contours, hierarchy\n.   @brief Finds contours in a binary image.\n.   \n.   The function retrieves contours from the binary image using the algorithm @cite Suzuki85 . The contours\n.   are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the\n.   OpenCV sample directory.\n.   @note Since opencv 3.2 source image is not modified by this function.\n.   \n.   @param image Source, an 8-bit single-channel image. Non-zero pixels are treated as 1's. Zero\n.   pixels remain 0's, so the image is treated as binary . You can use #compare, #inRange, #threshold ,\n.   #adaptiveThreshold, #Canny, and others to create a binary image out of a grayscale or color one.\n.   If mode equals to #RETR_CCOMP or #RETR_FLOODFILL, the input can also be a 32-bit integer image of labels (CV_32SC1).\n.   @param contours Detected contours. Each contour is stored as a vector of points (e.g.\n.   std::vector<std::vector<cv::Point> >).\n.   @param hierarchy Optional output vector (e.g. std::vector<cv::Vec4i>), containing information about the image topology. It has\n.   as many elements as the number of contours. For each i-th contour contours[i], the elements\n.   hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices\n.   in contours of the next and previous contours at the same hierarchical level, the first child\n.   contour and the parent contour, respectively. If for the contour i there are no next, previous,\n.   parent, or nested contours, the corresponding elements of hierarchy[i] will be negative.\n.   @param mode Contour retrieval mode, see #RetrievalModes\n.   @param method Contour approximation method, see #ContourApproximationModes\n.   @param offset Optional offset by which every contour point is shifted. This is useful if the\n.   contours are extracted from the image ROI and then they should be analyzed in the whole image\n.   context."
    pass

def findEssentialMat(points1, points2, cameraMatrix, method=None, prob=None, threshold=None, mask=None):
    'findEssentialMat(points1, points2, cameraMatrix[, method[, prob[, threshold[, mask]]]]) -> retval, mask\n.   @brief Calculates an essential matrix from the corresponding points in two images.\n.   \n.   @param points1 Array of N (N \\>= 5) 2D points from the first image. The point coordinates should\n.   be floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1 .\n.   @param cameraMatrix Camera matrix \\f$K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   Note that this function assumes that points1 and points2 are feature points from cameras with the\n.   same camera matrix.\n.   @param method Method for computing an essential matrix.\n.   -   **RANSAC** for the RANSAC algorithm.\n.   -   **LMEDS** for the LMedS algorithm.\n.   @param prob Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of\n.   confidence (probability) that the estimated matrix is correct.\n.   @param threshold Parameter used for RANSAC. It is the maximum distance from a point to an epipolar\n.   line in pixels, beyond which the point is considered an outlier and is not used for computing the\n.   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the\n.   point localization, image resolution, and the image noise.\n.   @param mask Output array of N elements, every element of which is set to 0 for outliers and to 1\n.   for the other points. The array is computed only in the RANSAC and LMedS methods.\n.   \n.   This function estimates essential matrix based on the five-point algorithm solver in @cite Nister03 .\n.   @cite SteweniusCFS is also a related. The epipolar geometry is described by the following equation:\n.   \n.   \\f[[p_2; 1]^T K^{-T} E K^{-1} [p_1; 1] = 0\\f]\n.   \n.   where \\f$E\\f$ is an essential matrix, \\f$p_1\\f$ and \\f$p_2\\f$ are corresponding points in the first and the\n.   second images, respectively. The result of this function may be passed further to\n.   decomposeEssentialMat or recoverPose to recover the relative pose between cameras.\n\n\n\nfindEssentialMat(points1, points2[, focal[, pp[, method[, prob[, threshold[, mask]]]]]]) -> retval, mask\n.   @overload\n.   @param points1 Array of N (N \\>= 5) 2D points from the first image. The point coordinates should\n.   be floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1 .\n.   @param focal focal length of the camera. Note that this function assumes that points1 and points2\n.   are feature points from cameras with same focal length and principal point.\n.   @param pp principal point of the camera.\n.   @param method Method for computing a fundamental matrix.\n.   -   **RANSAC** for the RANSAC algorithm.\n.   -   **LMEDS** for the LMedS algorithm.\n.   @param threshold Parameter used for RANSAC. It is the maximum distance from a point to an epipolar\n.   line in pixels, beyond which the point is considered an outlier and is not used for computing the\n.   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the\n.   point localization, image resolution, and the image noise.\n.   @param prob Parameter used for the RANSAC or LMedS methods only. It specifies a desirable level of\n.   confidence (probability) that the estimated matrix is correct.\n.   @param mask Output array of N elements, every element of which is set to 0 for outliers and to 1\n.   for the other points. The array is computed only in the RANSAC and LMedS methods.\n.   \n.   This function differs from the one above that it computes camera matrix from focal length and\n.   principal point:\n.   \n.   \\f[K =\n.   \\begin{bmatrix}\n.   f & 0 & x_{pp}  \\\\\n.   0 & f & y_{pp}  \\\\\n.   0 & 0 & 1\n.   \\end{bmatrix}\\f]'
    pass

def findFundamentalMat(points1, points2, method=None, ransacReprojThreshold=None, confidence=None, mask=None):
    'findFundamentalMat(points1, points2[, method[, ransacReprojThreshold[, confidence[, mask]]]]) -> retval, mask\n.   @brief Calculates a fundamental matrix from the corresponding points in two images.\n.   \n.   @param points1 Array of N points from the first image. The point coordinates should be\n.   floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1 .\n.   @param method Method for computing a fundamental matrix.\n.   -   **CV_FM_7POINT** for a 7-point algorithm. \\f$N = 7\\f$\n.   -   **CV_FM_8POINT** for an 8-point algorithm. \\f$N \\ge 8\\f$\n.   -   **CV_FM_RANSAC** for the RANSAC algorithm. \\f$N \\ge 8\\f$\n.   -   **CV_FM_LMEDS** for the LMedS algorithm. \\f$N \\ge 8\\f$\n.   @param ransacReprojThreshold Parameter used only for RANSAC. It is the maximum distance from a point to an epipolar\n.   line in pixels, beyond which the point is considered an outlier and is not used for computing the\n.   final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the\n.   point localization, image resolution, and the image noise.\n.   @param confidence Parameter used for the RANSAC and LMedS methods only. It specifies a desirable level\n.   of confidence (probability) that the estimated matrix is correct.\n.   @param mask\n.   \n.   The epipolar geometry is described by the following equation:\n.   \n.   \\f[[p_2; 1]^T F [p_1; 1] = 0\\f]\n.   \n.   where \\f$F\\f$ is a fundamental matrix, \\f$p_1\\f$ and \\f$p_2\\f$ are corresponding points in the first and the\n.   second images, respectively.\n.   \n.   The function calculates the fundamental matrix using one of four methods listed above and returns\n.   the found fundamental matrix. Normally just one matrix is found. But in case of the 7-point\n.   algorithm, the function may return up to 3 solutions ( \\f$9 \\times 3\\f$ matrix that stores all 3\n.   matrices sequentially).\n.   \n.   The calculated fundamental matrix may be passed further to computeCorrespondEpilines that finds the\n.   epipolar lines corresponding to the specified points. It can also be passed to\n.   stereoRectifyUncalibrated to compute the rectification transformation. :\n.   @code\n.   // Example. Estimation of fundamental matrix using the RANSAC algorithm\n.   int point_count = 100;\n.   vector<Point2f> points1(point_count);\n.   vector<Point2f> points2(point_count);\n.   \n.   // initialize the points here ...\n.   for( int i = 0; i < point_count; i++ )\n.   {\n.   points1[i] = ...;\n.   points2[i] = ...;\n.   }\n.   \n.   Mat fundamental_matrix =\n.   findFundamentalMat(points1, points2, FM_RANSAC, 3, 0.99);\n.   @endcode'
    pass

def findHomography(srcPoints, dstPoints, method=None, ransacReprojThreshold=None, mask=None, maxIters=None, confidence=None):
    "findHomography(srcPoints, dstPoints[, method[, ransacReprojThreshold[, mask[, maxIters[, confidence]]]]]) -> retval, mask\n.   @brief Finds a perspective transformation between two planes.\n.   \n.   @param srcPoints Coordinates of the points in the original plane, a matrix of the type CV_32FC2\n.   or vector\\<Point2f\\> .\n.   @param dstPoints Coordinates of the points in the target plane, a matrix of the type CV_32FC2 or\n.   a vector\\<Point2f\\> .\n.   @param method Method used to compute a homography matrix. The following methods are possible:\n.   -   **0** - a regular method using all the points, i.e., the least squares method\n.   -   **RANSAC** - RANSAC-based robust method\n.   -   **LMEDS** - Least-Median robust method\n.   -   **RHO** - PROSAC-based robust method\n.   @param ransacReprojThreshold Maximum allowed reprojection error to treat a point pair as an inlier\n.   (used in the RANSAC and RHO methods only). That is, if\n.   \\f[\\| \\texttt{dstPoints} _i -  \\texttt{convertPointsHomogeneous} ( \\texttt{H} * \\texttt{srcPoints} _i) \\|_2  >  \\texttt{ransacReprojThreshold}\\f]\n.   then the point \\f$i\\f$ is considered as an outlier. If srcPoints and dstPoints are measured in pixels,\n.   it usually makes sense to set this parameter somewhere in the range of 1 to 10.\n.   @param mask Optional output mask set by a robust method ( RANSAC or LMEDS ). Note that the input\n.   mask values are ignored.\n.   @param maxIters The maximum number of RANSAC iterations.\n.   @param confidence Confidence level, between 0 and 1.\n.   \n.   The function finds and returns the perspective transformation \\f$H\\f$ between the source and the\n.   destination planes:\n.   \n.   \\f[s_i  \\vecthree{x'_i}{y'_i}{1} \\sim H  \\vecthree{x_i}{y_i}{1}\\f]\n.   \n.   so that the back-projection error\n.   \n.   \\f[\\sum _i \\left ( x'_i- \\frac{h_{11} x_i + h_{12} y_i + h_{13}}{h_{31} x_i + h_{32} y_i + h_{33}} \\right )^2+ \\left ( y'_i- \\frac{h_{21} x_i + h_{22} y_i + h_{23}}{h_{31} x_i + h_{32} y_i + h_{33}} \\right )^2\\f]\n.   \n.   is minimized. If the parameter method is set to the default value 0, the function uses all the point\n.   pairs to compute an initial homography estimate with a simple least-squares scheme.\n.   \n.   However, if not all of the point pairs ( \\f$srcPoints_i\\f$, \\f$dstPoints_i\\f$ ) fit the rigid perspective\n.   transformation (that is, there are some outliers), this initial estimate will be poor. In this case,\n.   you can use one of the three robust methods. The methods RANSAC, LMeDS and RHO try many different\n.   random subsets of the corresponding point pairs (of four pairs each, collinear pairs are discarded), estimate the homography matrix\n.   using this subset and a simple least-squares algorithm, and then compute the quality/goodness of the\n.   computed homography (which is the number of inliers for RANSAC or the least median re-projection error for\n.   LMeDS). The best subset is then used to produce the initial estimate of the homography matrix and\n.   the mask of inliers/outliers.\n.   \n.   Regardless of the method, robust or not, the computed homography matrix is refined further (using\n.   inliers only in case of a robust method) with the Levenberg-Marquardt method to reduce the\n.   re-projection error even more.\n.   \n.   The methods RANSAC and RHO can handle practically any ratio of outliers but need a threshold to\n.   distinguish inliers from outliers. The method LMeDS does not need any threshold but it works\n.   correctly only when there are more than 50% of inliers. Finally, if there are no outliers and the\n.   noise is rather small, use the default method (method=0).\n.   \n.   The function is used to find initial intrinsic and extrinsic matrices. Homography matrix is\n.   determined up to a scale. Thus, it is normalized so that \\f$h_{33}=1\\f$. Note that whenever an \\f$H\\f$ matrix\n.   cannot be estimated, an empty one will be returned.\n.   \n.   @sa\n.   getAffineTransform, estimateAffine2D, estimateAffinePartial2D, getPerspectiveTransform, warpPerspective,\n.   perspectiveTransform"
    pass

def findNonZero(src, idx=None):
    'findNonZero(src[, idx]) -> idx\n.   @brief Returns the list of locations of non-zero pixels\n.   \n.   Given a binary matrix (likely returned from an operation such\n.   as threshold(), compare(), >, ==, etc, return all of\n.   the non-zero indices as a cv::Mat or std::vector<cv::Point> (x,y)\n.   For example:\n.   @code{.cpp}\n.   cv::Mat binaryImage; // input, binary image\n.   cv::Mat locations;   // output, locations of non-zero pixels\n.   cv::findNonZero(binaryImage, locations);\n.   \n.   // access pixel coordinates\n.   Point pnt = locations.at<Point>(i);\n.   @endcode\n.   or\n.   @code{.cpp}\n.   cv::Mat binaryImage; // input, binary image\n.   vector<Point> locations;   // output, locations of non-zero pixels\n.   cv::findNonZero(binaryImage, locations);\n.   \n.   // access pixel coordinates\n.   Point pnt = locations[i];\n.   @endcode\n.   @param src single-channel array (type CV_8UC1)\n.   @param idx the output array, type of cv::Mat or std::vector<Point>, corresponding to non-zero indices in the input'
    pass

def findTransformECC(templateImage, inputImage, warpMatrix, motionType=None, criteria=None, inputMask=None):
    "findTransformECC(templateImage, inputImage, warpMatrix[, motionType[, criteria[, inputMask]]]) -> retval, warpMatrix\n.   @brief Finds the geometric transform (warp) between two images in terms of the ECC criterion @cite EP08 .\n.   \n.   @param templateImage single-channel template image; CV_8U or CV_32F array.\n.   @param inputImage single-channel input image which should be warped with the final warpMatrix in\n.   order to provide an image similar to templateImage, same type as temlateImage.\n.   @param warpMatrix floating-point \\f$2\\times 3\\f$ or \\f$3\\times 3\\f$ mapping matrix (warp).\n.   @param motionType parameter, specifying the type of motion:\n.   -   **MOTION_TRANSLATION** sets a translational motion model; warpMatrix is \\f$2\\times 3\\f$ with\n.   the first \\f$2\\times 2\\f$ part being the unity matrix and the rest two parameters being\n.   estimated.\n.   -   **MOTION_EUCLIDEAN** sets a Euclidean (rigid) transformation as motion model; three\n.   parameters are estimated; warpMatrix is \\f$2\\times 3\\f$.\n.   -   **MOTION_AFFINE** sets an affine motion model (DEFAULT); six parameters are estimated;\n.   warpMatrix is \\f$2\\times 3\\f$.\n.   -   **MOTION_HOMOGRAPHY** sets a homography as a motion model; eight parameters are\n.   estimated;\\`warpMatrix\\` is \\f$3\\times 3\\f$.\n.   @param criteria parameter, specifying the termination criteria of the ECC algorithm;\n.   criteria.epsilon defines the threshold of the increment in the correlation coefficient between two\n.   iterations (a negative criteria.epsilon makes criteria.maxcount the only termination criterion).\n.   Default values are shown in the declaration above.\n.   @param inputMask An optional mask to indicate valid values of inputImage.\n.   \n.   The function estimates the optimum transformation (warpMatrix) with respect to ECC criterion\n.   (@cite EP08), that is\n.   \n.   \\f[\\texttt{warpMatrix} = \\texttt{warpMatrix} = \\arg\\max_{W} \\texttt{ECC}(\\texttt{templateImage}(x,y),\\texttt{inputImage}(x',y'))\\f]\n.   \n.   where\n.   \n.   \\f[\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = W \\cdot \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}\\f]\n.   \n.   (the equation holds with homogeneous coordinates for homography). It returns the final enhanced\n.   correlation coefficient, that is the correlation coefficient between the template image and the\n.   final warped input image. When a \\f$3\\times 3\\f$ matrix is given with motionType =0, 1 or 2, the third\n.   row is ignored.\n.   \n.   Unlike findHomography and estimateRigidTransform, the function findTransformECC implements an\n.   area-based alignment that builds on intensity similarities. In essence, the function updates the\n.   initial transformation that roughly aligns the images. If this information is missing, the identity\n.   warp (unity matrix) is used as an initialization. Note that if images undergo strong\n.   displacements/rotations, an initial transformation that roughly aligns the images is necessary\n.   (e.g., a simple euclidean/similarity transform that allows for the images showing the same image\n.   content approximately). Use inverse warping in the second image to take an image close to the first\n.   one, i.e. use the flag WARP_INVERSE_MAP with warpAffine or warpPerspective. See also the OpenCV\n.   sample image_alignment.cpp that demonstrates the use of the function. Note that the function throws\n.   an exception if algorithm does not converges.\n.   \n.   @sa\n.   estimateAffine2D, estimateAffinePartial2D, findHomography"
    pass

def fitEllipse(points):
    'fitEllipse(points) -> retval\n.   @brief Fits an ellipse around a set of 2D points.\n.   \n.   The function calculates the ellipse that fits (in a least-squares sense) a set of 2D points best of\n.   all. It returns the rotated rectangle in which the ellipse is inscribed. The first algorithm described by @cite Fitzgibbon95\n.   is used. Developer should keep in mind that it is possible that the returned\n.   ellipse/rotatedRect data contains negative indices, due to the data points being close to the\n.   border of the containing Mat element.\n.   \n.   @param points Input 2D point set, stored in std::vector\\<\\> or Mat'
    pass

def fitEllipseAMS(points):
    'fitEllipseAMS(points) -> retval\n.   @brief Fits an ellipse around a set of 2D points.\n.   \n.   The function calculates the ellipse that fits a set of 2D points.\n.   It returns the rotated rectangle in which the ellipse is inscribed.\n.   The Approximate Mean Square (AMS) proposed by @cite Taubin1991 is used.\n.   \n.   For an ellipse, this basis set is \\f$ \\chi= \\left(x^2, x y, y^2, x, y, 1\\right) \\f$,\n.   which is a set of six free coefficients \\f$ A^T=\\left\\{A_{\\text{xx}},A_{\\text{xy}},A_{\\text{yy}},A_x,A_y,A_0\\right\\} \\f$.\n.   However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \\f$ (a,b) \\f$,\n.   the position \\f$ (x_0,y_0) \\f$, and the orientation \\f$ \\theta \\f$. This is because the basis set includes lines,\n.   quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits.\n.   If the fit is found to be a parabolic or hyperbolic function then the standard #fitEllipse method is used.\n.   The AMS method restricts the fit to parabolic, hyperbolic and elliptical curves\n.   by imposing the condition that \\f$ A^T ( D_x^T D_x  +   D_y^T D_y) A = 1 \\f$ where\n.   the matrices \\f$ Dx \\f$ and \\f$ Dy \\f$ are the partial derivatives of the design matrix \\f$ D \\f$ with\n.   respect to x and y. The matrices are formed row by row applying the following to\n.   each of the points in the set:\n.   \\f{align*}{\n.   D(i,:)&=\\left\\{x_i^2, x_i y_i, y_i^2, x_i, y_i, 1\\right\\} &\n.   D_x(i,:)&=\\left\\{2 x_i,y_i,0,1,0,0\\right\\} &\n.   D_y(i,:)&=\\left\\{0,x_i,2 y_i,0,1,0\\right\\}\n.   \\f}\n.   The AMS method minimizes the cost function\n.   \\f{equation*}{\n.   \\epsilon ^2=\\frac{ A^T D^T D A }{ A^T (D_x^T D_x +  D_y^T D_y) A^T }\n.   \\f}\n.   \n.   The minimum cost is found by solving the generalized eigenvalue problem.\n.   \n.   \\f{equation*}{\n.   D^T D A = \\lambda  \\left( D_x^T D_x +  D_y^T D_y\\right) A\n.   \\f}\n.   \n.   @param points Input 2D point set, stored in std::vector\\<\\> or Mat'
    pass

def fitEllipseDirect(points):
    'fitEllipseDirect(points) -> retval\n.   @brief Fits an ellipse around a set of 2D points.\n.   \n.   The function calculates the ellipse that fits a set of 2D points.\n.   It returns the rotated rectangle in which the ellipse is inscribed.\n.   The Direct least square (Direct) method by @cite Fitzgibbon1999 is used.\n.   \n.   For an ellipse, this basis set is \\f$ \\chi= \\left(x^2, x y, y^2, x, y, 1\\right) \\f$,\n.   which is a set of six free coefficients \\f$ A^T=\\left\\{A_{\\text{xx}},A_{\\text{xy}},A_{\\text{yy}},A_x,A_y,A_0\\right\\} \\f$.\n.   However, to specify an ellipse, all that is needed is five numbers; the major and minor axes lengths \\f$ (a,b) \\f$,\n.   the position \\f$ (x_0,y_0) \\f$, and the orientation \\f$ \\theta \\f$. This is because the basis set includes lines,\n.   quadratics, parabolic and hyperbolic functions as well as elliptical functions as possible fits.\n.   The Direct method confines the fit to ellipses by ensuring that \\f$ 4 A_{xx} A_{yy}- A_{xy}^2 > 0 \\f$.\n.   The condition imposed is that \\f$ 4 A_{xx} A_{yy}- A_{xy}^2=1 \\f$ which satisfies the inequality\n.   and as the coefficients can be arbitrarily scaled is not overly restrictive.\n.   \n.   \\f{equation*}{\n.   \\epsilon ^2= A^T D^T D A \\quad \\text{with} \\quad A^T C A =1 \\quad \\text{and} \\quad C=\\left(\\begin{matrix}\n.   0 & 0  & 2  & 0  & 0  &  0  \\\\\n.   0 & -1  & 0  & 0  & 0  &  0 \\\\\n.   2 & 0  & 0  & 0  & 0  &  0 \\\\\n.   0 & 0  & 0  & 0  & 0  &  0 \\\\\n.   0 & 0  & 0  & 0  & 0  &  0 \\\\\n.   0 & 0  & 0  & 0  & 0  &  0\n.   \\end{matrix} \\right)\n.   \\f}\n.   \n.   The minimum cost is found by solving the generalized eigenvalue problem.\n.   \n.   \\f{equation*}{\n.   D^T D A = \\lambda  \\left( C\\right) A\n.   \\f}\n.   \n.   The system produces only one positive eigenvalue \\f$ \\lambda\\f$ which is chosen as the solution\n.   with its eigenvector \\f$\\mathbf{u}\\f$. These are used to find the coefficients\n.   \n.   \\f{equation*}{\n.   A = \\sqrt{\\frac{1}{\\mathbf{u}^T C \\mathbf{u}}}  \\mathbf{u}\n.   \\f}\n.   The scaling factor guarantees that  \\f$A^T C A =1\\f$.\n.   \n.   @param points Input 2D point set, stored in std::vector\\<\\> or Mat'
    pass

def fitLine(points, distType, param, reps, aeps, line=None):
    'fitLine(points, distType, param, reps, aeps[, line]) -> line\n.   @brief Fits a line to a 2D or 3D point set.\n.   \n.   The function fitLine fits a line to a 2D or 3D point set by minimizing \\f$\\sum_i \\rho(r_i)\\f$ where\n.   \\f$r_i\\f$ is a distance between the \\f$i^{th}\\f$ point, the line and \\f$\\rho(r)\\f$ is a distance function, one\n.   of the following:\n.   -  DIST_L2\n.   \\f[\\rho (r) = r^2/2  \\quad \\text{(the simplest and the fastest least-squares method)}\\f]\n.   - DIST_L1\n.   \\f[\\rho (r) = r\\f]\n.   - DIST_L12\n.   \\f[\\rho (r) = 2  \\cdot ( \\sqrt{1 + \\frac{r^2}{2}} - 1)\\f]\n.   - DIST_FAIR\n.   \\f[\\rho \\left (r \\right ) = C^2  \\cdot \\left (  \\frac{r}{C} -  \\log{\\left(1 + \\frac{r}{C}\\right)} \\right )  \\quad \\text{where} \\quad C=1.3998\\f]\n.   - DIST_WELSCH\n.   \\f[\\rho \\left (r \\right ) =  \\frac{C^2}{2} \\cdot \\left ( 1 -  \\exp{\\left(-\\left(\\frac{r}{C}\\right)^2\\right)} \\right )  \\quad \\text{where} \\quad C=2.9846\\f]\n.   - DIST_HUBER\n.   \\f[\\rho (r) =  \\fork{r^2/2}{if \\(r < C\\)}{C \\cdot (r-C/2)}{otherwise} \\quad \\text{where} \\quad C=1.345\\f]\n.   \n.   The algorithm is based on the M-estimator ( <http://en.wikipedia.org/wiki/M-estimator> ) technique\n.   that iteratively fits the line using the weighted least-squares algorithm. After each iteration the\n.   weights \\f$w_i\\f$ are adjusted to be inversely proportional to \\f$\\rho(r_i)\\f$ .\n.   \n.   @param points Input vector of 2D or 3D points, stored in std::vector\\<\\> or Mat.\n.   @param line Output line parameters. In case of 2D fitting, it should be a vector of 4 elements\n.   (like Vec4f) - (vx, vy, x0, y0), where (vx, vy) is a normalized vector collinear to the line and\n.   (x0, y0) is a point on the line. In case of 3D fitting, it should be a vector of 6 elements (like\n.   Vec6f) - (vx, vy, vz, x0, y0, z0), where (vx, vy, vz) is a normalized vector collinear to the line\n.   and (x0, y0, z0) is a point on the line.\n.   @param distType Distance used by the M-estimator, see #DistanceTypes\n.   @param param Numerical parameter ( C ) for some types of distances. If it is 0, an optimal value\n.   is chosen.\n.   @param reps Sufficient accuracy for the radius (distance between the coordinate origin and the line).\n.   @param aeps Sufficient accuracy for the angle. 0.01 would be a good default value for reps and aeps.'
    pass

class flann_Index(_mod_builtins.object):
    __class__ = flann_Index
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def build(self, features, params, distType=None):
        'build(features, params[, distType]) -> None\n.'
        pass
    
    def getAlgorithm(self):
        'getAlgorithm() -> retval\n.'
        pass
    
    def getDistance(self):
        'getDistance() -> retval\n.'
        pass
    
    def knnSearch(self, query, knn, indices=None, dists=None, params=None):
        'knnSearch(query, knn[, indices[, dists[, params]]]) -> indices, dists\n.'
        pass
    
    def load(self, features, filename):
        'load(features, filename) -> retval\n.'
        pass
    
    def radiusSearch(self, query, radius, maxResults, indices=None, dists=None, params=None):
        'radiusSearch(query, radius, maxResults[, indices[, dists[, params]]]) -> retval, indices, dists\n.'
        pass
    
    def release(self):
        'release() -> None\n.'
        pass
    
    def save(self, filename):
        'save(filename) -> None\n.'
        pass
    

def flip(src, flipCode, dst=None):
    'flip(src, flipCode[, dst]) -> dst\n.   @brief Flips a 2D array around vertical, horizontal, or both axes.\n.   \n.   The function cv::flip flips the array in one of three different ways (row\n.   and column indices are 0-based):\n.   \\f[\\texttt{dst} _{ij} =\n.   \\left\\{\n.   \\begin{array}{l l}\n.   \\texttt{src} _{\\texttt{src.rows}-i-1,j} & if\\;  \\texttt{flipCode} = 0 \\\\\n.   \\texttt{src} _{i, \\texttt{src.cols} -j-1} & if\\;  \\texttt{flipCode} > 0 \\\\\n.   \\texttt{src} _{ \\texttt{src.rows} -i-1, \\texttt{src.cols} -j-1} & if\\; \\texttt{flipCode} < 0 \\\\\n.   \\end{array}\n.   \\right.\\f]\n.   The example scenarios of using the function are the following:\n.   *   Vertical flipping of the image (flipCode == 0) to switch between\n.   top-left and bottom-left image origin. This is a typical operation\n.   in video processing on Microsoft Windows\\* OS.\n.   *   Horizontal flipping of the image with the subsequent horizontal\n.   shift and absolute difference calculation to check for a\n.   vertical-axis symmetry (flipCode \\> 0).\n.   *   Simultaneous horizontal and vertical flipping of the image with\n.   the subsequent shift and absolute difference calculation to check\n.   for a central symmetry (flipCode \\< 0).\n.   *   Reversing the order of point arrays (flipCode \\> 0 or\n.   flipCode == 0).\n.   @param src input array.\n.   @param dst output array of the same size and type as src.\n.   @param flipCode a flag to specify how to flip the array; 0 means\n.   flipping around the x-axis and positive value (for example, 1) means\n.   flipping around y-axis. Negative value (for example, -1) means flipping\n.   around both axes.\n.   @sa transpose , repeat , completeSymm'
    pass

def floodFill(image, mask, seedPoint, newVal, loDiff=None, upDiff=None, flags=None):
    "floodFill(image, mask, seedPoint, newVal[, loDiff[, upDiff[, flags]]]) -> retval, image, mask, rect\n.   @brief Fills a connected component with the given color.\n.   \n.   The function cv::floodFill fills a connected component starting from the seed point with the specified\n.   color. The connectivity is determined by the color/brightness closeness of the neighbor pixels. The\n.   pixel at \\f$(x,y)\\f$ is considered to belong to the repainted domain if:\n.   \n.   - in case of a grayscale image and floating range\n.   \\f[\\texttt{src} (x',y')- \\texttt{loDiff} \\leq \\texttt{src} (x,y)  \\leq \\texttt{src} (x',y')+ \\texttt{upDiff}\\f]\n.   \n.   \n.   - in case of a grayscale image and fixed range\n.   \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)- \\texttt{loDiff} \\leq \\texttt{src} (x,y)  \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)+ \\texttt{upDiff}\\f]\n.   \n.   \n.   - in case of a color image and floating range\n.   \\f[\\texttt{src} (x',y')_r- \\texttt{loDiff} _r \\leq \\texttt{src} (x,y)_r \\leq \\texttt{src} (x',y')_r+ \\texttt{upDiff} _r,\\f]\n.   \\f[\\texttt{src} (x',y')_g- \\texttt{loDiff} _g \\leq \\texttt{src} (x,y)_g \\leq \\texttt{src} (x',y')_g+ \\texttt{upDiff} _g\\f]\n.   and\n.   \\f[\\texttt{src} (x',y')_b- \\texttt{loDiff} _b \\leq \\texttt{src} (x,y)_b \\leq \\texttt{src} (x',y')_b+ \\texttt{upDiff} _b\\f]\n.   \n.   \n.   - in case of a color image and fixed range\n.   \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_r- \\texttt{loDiff} _r \\leq \\texttt{src} (x,y)_r \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_r+ \\texttt{upDiff} _r,\\f]\n.   \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_g- \\texttt{loDiff} _g \\leq \\texttt{src} (x,y)_g \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_g+ \\texttt{upDiff} _g\\f]\n.   and\n.   \\f[\\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_b- \\texttt{loDiff} _b \\leq \\texttt{src} (x,y)_b \\leq \\texttt{src} ( \\texttt{seedPoint} .x, \\texttt{seedPoint} .y)_b+ \\texttt{upDiff} _b\\f]\n.   \n.   \n.   where \\f$src(x',y')\\f$ is the value of one of pixel neighbors that is already known to belong to the\n.   component. That is, to be added to the connected component, a color/brightness of the pixel should\n.   be close enough to:\n.   - Color/brightness of one of its neighbors that already belong to the connected component in case\n.   of a floating range.\n.   - Color/brightness of the seed point in case of a fixed range.\n.   \n.   Use these functions to either mark a connected component with the specified color in-place, or build\n.   a mask and then extract the contour, or copy the region to another image, and so on.\n.   \n.   @param image Input/output 1- or 3-channel, 8-bit, or floating-point image. It is modified by the\n.   function unless the #FLOODFILL_MASK_ONLY flag is set in the second variant of the function. See\n.   the details below.\n.   @param mask Operation mask that should be a single-channel 8-bit image, 2 pixels wider and 2 pixels\n.   taller than image. Since this is both an input and output parameter, you must take responsibility\n.   of initializing it. Flood-filling cannot go across non-zero pixels in the input mask. For example,\n.   an edge detector output can be used as a mask to stop filling at edges. On output, pixels in the\n.   mask corresponding to filled pixels in the image are set to 1 or to the a value specified in flags\n.   as described below. Additionally, the function fills the border of the mask with ones to simplify\n.   internal processing. It is therefore possible to use the same mask in multiple calls to the function\n.   to make sure the filled areas do not overlap.\n.   @param seedPoint Starting point.\n.   @param newVal New value of the repainted domain pixels.\n.   @param loDiff Maximal lower brightness/color difference between the currently observed pixel and\n.   one of its neighbors belonging to the component, or a seed pixel being added to the component.\n.   @param upDiff Maximal upper brightness/color difference between the currently observed pixel and\n.   one of its neighbors belonging to the component, or a seed pixel being added to the component.\n.   @param rect Optional output parameter set by the function to the minimum bounding rectangle of the\n.   repainted domain.\n.   @param flags Operation flags. The first 8 bits contain a connectivity value. The default value of\n.   4 means that only the four nearest neighbor pixels (those that share an edge) are considered. A\n.   connectivity value of 8 means that the eight nearest neighbor pixels (those that share a corner)\n.   will be considered. The next 8 bits (8-16) contain a value between 1 and 255 with which to fill\n.   the mask (the default value is 1). For example, 4 | ( 255 \\<\\< 8 ) will consider 4 nearest\n.   neighbours and fill the mask with a value of 255. The following additional options occupy higher\n.   bits and therefore may be further combined with the connectivity and mask fill values using\n.   bit-wise or (|), see #FloodFillFlags.\n.   \n.   @note Since the mask is larger than the filled image, a pixel \\f$(x, y)\\f$ in image corresponds to the\n.   pixel \\f$(x+1, y+1)\\f$ in the mask .\n.   \n.   @sa findContours"
    pass

class freetype_FreeType2(Algorithm):
    __class__ = freetype_FreeType2
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getTextSize(self, text, fontHeight, thickness):
        'getTextSize(text, fontHeight, thickness) -> retval, baseLine\n.   @brief Calculates the width and height of a text string.\n.   \n.   The function getTextSize calculates and returns the approximate size of a box that contains the specified text.\n.   That is, the following code renders some text, the tight box surrounding it, and the baseline: :\n.   @code\n.   String text = "Funny text inside the box";\n.   int fontHeight = 60;\n.   int thickness = -1;\n.   int linestyle = 8;\n.   \n.   Mat img(600, 800, CV_8UC3, Scalar::all(0));\n.   \n.   int baseline=0;\n.   \n.   cv::Ptr<cv::freetype::FreeType2> ft2;\n.   ft2 = cv::freetype::createFreeType2();\n.   ft2->loadFontData( "./mplus-1p-regular.ttf", 0 );\n.   \n.   Size textSize = ft2->getTextSize(text,\n.   fontHeight,\n.   thickness,\n.   &baseline);\n.   \n.   if(thickness > 0){\n.   baseline += thickness;\n.   }\n.   \n.   // center the text\n.   Point textOrg((img.cols - textSize.width) / 2,\n.   (img.rows + textSize.height) / 2);\n.   \n.   // draw the box\n.   rectangle(img, textOrg + Point(0, baseline),\n.   textOrg + Point(textSize.width, -textSize.height),\n.   Scalar(0,255,0),1,8);\n.   \n.   // ... and the baseline first\n.   line(img, textOrg + Point(0, thickness),\n.   textOrg + Point(textSize.width, thickness),\n.   Scalar(0, 0, 255),1,8);\n.   \n.   // then put the text itself\n.   ft2->putText(img, text, textOrg, fontHeight,\n.   Scalar::all(255), thickness, linestyle, true );\n.   @endcode\n.   \n.   @param text Input text string.\n.   @param fontHeight Drawing font size by pixel unit.\n.   @param thickness Thickness of lines used to render the text. See putText for details.\n.   @param[out] baseLine y-coordinate of the baseline relative to the bottom-most text\n.   point.\n.   @return The size of a box that contains the specified text.\n.   \n.   @see cv::putText'
        pass
    
    def loadFontData(self, fontFileName, id):
        'loadFontData(fontFileName, id) -> None\n.   @brief Load font data.\n.   \n.   The function loadFontData loads font data.\n.   \n.   @param fontFileName FontFile Name\n.   @param id face_index to select a font faces in a single file.'
        pass
    
    def putText(self, img, text, org, fontHeight, color, thickness, line_type, bottomLeftOrigin):
        'putText(img, text, org, fontHeight, color, thickness, line_type, bottomLeftOrigin) -> img\n.   @brief Draws a text string.\n.   \n.   The function putText renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by "Tofu" or non-drawn.\n.   \n.   @param img Image.\n.   @param text Text string to be drawn.\n.   @param org Bottom-left/Top-left corner of the text string in the image.\n.   @param fontHeight Drawing font size by pixel unit.\n.   @param color Text color.\n.   @param thickness Thickness of the lines used to draw a text when negative, the glyph is filled. Otherwise, the glyph is drawn with this thickness.\n.   @param line_type Line type. See the line for details.\n.   @param bottomLeftOrigin When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.'
        pass
    
    def setSplitNumber(self, num):
        'setSplitNumber(num) -> None\n.   @brief Set Split Number from Bezier-curve to line\n.   \n.   The function setSplitNumber set the number of split points from bezier-curve to line.\n.   If you want to draw large glyph, large is better.\n.   If you want to draw small glyph, small is better.\n.   \n.   @param num number of split points from bezier-curve to line'
        pass
    

def gemm(src1, src2, alpha, src3, beta, dst=None, flags=None):
    'gemm(src1, src2, alpha, src3, beta[, dst[, flags]]) -> dst\n.   @brief Performs generalized matrix multiplication.\n.   \n.   The function cv::gemm performs generalized matrix multiplication similar to the\n.   gemm functions in BLAS level 3. For example,\n.   `gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T)`\n.   corresponds to\n.   \\f[\\texttt{dst} =  \\texttt{alpha} \\cdot \\texttt{src1} ^T  \\cdot \\texttt{src2} +  \\texttt{beta} \\cdot \\texttt{src3} ^T\\f]\n.   \n.   In case of complex (two-channel) data, performed a complex matrix\n.   multiplication.\n.   \n.   The function can be replaced with a matrix expression. For example, the\n.   above call can be replaced with:\n.   @code{.cpp}\n.   dst = alpha*src1.t()*src2 + beta*src3.t();\n.   @endcode\n.   @param src1 first multiplied input matrix that could be real(CV_32FC1,\n.   CV_64FC1) or complex(CV_32FC2, CV_64FC2).\n.   @param src2 second multiplied input matrix of the same type as src1.\n.   @param alpha weight of the matrix product.\n.   @param src3 third optional delta matrix added to the matrix product; it\n.   should have the same type as src1 and src2.\n.   @param beta weight of src3.\n.   @param dst output matrix; it has the proper size and the same type as\n.   input matrices.\n.   @param flags operation flags (cv::GemmFlags)\n.   @sa mulTransposed , transform'
    pass

def getAffineTransform(src, dst):
    'getAffineTransform(src, dst) -> retval\n.'
    pass

def getBuildInformation():
    'getBuildInformation() -> retval\n.   @brief Returns full configuration time cmake output.\n.   \n.   Returned value is raw cmake output including version control system revision, compiler version,\n.   compiler flags, enabled modules and third party libraries, etc. Output format depends on target\n.   architecture.'
    pass

def getCPUTickCount():
    'getCPUTickCount() -> retval\n.   @brief Returns the number of CPU ticks.\n.   \n.   The function returns the current number of CPU ticks on some architectures (such as x86, x64,\n.   PowerPC). On other platforms the function is equivalent to getTickCount. It can also be used for\n.   very accurate time measurements, as well as for RNG initialization. Note that in case of multi-CPU\n.   systems a thread, from which getCPUTickCount is called, can be suspended and resumed at another CPU\n.   with its own counter. So, theoretically (and practically) the subsequent calls to the function do\n.   not necessary return the monotonously increasing values. Also, since a modern CPU varies the CPU\n.   frequency depending on the load, the number of CPU clocks spent in some code cannot be directly\n.   converted to time units. Therefore, getTickCount is generally a preferable solution for measuring\n.   execution time.'
    pass

def getDefaultNewCameraMatrix(cameraMatrix, imgsize=None, centerPrincipalPoint=None):
    'getDefaultNewCameraMatrix(cameraMatrix[, imgsize[, centerPrincipalPoint]]) -> retval\n.   @brief Returns the default new camera matrix.\n.   \n.   The function returns the camera matrix that is either an exact copy of the input cameraMatrix (when\n.   centerPrinicipalPoint=false ), or the modified one (when centerPrincipalPoint=true).\n.   \n.   In the latter case, the new camera matrix will be:\n.   \n.   \\f[\\begin{bmatrix} f_x && 0 && ( \\texttt{imgSize.width} -1)*0.5  \\\\ 0 && f_y && ( \\texttt{imgSize.height} -1)*0.5  \\\\ 0 && 0 && 1 \\end{bmatrix} ,\\f]\n.   \n.   where \\f$f_x\\f$ and \\f$f_y\\f$ are \\f$(0,0)\\f$ and \\f$(1,1)\\f$ elements of cameraMatrix, respectively.\n.   \n.   By default, the undistortion functions in OpenCV (see #initUndistortRectifyMap, #undistort) do not\n.   move the principal point. However, when you work with stereo, it is important to move the principal\n.   points in both views to the same y-coordinate (which is required by most of stereo correspondence\n.   algorithms), and may be to the same x-coordinate too. So, you can form the new camera matrix for\n.   each view where the principal points are located at the center.\n.   \n.   @param cameraMatrix Input camera matrix.\n.   @param imgsize Camera view image size in pixels.\n.   @param centerPrincipalPoint Location of the principal point in the new camera matrix. The\n.   parameter indicates whether this location should be at the image center or not.'
    pass

def getDerivKernels(dx, dy, ksize, kx=None, ky=None, normalize=None, ktype=None):
    'getDerivKernels(dx, dy, ksize[, kx[, ky[, normalize[, ktype]]]]) -> kx, ky\n.   @brief Returns filter coefficients for computing spatial image derivatives.\n.   \n.   The function computes and returns the filter coefficients for spatial image derivatives. When\n.   `ksize=CV_SCHARR`, the Scharr \\f$3 \\times 3\\f$ kernels are generated (see #Scharr). Otherwise, Sobel\n.   kernels are generated (see #Sobel). The filters are normally passed to #sepFilter2D or to\n.   \n.   @param kx Output matrix of row filter coefficients. It has the type ktype .\n.   @param ky Output matrix of column filter coefficients. It has the type ktype .\n.   @param dx Derivative order in respect of x.\n.   @param dy Derivative order in respect of y.\n.   @param ksize Aperture size. It can be CV_SCHARR, 1, 3, 5, or 7.\n.   @param normalize Flag indicating whether to normalize (scale down) the filter coefficients or not.\n.   Theoretically, the coefficients should have the denominator \\f$=2^{ksize*2-dx-dy-2}\\f$. If you are\n.   going to filter floating-point images, you are likely to use the normalized kernels. But if you\n.   compute derivatives of an 8-bit image, store the results in a 16-bit image, and wish to preserve\n.   all the fractional bits, you may want to set normalize=false .\n.   @param ktype Type of filter coefficients. It can be CV_32f or CV_64F .'
    pass

def getFontScaleFromHeight(fontFace, pixelHeight, thickness=None):
    'getFontScaleFromHeight(fontFace, pixelHeight[, thickness]) -> retval\n.   @brief Calculates the font-specific size to use to achieve a given height in pixels.\n.   \n.   @param fontFace Font to use, see cv::HersheyFonts.\n.   @param pixelHeight Pixel height to compute the fontScale for\n.   @param thickness Thickness of lines used to render the text.See putText for details.\n.   @return The fontSize to use for cv::putText\n.   \n.   @see cv::putText'
    pass

def getGaborKernel(ksize, sigma, theta, lambd, gamma, psi=None, ktype=None):
    'getGaborKernel(ksize, sigma, theta, lambd, gamma[, psi[, ktype]]) -> retval\n.   @brief Returns Gabor filter coefficients.\n.   \n.   For more details about gabor filter equations and parameters, see: [Gabor\n.   Filter](http://en.wikipedia.org/wiki/Gabor_filter).\n.   \n.   @param ksize Size of the filter returned.\n.   @param sigma Standard deviation of the gaussian envelope.\n.   @param theta Orientation of the normal to the parallel stripes of a Gabor function.\n.   @param lambd Wavelength of the sinusoidal factor.\n.   @param gamma Spatial aspect ratio.\n.   @param psi Phase offset.\n.   @param ktype Type of filter coefficients. It can be CV_32F or CV_64F .'
    pass

def getGaussianKernel(ksize, sigma, ktype=None):
    'getGaussianKernel(ksize, sigma[, ktype]) -> retval\n.   @brief Returns Gaussian filter coefficients.\n.   \n.   The function computes and returns the \\f$\\texttt{ksize} \\times 1\\f$ matrix of Gaussian filter\n.   coefficients:\n.   \n.   \\f[G_i= \\alpha *e^{-(i-( \\texttt{ksize} -1)/2)^2/(2* \\texttt{sigma}^2)},\\f]\n.   \n.   where \\f$i=0..\\texttt{ksize}-1\\f$ and \\f$\\alpha\\f$ is the scale factor chosen so that \\f$\\sum_i G_i=1\\f$.\n.   \n.   Two of such generated kernels can be passed to sepFilter2D. Those functions automatically recognize\n.   smoothing kernels (a symmetrical kernel with sum of weights equal to 1) and handle them accordingly.\n.   You may also use the higher-level GaussianBlur.\n.   @param ksize Aperture size. It should be odd ( \\f$\\texttt{ksize} \\mod 2 = 1\\f$ ) and positive.\n.   @param sigma Gaussian standard deviation. If it is non-positive, it is computed from ksize as\n.   `sigma = 0.3*((ksize-1)*0.5 - 1) + 0.8`.\n.   @param ktype Type of filter coefficients. It can be CV_32F or CV_64F .\n.   @sa  sepFilter2D, getDerivKernels, getStructuringElement, GaussianBlur'
    pass

def getHardwareFeatureName(feature):
    'getHardwareFeatureName(feature) -> retval\n.   @brief Returns feature name by ID\n.   \n.   Returns empty string if feature is not defined'
    pass

def getNumThreads():
    'getNumThreads() -> retval\n.   @brief Returns the number of threads used by OpenCV for parallel regions.\n.   \n.   Always returns 1 if OpenCV is built without threading support.\n.   \n.   The exact meaning of return value depends on the threading framework used by OpenCV library:\n.   - `TBB` - The number of threads, that OpenCV will try to use for parallel regions. If there is\n.   any tbb::thread_scheduler_init in user code conflicting with OpenCV, then function returns\n.   default number of threads used by TBB library.\n.   - `OpenMP` - An upper bound on the number of threads that could be used to form a new team.\n.   - `Concurrency` - The number of threads, that OpenCV will try to use for parallel regions.\n.   - `GCD` - Unsupported; returns the GCD thread pool limit (512) for compatibility.\n.   - `C=` - The number of threads, that OpenCV will try to use for parallel regions, if before\n.   called setNumThreads with threads \\> 0, otherwise returns the number of logical CPUs,\n.   available for the process.\n.   @sa setNumThreads, getThreadNum'
    pass

def getNumberOfCPUs():
    'getNumberOfCPUs() -> retval\n.   @brief Returns the number of logical CPUs available for the process.'
    pass

def getOptimalDFTSize(vecsize):
    "getOptimalDFTSize(vecsize) -> retval\n.   @brief Returns the optimal DFT size for a given vector size.\n.   \n.   DFT performance is not a monotonic function of a vector size. Therefore, when you calculate\n.   convolution of two arrays or perform the spectral analysis of an array, it usually makes sense to\n.   pad the input data with zeros to get a bit larger array that can be transformed much faster than the\n.   original one. Arrays whose size is a power-of-two (2, 4, 8, 16, 32, ...) are the fastest to process.\n.   Though, the arrays whose size is a product of 2's, 3's, and 5's (for example, 300 = 5\\*5\\*3\\*2\\*2)\n.   are also processed quite efficiently.\n.   \n.   The function cv::getOptimalDFTSize returns the minimum number N that is greater than or equal to vecsize\n.   so that the DFT of a vector of size N can be processed efficiently. In the current implementation N\n.   = 2 ^p^ \\* 3 ^q^ \\* 5 ^r^ for some integer p, q, r.\n.   \n.   The function returns a negative number if vecsize is too large (very close to INT_MAX ).\n.   \n.   While the function cannot be used directly to estimate the optimal vector size for DCT transform\n.   (since the current DCT implementation supports only even-size vectors), it can be easily processed\n.   as getOptimalDFTSize((vecsize+1)/2)\\*2.\n.   @param vecsize vector size.\n.   @sa dft , dct , idft , idct , mulSpectrums"
    pass

def getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize=None, centerPrincipalPoint=None):
    'getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha[, newImgSize[, centerPrincipalPoint]]) -> retval, validPixROI\n.   @brief Returns the new camera matrix based on the free scaling parameter.\n.   \n.   @param cameraMatrix Input camera matrix.\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are\n.   assumed.\n.   @param imageSize Original image size.\n.   @param alpha Free scaling parameter between 0 (when all the pixels in the undistorted image are\n.   valid) and 1 (when all the source image pixels are retained in the undistorted image). See\n.   stereoRectify for details.\n.   @param newImgSize Image size after rectification. By default, it is set to imageSize .\n.   @param validPixROI Optional output rectangle that outlines all-good-pixels region in the\n.   undistorted image. See roi1, roi2 description in stereoRectify .\n.   @param centerPrincipalPoint Optional flag that indicates whether in the new camera matrix the\n.   principal point should be at the image center or not. By default, the principal point is chosen to\n.   best fit a subset of the source image (determined by alpha) to the corrected image.\n.   @return new_camera_matrix Output new camera matrix.\n.   \n.   The function computes and returns the optimal new camera matrix based on the free scaling parameter.\n.   By varying this parameter, you may retrieve only sensible pixels alpha=0 , keep all the original\n.   image pixels if there is valuable information in the corners alpha=1 , or get something in between.\n.   When alpha\\>0 , the undistorted result is likely to have some black pixels corresponding to\n.   "virtual" pixels outside of the captured distorted image. The original camera matrix, distortion\n.   coefficients, the computed new camera matrix, and newImageSize should be passed to\n.   initUndistortRectifyMap to produce the maps for remap .'
    pass

def getPerspectiveTransform(src, dst):
    "getPerspectiveTransform(src, dst) -> retval\n.   @brief Calculates a perspective transform from four pairs of the corresponding points.\n.   \n.   The function calculates the \\f$3 \\times 3\\f$ matrix of a perspective transform so that:\n.   \n.   \\f[\\begin{bmatrix} t_i x'_i \\\\ t_i y'_i \\\\ t_i \\end{bmatrix} = \\texttt{map_matrix} \\cdot \\begin{bmatrix} x_i \\\\ y_i \\\\ 1 \\end{bmatrix}\\f]\n.   \n.   where\n.   \n.   \\f[dst(i)=(x'_i,y'_i), src(i)=(x_i, y_i), i=0,1,2,3\\f]\n.   \n.   @param src Coordinates of quadrangle vertices in the source image.\n.   @param dst Coordinates of the corresponding quadrangle vertices in the destination image.\n.   \n.   @sa  findHomography, warpPerspective, perspectiveTransform"
    pass

def getRectSubPix(image, patchSize, center, patch=None, patchType=None):
    'getRectSubPix(image, patchSize, center[, patch[, patchType]]) -> patch\n.   @brief Retrieves a pixel rectangle from an image with sub-pixel accuracy.\n.   \n.   The function getRectSubPix extracts pixels from src:\n.   \n.   \\f[patch(x, y) = src(x +  \\texttt{center.x} - ( \\texttt{dst.cols} -1)*0.5, y +  \\texttt{center.y} - ( \\texttt{dst.rows} -1)*0.5)\\f]\n.   \n.   where the values of the pixels at non-integer coordinates are retrieved using bilinear\n.   interpolation. Every channel of multi-channel images is processed independently. Also\n.   the image should be a single channel or three channel image. While the center of the\n.   rectangle must be inside the image, parts of the rectangle may be outside.\n.   \n.   @param image Source image.\n.   @param patchSize Size of the extracted patch.\n.   @param center Floating point coordinates of the center of the extracted rectangle within the\n.   source image. The center must be inside the image.\n.   @param patch Extracted patch that has the size patchSize and the same number of channels as src .\n.   @param patchType Depth of the extracted pixels. By default, they have the same depth as src .\n.   \n.   @sa  warpAffine, warpPerspective'
    pass

def getRotationMatrix2D(center, angle, scale):
    'getRotationMatrix2D(center, angle, scale) -> retval\n.   @brief Calculates an affine matrix of 2D rotation.\n.   \n.   The function calculates the following matrix:\n.   \n.   \\f[\\begin{bmatrix} \\alpha &  \\beta & (1- \\alpha )  \\cdot \\texttt{center.x} -  \\beta \\cdot \\texttt{center.y} \\\\ - \\beta &  \\alpha &  \\beta \\cdot \\texttt{center.x} + (1- \\alpha )  \\cdot \\texttt{center.y} \\end{bmatrix}\\f]\n.   \n.   where\n.   \n.   \\f[\\begin{array}{l} \\alpha =  \\texttt{scale} \\cdot \\cos \\texttt{angle} , \\\\ \\beta =  \\texttt{scale} \\cdot \\sin \\texttt{angle} \\end{array}\\f]\n.   \n.   The transformation maps the rotation center to itself. If this is not the target, adjust the shift.\n.   \n.   @param center Center of the rotation in the source image.\n.   @param angle Rotation angle in degrees. Positive values mean counter-clockwise rotation (the\n.   coordinate origin is assumed to be the top-left corner).\n.   @param scale Isotropic scale factor.\n.   \n.   @sa  getAffineTransform, warpAffine, transform'
    pass

def getStructuringElement(shape, ksize, anchor=None):
    'getStructuringElement(shape, ksize[, anchor]) -> retval\n.   @brief Returns a structuring element of the specified size and shape for morphological operations.\n.   \n.   The function constructs and returns the structuring element that can be further passed to #erode,\n.   #dilate or #morphologyEx. But you can also construct an arbitrary binary mask yourself and use it as\n.   the structuring element.\n.   \n.   @param shape Element shape that could be one of #MorphShapes\n.   @param ksize Size of the structuring element.\n.   @param anchor Anchor position within the element. The default value \\f$(-1, -1)\\f$ means that the\n.   anchor is at the center. Note that only the shape of a cross-shaped element depends on the anchor\n.   position. In other cases the anchor just regulates how much the result of the morphological\n.   operation is shifted.'
    pass

def getTextSize(text, fontFace, fontScale, thickness):
    'getTextSize(text, fontFace, fontScale, thickness) -> retval, baseLine\n.   @brief Calculates the width and height of a text string.\n.   \n.   The function cv::getTextSize calculates and returns the size of a box that contains the specified text.\n.   That is, the following code renders some text, the tight box surrounding it, and the baseline: :\n.   @code\n.   String text = "Funny text inside the box";\n.   int fontFace = FONT_HERSHEY_SCRIPT_SIMPLEX;\n.   double fontScale = 2;\n.   int thickness = 3;\n.   \n.   Mat img(600, 800, CV_8UC3, Scalar::all(0));\n.   \n.   int baseline=0;\n.   Size textSize = getTextSize(text, fontFace,\n.   fontScale, thickness, &baseline);\n.   baseline += thickness;\n.   \n.   // center the text\n.   Point textOrg((img.cols - textSize.width)/2,\n.   (img.rows + textSize.height)/2);\n.   \n.   // draw the box\n.   rectangle(img, textOrg + Point(0, baseline),\n.   textOrg + Point(textSize.width, -textSize.height),\n.   Scalar(0,0,255));\n.   // ... and the baseline first\n.   line(img, textOrg + Point(0, thickness),\n.   textOrg + Point(textSize.width, thickness),\n.   Scalar(0, 0, 255));\n.   \n.   // then put the text itself\n.   putText(img, text, textOrg, fontFace, fontScale,\n.   Scalar::all(255), thickness, 8);\n.   @endcode\n.   \n.   @param text Input text string.\n.   @param fontFace Font to use, see #HersheyFonts.\n.   @param fontScale Font scale factor that is multiplied by the font-specific base size.\n.   @param thickness Thickness of lines used to render the text. See #putText for details.\n.   @param[out] baseLine y-coordinate of the baseline relative to the bottom-most text\n.   point.\n.   @return The size of a box that contains the specified text.\n.   \n.   @see putText'
    pass

def getThreadNum():
    "getThreadNum() -> retval\n.   @brief Returns the index of the currently executed thread within the current parallel region. Always\n.   returns 0 if called outside of parallel region.\n.   \n.   @deprecated Current implementation doesn't corresponding to this documentation.\n.   \n.   The exact meaning of the return value depends on the threading framework used by OpenCV library:\n.   - `TBB` - Unsupported with current 4.1 TBB release. Maybe will be supported in future.\n.   - `OpenMP` - The thread number, within the current team, of the calling thread.\n.   - `Concurrency` - An ID for the virtual processor that the current context is executing on (0\n.   for master thread and unique number for others, but not necessary 1,2,3,...).\n.   - `GCD` - System calling thread's ID. Never returns 0 inside parallel region.\n.   - `C=` - The index of the current parallel task.\n.   @sa setNumThreads, getNumThreads"
    pass

def getTickCount():
    'getTickCount() -> retval\n.   @brief Returns the number of ticks.\n.   \n.   The function returns the number of ticks after the certain event (for example, when the machine was\n.   turned on). It can be used to initialize RNG or to measure a function execution time by reading the\n.   tick count before and after the function call.\n.   @sa getTickFrequency, TickMeter'
    pass

def getTickFrequency():
    'getTickFrequency() -> retval\n.   @brief Returns the number of ticks per second.\n.   \n.   The function returns the number of ticks per second. That is, the following code computes the\n.   execution time in seconds:\n.   @code\n.   double t = (double)getTickCount();\n.   // do something ...\n.   t = ((double)getTickCount() - t)/getTickFrequency();\n.   @endcode\n.   @sa getTickCount, TickMeter'
    pass

def getTrackbarPos(trackbarname, winname):
    'getTrackbarPos(trackbarname, winname) -> retval\n.   @brief Returns the trackbar position.\n.   \n.   The function returns the current position of the specified trackbar.\n.   \n.   @note\n.   \n.   [__Qt Backend Only__] winname can be empty (or NULL) if the trackbar is attached to the control\n.   panel.\n.   \n.   @param trackbarname Name of the trackbar.\n.   @param winname Name of the window that is the parent of the trackbar.'
    pass

def getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize):
    'getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize) -> retval\n.'
    pass

def getVersionMajor():
    'getVersionMajor() -> retval\n.   @brief Returns major library version'
    pass

def getVersionMinor():
    'getVersionMinor() -> retval\n.   @brief Returns minor library version'
    pass

def getVersionRevision():
    'getVersionRevision() -> retval\n.   @brief Returns revision field of the library version'
    pass

def getVersionString():
    'getVersionString() -> retval\n.   @brief Returns library version string\n.   \n.   For example "3.4.1-dev".\n.   \n.   @sa getMajorVersion, getMinorVersion, getRevisionVersion'
    pass

def getWindowImageRect(winname):
    'getWindowImageRect(winname) -> retval\n.   @brief Provides rectangle of image in the window.\n.   \n.   The function getWindowImageRect returns the client screen coordinates, width and height of the image rendering area.\n.   \n.   @param winname Name of the window.\n.   \n.   @sa resizeWindow moveWindow'
    pass

def getWindowProperty(winname, prop_id):
    'getWindowProperty(winname, prop_id) -> retval\n.   @brief Provides parameters of a window.\n.   \n.   The function getWindowProperty returns properties of a window.\n.   \n.   @param winname Name of the window.\n.   @param prop_id Window property to retrieve. The following operation flags are available: (cv::WindowPropertyFlags)\n.   \n.   @sa setWindowProperty'
    pass

def goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, corners=None, mask=None, blockSize=None, useHarrisDetector=None, k=None):
    'goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]) -> corners\n.   @brief Determines strong corners on an image.\n.   \n.   The function finds the most prominent corners in the image or in the specified image region, as\n.   described in @cite Shi94\n.   \n.   -   Function calculates the corner quality measure at every source image pixel using the\n.   #cornerMinEigenVal or #cornerHarris .\n.   -   Function performs a non-maximum suppression (the local maximums in *3 x 3* neighborhood are\n.   retained).\n.   -   The corners with the minimal eigenvalue less than\n.   \\f$\\texttt{qualityLevel} \\cdot \\max_{x,y} qualityMeasureMap(x,y)\\f$ are rejected.\n.   -   The remaining corners are sorted by the quality measure in the descending order.\n.   -   Function throws away each corner for which there is a stronger corner at a distance less than\n.   maxDistance.\n.   \n.   The function can be used to initialize a point-based tracker of an object.\n.   \n.   @note If the function is called with different values A and B of the parameter qualityLevel , and\n.   A \\> B, the vector of returned corners with qualityLevel=A will be the prefix of the output vector\n.   with qualityLevel=B .\n.   \n.   @param image Input 8-bit or floating-point 32-bit, single-channel image.\n.   @param corners Output vector of detected corners.\n.   @param maxCorners Maximum number of corners to return. If there are more corners than are found,\n.   the strongest of them is returned. `maxCorners <= 0` implies that no limit on the maximum is set\n.   and all detected corners are returned.\n.   @param qualityLevel Parameter characterizing the minimal accepted quality of image corners. The\n.   parameter value is multiplied by the best corner quality measure, which is the minimal eigenvalue\n.   (see #cornerMinEigenVal ) or the Harris function response (see #cornerHarris ). The corners with the\n.   quality measure less than the product are rejected. For example, if the best corner has the\n.   quality measure = 1500, and the qualityLevel=0.01 , then all the corners with the quality measure\n.   less than 15 are rejected.\n.   @param minDistance Minimum possible Euclidean distance between the returned corners.\n.   @param mask Optional region of interest. If the image is not empty (it needs to have the type\n.   CV_8UC1 and the same size as image ), it specifies the region in which the corners are detected.\n.   @param blockSize Size of an average block for computing a derivative covariation matrix over each\n.   pixel neighborhood. See cornerEigenValsAndVecs .\n.   @param useHarrisDetector Parameter indicating whether to use a Harris detector (see #cornerHarris)\n.   or #cornerMinEigenVal.\n.   @param k Free parameter of the Harris detector.\n.   \n.   @sa  cornerMinEigenVal, cornerHarris, calcOpticalFlowPyrLK, estimateRigidTransform,\n\n\n\ngoodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize[, corners[, useHarrisDetector[, k]]]) -> corners\n.'
    pass

def grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode=None):
    'grabCut(img, mask, rect, bgdModel, fgdModel, iterCount[, mode]) -> mask, bgdModel, fgdModel\n.   @brief Runs the GrabCut algorithm.\n.   \n.   The function implements the [GrabCut image segmentation algorithm](http://en.wikipedia.org/wiki/GrabCut).\n.   \n.   @param img Input 8-bit 3-channel image.\n.   @param mask Input/output 8-bit single-channel mask. The mask is initialized by the function when\n.   mode is set to #GC_INIT_WITH_RECT. Its elements may have one of the #GrabCutClasses.\n.   @param rect ROI containing a segmented object. The pixels outside of the ROI are marked as\n.   "obvious background". The parameter is only used when mode==#GC_INIT_WITH_RECT .\n.   @param bgdModel Temporary array for the background model. Do not modify it while you are\n.   processing the same image.\n.   @param fgdModel Temporary arrays for the foreground model. Do not modify it while you are\n.   processing the same image.\n.   @param iterCount Number of iterations the algorithm should make before returning the result. Note\n.   that the result can be refined with further calls with mode==#GC_INIT_WITH_MASK or\n.   mode==GC_EVAL .\n.   @param mode Operation mode that could be one of the #GrabCutModes'
    pass

def groupRectangles(rectList, groupThreshold, eps=None):
    'groupRectangles(rectList, groupThreshold[, eps]) -> rectList, weights\n.   @overload'
    pass

def haveOpenVX():
    'haveOpenVX() -> retval\n.'
    pass

def hconcat(src, dst=None):
    'hconcat(src[, dst]) -> dst\n.   @overload\n.   @code{.cpp}\n.   std::vector<cv::Mat> matrices = { cv::Mat(4, 1, CV_8UC1, cv::Scalar(1)),\n.   cv::Mat(4, 1, CV_8UC1, cv::Scalar(2)),\n.   cv::Mat(4, 1, CV_8UC1, cv::Scalar(3)),};\n.   \n.   cv::Mat out;\n.   cv::hconcat( matrices, out );\n.   //out:\n.   //[1, 2, 3;\n.   // 1, 2, 3;\n.   // 1, 2, 3;\n.   // 1, 2, 3]\n.   @endcode\n.   @param src input array or vector of matrices. all of the matrices must have the same number of rows and the same depth.\n.   @param dst output array. It has the same number of rows and depth as the src, and the sum of cols of the src.\n.   same depth.'
    pass

class hdf_HDF5(_mod_builtins.object):
    __class__ = hdf_HDF5
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def atdelete(self, atlabel):
        'atdelete(atlabel) -> None\n.   * Delete an attribute from the root group.\n.   *\n.   * @param atlabel the attribute to be deleted.\n.   *\n.   * @note CV_Error() is called if the given attribute does not exist. Use atexists()\n.   * to check whether it exists or not beforehand.\n.   *\n.   * @sa atexists, atwrite, atread'
        pass
    
    def atexists(self, atlabel):
        'atexists(atlabel) -> retval\n.   * Check whether a given attribute exits or not in the root group.\n.   *\n.   * @param atlabel the attribute name to be checked.\n.   * @return true if the attribute exists, false otherwise.\n.   *\n.   * @sa atdelete, atwrite, atread'
        pass
    
    def atread(self, value, atlabel):
        'atread(value, atlabel) -> None\n.   * Read an attribute from the root group.\n.   *\n.   * @param value address where the attribute is read into\n.   * @param atlabel attribute name\n.   *\n.   * The following example demonstrates how to read an attribute of type cv::String:\n.   *\n.   *  @snippet samples/read_write_attributes.cpp snippets_read_str\n.   *\n.   * @note The attribute MUST exist, otherwise CV_Error() is called. Use atexists()\n.   * to check if it exists beforehand.\n.   *\n.   * @sa atexists, atdelete, atwrite\n\n\n\natread(atlabel[, value]) -> value\n.   * Read an attribute from the root group.\n.   *\n.   * @param value attribute value. Currently, only n-d continuous multi-channel arrays are supported.\n.   * @param atlabel attribute name.\n.   *\n.   * @note The attribute MUST exist, otherwise CV_Error() is called. Use atexists()\n.   * to check if it exists beforehand.\n.   *\n.   * @sa atexists, atdelete, atwrite'
        pass
    
    def atwrite(self, value, atlabel):
        'atwrite(value, atlabel) -> None\n.   * Write an attribute inside the root group.\n.   *\n.   * @param value attribute value.\n.   * @param atlabel attribute name.\n.   *\n.   * The following example demonstrates how to write an attribute of type cv::String:\n.   *\n.   *  @snippet samples/read_write_attributes.cpp snippets_write_str\n.   *\n.   * @note CV_Error() is called if the given attribute already exists. Use atexists()\n.   * to check whether it exists or not beforehand. And use atdelete() to delete\n.   * it if it already exists.\n.   *\n.   * @sa atexists, atdelete, atread'
        pass
    
    def close(self):
        'close() -> None\n.   @brief Close and release hdf5 object.'
        pass
    
    def dscreate(self, rows, cols, type, dslabel):
        'dscreate(rows, cols, type, dslabel) -> None\n.   @overload\n\n\n\ndscreate(rows, cols, type, dslabel, compresslevel) -> None\n.   @overload\n\n\n\ndscreate(rows, cols, type, dslabel, compresslevel, dims_chunks) -> None\n.   @overload\n\n\n\ndscreate(n_dims, sizes, type, dslabel) -> None\n.   \n\n\n\ndscreate(n_dims, sizes, type, dslabel, compresslevel) -> None\n.   \n\n\n\ndscreate(sizes, type, dslabel[, compresslevel[, dims_chunks]]) -> None\n.   \n\n\n\ndscreate(n_dims, sizes, type, dslabel, compresslevel, dims_chunks) -> None\n.   @brief Create and allocate storage for n-dimensional dataset, single or multichannel type.\n.   @param n_dims declare number of dimensions\n.   @param sizes array containing sizes for each dimensions\n.   @param type type to be used, e.g., CV_8UC3, CV_32FC1, etc.\n.   @param dslabel specify the hdf5 dataset label. Existing dataset label will cause an error.\n.   @param compresslevel specify the compression level 0-9 to be used, H5_NONE is the default value and means no compression.\n.   The value 0 also means no compression.\n.   A value 9 indicating the best compression ration. Note\n.   that a higher compression level indicates a higher computational cost. It relies\n.   on GNU gzip for compression.\n.   @param dims_chunks each array member specifies chunking sizes to be used for block I/O,\n.   by default NULL means none at all.\n.   @note If the dataset already exists, an exception will be thrown. Existence of the dataset can be checked\n.   using hlexists().\n.   \n.   - See example below that creates a 6 dimensional storage space:\n.   @code{.cpp}\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // create space for 6 dimensional CV_64FC2 matrix\n.   if ( ! h5io->hlexists( "nddata" ) )\n.   int n_dims = 5;\n.   int dsdims[n_dims] = { 100, 100, 20, 10, 5, 5 };\n.   h5io->dscreate( n_dims, sizes, CV_64FC2, "nddata" );\n.   else\n.   printf("DS already created, skipping\\n" );\n.   // release\n.   h5io->close();\n.   @endcode\n.   \n.   @note Activating compression requires internal chunking. Chunking can significantly improve access\n.   speed both at read and write time, especially for windowed access logic that shifts offset inside dataset.\n.   If no custom chunking is specified, the default one will be invoked by the size of **whole** dataset\n.   as single big chunk of data.\n.   \n.   - See example of level 0 compression (shallow) using chunking against the first\n.   dimension, thus storage will consists of 100 chunks of data:\n.   @code{.cpp}\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // create space for 6 dimensional CV_64FC2 matrix\n.   if ( ! h5io->hlexists( "nddata" ) )\n.   int n_dims = 5;\n.   int dsdims[n_dims] = { 100, 100, 20, 10, 5, 5 };\n.   int chunks[n_dims] = {   1, 100, 20, 10, 5, 5 };\n.   h5io->dscreate( n_dims, dsdims, CV_64FC2, "nddata", 0, chunks );\n.   else\n.   printf("DS already created, skipping\\n" );\n.   // release\n.   h5io->close();\n.   @endcode\n.   \n.   @note A value of H5_UNLIMITED inside the **sizes** array means **unlimited** data on that dimension, thus it is\n.   possible to expand anytime such dataset on those unlimited directions. Presence of H5_UNLIMITED on any dimension\n.   **requires** to define custom chunking. No default chunking will be defined in unlimited scenario since the default size\n.   on that dimension will be zero, and will grow once dataset is written. Writing into dataset that has H5_UNLIMITED on\n.   some of its dimension requires dsinsert() instead of dswrite() that allows growth on unlimited dimension instead of\n.   dswrite() that allows to write only in predefined data space.\n.   \n.   - Example below shows a 3 dimensional dataset using no compression with all unlimited sizes and one unit chunking:\n.   @code{.cpp}\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   int n_dims = 3;\n.   int chunks[n_dims] = { 1, 1, 1 };\n.   int dsdims[n_dims] = { cv::hdf::HDF5::H5_UNLIMITED, cv::hdf::HDF5::H5_UNLIMITED, cv::hdf::HDF5::H5_UNLIMITED };\n.   h5io->dscreate( n_dims, dsdims, CV_64FC2, "nddata", cv::hdf::HDF5::H5_NONE, chunks );\n.   // release\n.   h5io->close();\n.   @endcode'
        pass
    
    def dsgetsize(self, dslabel, dims_flag=None):
        'dsgetsize(dslabel[, dims_flag]) -> retval\n.   @brief Fetch dataset sizes\n.   @param dslabel specify the hdf5 dataset label to be measured.\n.   @param dims_flag will fetch dataset dimensions on H5_GETDIMS, dataset maximum dimensions on H5_GETMAXDIMS,\n.   and chunk sizes on H5_GETCHUNKDIMS.\n.   \n.   Returns vector object containing sizes of dataset on each dimensions.\n.   \n.   @note Resulting vector size will match the amount of dataset dimensions. By default H5_GETDIMS will return\n.   actual dataset dimensions. Using H5_GETMAXDIM flag will get maximum allowed dimension which normally match\n.   actual dataset dimension but can hold H5_UNLIMITED value if dataset was prepared in **unlimited** mode on\n.   some of its dimension. It can be useful to check existing dataset dimensions before overwrite it as whole or subset.\n.   Trying to write with oversized source data into dataset target will thrown exception. The H5_GETCHUNKDIMS will\n.   return the dimension of chunk if dataset was created with chunking options otherwise returned vector size\n.   will be zero.'
        pass
    
    def dsgettype(self, dslabel):
        'dsgettype(dslabel) -> retval\n.   @brief Fetch dataset type\n.   @param dslabel specify the hdf5 dataset label to be checked.\n.   \n.   Returns the stored matrix type. This is an identifier compatible with the CvMat type system,\n.   like e.g. CV_16SC5 (16-bit signed 5-channel array), and so on.\n.   \n.   @note Result can be parsed with CV_MAT_CN() to obtain amount of channels and CV_MAT_DEPTH() to obtain native cvdata type.\n.   It is thread safe.'
        pass
    
    def dsinsert(self, Array, dslabel):
        'dsinsert(Array, dslabel) -> None\n.   \n\n\n\ndsinsert(Array, dslabel, dims_offset) -> None\n.   \n\n\n\ndsinsert(Array, dslabel, dims_offset[, dims_counts]) -> None\n.   \n\n\n\ndsinsert(Array, dslabel, dims_offset, dims_counts) -> None\n.   @brief Insert or overwrite a Mat object into specified dataset and auto expand dataset size if **unlimited** property allows.\n.   @param Array specify Mat data array to be written.\n.   @param dslabel specify the target hdf5 dataset label.\n.   @param dims_offset each array member specify the offset location\n.   over dataset\'s each dimensions from where InputArray will be (over)written into dataset.\n.   @param dims_counts each array member specify the amount of data over dataset\'s\n.   each dimensions from InputArray that will be written into dataset.\n.   \n.   Writes Mat object into targeted dataset and **autoexpand** dataset dimension if allowed.\n.   \n.   @note Unlike dswrite(), datasets are **not** created **automatically**. Only Mat is supported and it must be **continuous**.\n.   If dsinsert() happens over outer regions of dataset dimensions and on that dimension of dataset is in **unlimited** mode then\n.   dataset is expanded, otherwise exception is thrown. To create datasets with **unlimited** property on specific or more\n.   dimensions see dscreate() and the optional H5_UNLIMITED flag at creation time. It is not thread safe over same dataset\n.   but multiple datasets can be merged inside a single hdf5 file.\n.   \n.   - Example below creates **unlimited** rows x 100 cols and expands rows 5 times with dsinsert() using single 100x100 CV_64FC2\n.   over the dataset. Final size will have 5x100 rows and 100 cols, reflecting H matrix five times over row\'s span. Chunks size is\n.   100x100 just optimized against the H matrix size having compression disabled. If routine is called multiple times dataset will be\n.   just overwritten:\n.   @code{.cpp}\n.   // dual channel hilbert matrix\n.   cv::Mat H(50, 100, CV_64FC2);\n.   for(int i = 0; i < H.rows; i++)\n.   for(int j = 0; j < H.cols; j++)\n.   {\n.   H.at<cv::Vec2d>(i,j)[0] =  1./(i+j+1);\n.   H.at<cv::Vec2d>(i,j)[1] = -1./(i+j+1);\n.   count++;\n.   }\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // optimise dataset by chunks\n.   int chunks[2] = { 100, 100 };\n.   // create Unlimited x 100 CV_64FC2 space\n.   h5io->dscreate( cv::hdf::HDF5::H5_UNLIMITED, 100, CV_64FC2, "hilbert", cv::hdf::HDF5::H5_NONE, chunks );\n.   // write into first half\n.   int offset[2] = { 0, 0 };\n.   for ( int t = 0; t < 5; t++ )\n.   {\n.   offset[0] += 100 * t;\n.   h5io->dsinsert( H, "hilbert", offset );\n.   }\n.   // release\n.   h5io->close();\n.   @endcode'
        pass
    
    def dsread(self, dslabel, Array=None):
        'dsread(dslabel[, Array]) -> Array\n.   \n\n\n\ndsread(dslabel, dims_offset[, Array]) -> Array\n.   \n\n\n\ndsread(dslabel, dims_offset[, Array[, dims_counts]]) -> Array\n.   \n\n\n\ndsread(dslabel, dims_offset, dims_counts[, Array]) -> Array\n.   @brief Read specific dataset from hdf5 file into Mat object.\n.   @param Array Mat container where data reads will be returned.\n.   @param dslabel specify the source hdf5 dataset label.\n.   @param dims_offset each array member specify the offset location over\n.   each dimensions from where dataset starts to read into OutputArray.\n.   @param dims_counts each array member specify the amount over dataset\'s each\n.   dimensions of dataset to read into OutputArray.\n.   \n.   Reads out Mat object reflecting the stored dataset.\n.   \n.   @note If hdf5 file does not exist an exception will be thrown. Use hlexists() to check dataset presence.\n.   It is thread safe.\n.   \n.   - Example below reads a dataset:\n.   @code{.cpp}\n.   // open hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // blank Mat container\n.   cv::Mat H;\n.   // read hibert dataset\n.   h5io->read( H, "hilbert" );\n.   // release\n.   h5io->close();\n.   @endcode\n.   \n.   - Example below perform read of 3x5 submatrix from second row and third element.\n.   @code{.cpp}\n.   // open hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // blank Mat container\n.   cv::Mat H;\n.   int offset[2] = { 1, 2 };\n.   int counts[2] = { 3, 5 };\n.   // read hibert dataset\n.   h5io->read( H, "hilbert", offset, counts );\n.   // release\n.   h5io->close();\n.   @endcode'
        pass
    
    def dswrite(self, Array, dslabel):
        'dswrite(Array, dslabel) -> None\n.   \n\n\n\ndswrite(Array, dslabel, dims_offset) -> None\n.   \n\n\n\ndswrite(Array, dslabel, dims_offset[, dims_counts]) -> None\n.   \n\n\n\ndswrite(Array, dslabel, dims_offset, dims_counts) -> None\n.   @brief Write or overwrite a Mat object into specified dataset of hdf5 file.\n.   @param Array specify Mat data array to be written.\n.   @param dslabel specify the target hdf5 dataset label.\n.   @param dims_offset each array member specify the offset location\n.   over dataset\'s each dimensions from where InputArray will be (over)written into dataset.\n.   @param dims_counts each array member specifies the amount of data over dataset\'s\n.   each dimensions from InputArray that will be written into dataset.\n.   \n.   Writes Mat object into targeted dataset.\n.   \n.   @note If dataset is not created and does not exist it will be created **automatically**. Only Mat is supported and\n.   it must be **continuous**. It is thread safe but it is recommended that writes to happen over separate non-overlapping\n.   regions. Multiple datasets can be written inside a single hdf5 file.\n.   \n.   - Example below writes a 100x100 CV_64FC2 matrix into a dataset. No dataset pre-creation required. If routine\n.   is called multiple times dataset will be just overwritten:\n.   @code{.cpp}\n.   // dual channel hilbert matrix\n.   cv::Mat H(100, 100, CV_64FC2);\n.   for(int i = 0; i < H.rows; i++)\n.   for(int j = 0; j < H.cols; j++)\n.   {\n.   H.at<cv::Vec2d>(i,j)[0] =  1./(i+j+1);\n.   H.at<cv::Vec2d>(i,j)[1] = -1./(i+j+1);\n.   count++;\n.   }\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // write / overwrite dataset\n.   h5io->dswrite( H, "hilbert" );\n.   // release\n.   h5io->close();\n.   @endcode\n.   \n.   - Example below writes a smaller 50x100 matrix into 100x100 compressed space optimised by two 50x100 chunks.\n.   Matrix is written twice into first half (0->50) and second half (50->100) of data space using offset.\n.   @code{.cpp}\n.   // dual channel hilbert matrix\n.   cv::Mat H(50, 100, CV_64FC2);\n.   for(int i = 0; i < H.rows; i++)\n.   for(int j = 0; j < H.cols; j++)\n.   {\n.   H.at<cv::Vec2d>(i,j)[0] =  1./(i+j+1);\n.   H.at<cv::Vec2d>(i,j)[1] = -1./(i+j+1);\n.   count++;\n.   }\n.   // open / autocreate hdf5 file\n.   cv::Ptr<cv::hdf::HDF5> h5io = cv::hdf::open( "mytest.h5" );\n.   // optimise dataset by two chunks\n.   int chunks[2] = { 50, 100 };\n.   // create 100x100 CV_64FC2 compressed space\n.   h5io->dscreate( 100, 100, CV_64FC2, "hilbert", 9, chunks );\n.   // write into first half\n.   int offset1[2] = { 0, 0 };\n.   h5io->dswrite( H, "hilbert", offset1 );\n.   // write into second half\n.   int offset2[2] = { 50, 0 };\n.   h5io->dswrite( H, "hilbert", offset2 );\n.   // release\n.   h5io->close();\n.   @endcode'
        pass
    
    def grcreate(self, grlabel):
        "grcreate(grlabel) -> None\n.   @brief Create a group.\n.   @param grlabel specify the hdf5 group label.\n.   \n.   Create a hdf5 group with default properties. The group is closed automatically after creation.\n.   \n.   @note Groups are useful for better organising multiple datasets. It is possible to create subgroups within any group.\n.   Existence of a particular group can be checked using hlexists(). In case of subgroups, a label would be e.g: 'Group1/SubGroup1'\n.   where SubGroup1 is within the root group Group1. Before creating a subgroup, its parent group MUST be created.\n.   \n.   - In this example, Group1 will have one subgroup called SubGroup1:\n.   \n.   @snippet samples/create_groups.cpp create_group\n.   \n.   The corresponding result visualized using the HDFView tool is\n.   \n.   ![Visualization of groups using the HDFView tool](pics/create_groups.png)\n.   \n.   @note When a dataset is created with dscreate() or kpcreate(), it can be created within a group by specifying the\n.   full path within the label. In our example, it would be: 'Group1/SubGroup1/MyDataSet'. It is not thread safe."
        pass
    
    def hlexists(self, label):
        'hlexists(label) -> retval\n.   @brief Check if label exists or not.\n.   @param label specify the hdf5 dataset label.\n.   \n.   Returns **true** if dataset exists, and **false** otherwise.\n.   \n.   @note Checks if dataset, group or other object type (hdf5 link) exists under the label name. It is thread safe.'
        pass
    
    def kpgetsize(self, kplabel, dims_flag=None):
        'kpgetsize(kplabel[, dims_flag]) -> retval\n.   @brief Fetch keypoint dataset size\n.   @param kplabel specify the hdf5 dataset label to be measured.\n.   @param dims_flag will fetch dataset dimensions on H5_GETDIMS, and dataset maximum dimensions on H5_GETMAXDIMS.\n.   \n.   Returns size of keypoints dataset.\n.   \n.   @note Resulting size will match the amount of keypoints. By default H5_GETDIMS will return actual dataset dimension.\n.   Using H5_GETMAXDIM flag will get maximum allowed dimension which normally match actual dataset dimension but can hold\n.   H5_UNLIMITED value if dataset was prepared in **unlimited** mode. It can be useful to check existing dataset dimension\n.   before overwrite it as whole or subset. Trying to write with oversized source data into dataset target will thrown\n.   exception. The H5_GETCHUNKDIMS will return the dimension of chunk if dataset was created with chunking options otherwise\n.   returned vector size will be zero.'
        pass
    

class hfs_HfsSegment(Algorithm):
    __class__ = hfs_HfsSegment
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, height, width, segEgbThresholdI=None, minRegionSizeI=None, segEgbThresholdII=None, minRegionSizeII=None, spatialWeight=None, slicSpixelSize=None, numSlicIter=None):
        'create(height, width[, segEgbThresholdI[, minRegionSizeI[, segEgbThresholdII[, minRegionSizeII[, spatialWeight[, slicSpixelSize[, numSlicIter]]]]]]]) -> retval\n.   @brief: create a hfs object\n.   * @param height: the height of the input image\n.   * @param width: the width of the input image\n.   * @param segEgbThresholdI: parameter segEgbThresholdI\n.   * @param minRegionSizeI: parameter minRegionSizeI\n.   * @param segEgbThresholdII: parameter segEgbThresholdII\n.   * @param minRegionSizeII: parameter minRegionSizeII\n.   * @param spatialWeight: parameter spatialWeight\n.   * @param slicSpixelSize: parameter slicSpixelSize\n.   * @param numSlicIter: parameter numSlicIter'
        pass
    
    def getMinRegionSizeI(self):
        'getMinRegionSizeI() -> retval\n.'
        pass
    
    def getMinRegionSizeII(self):
        'getMinRegionSizeII() -> retval\n.'
        pass
    
    def getNumSlicIter(self):
        'getNumSlicIter() -> retval\n.'
        pass
    
    def getSegEgbThresholdI(self):
        'getSegEgbThresholdI() -> retval\n.'
        pass
    
    def getSegEgbThresholdII(self):
        'getSegEgbThresholdII() -> retval\n.'
        pass
    
    def getSlicSpixelSize(self):
        'getSlicSpixelSize() -> retval\n.'
        pass
    
    def getSpatialWeight(self):
        'getSpatialWeight() -> retval\n.'
        pass
    
    def performSegmentCpu(self, src, ifDraw=None):
        'performSegmentCpu(src[, ifDraw]) -> retval\n.   @brief do segmentation with cpu\n.   * This method is only implemented for reference.\n.   * It is highly NOT recommanded to use it.'
        pass
    
    def performSegmentGpu(self, src, ifDraw=None):
        "performSegmentGpu(src[, ifDraw]) -> retval\n.   @brief do segmentation gpu\n.   * @param src: the input image\n.   * @param ifDraw: if draw the image in the returned Mat. if this parameter is false,\n.   * then the content of the returned Mat is a matrix of index, describing the region\n.   * each pixel belongs to. And it's data type is CV_16U. If this parameter is true,\n.   * then the returned Mat is a segmented picture, and color of each region is the\n.   * average color of all pixels in that region. And it's data type is the same as\n.   * the input image"
        pass
    
    def setMinRegionSizeI(self, n):
        "setMinRegionSizeI(n) -> None\n.   @brief: set and get the parameter minRegionSizeI.\n.   * This parameter is used in the second stage\n.   * mentioned above. After the EGB segmentation, regions that have fewer\n.   * pixels then this parameter will be merged into it's adjacent region."
        pass
    
    def setMinRegionSizeII(self, n):
        'setMinRegionSizeII(n) -> None\n.   @brief: set and get the parameter minRegionSizeII.\n.   * This parameter is used in the third stage\n.   * mentioned above. It serves the same purpose as minRegionSizeI'
        pass
    
    def setNumSlicIter(self, n):
        'setNumSlicIter(n) -> None\n.   @brief: set and get the parameter numSlicIter.\n.   * This parameter is used in the first stage. It\n.   * describes how many iteration to perform when executing SLIC.'
        pass
    
    def setSegEgbThresholdI(self, c):
        'setSegEgbThresholdI(c) -> None\n.   @brief: set and get the parameter segEgbThresholdI.\n.   * This parameter is used in the second stage mentioned above.\n.   * It is a constant used to threshold weights of the edge when merging\n.   * adjacent nodes when applying EGB algorithm. The segmentation result\n.   * tends to have more regions remained if this value is large and vice versa.'
        pass
    
    def setSegEgbThresholdII(self, c):
        'setSegEgbThresholdII(c) -> None\n.   @brief: set and get the parameter segEgbThresholdII.\n.   * This parameter is used in the third stage\n.   * mentioned above. It serves the same purpose as segEgbThresholdI.\n.   * The segmentation result tends to have more regions remained if\n.   * this value is large and vice versa.'
        pass
    
    def setSlicSpixelSize(self, n):
        'setSlicSpixelSize(n) -> None\n.   @brief: set and get the parameter slicSpixelSize.\n.   * This parameter is used in the first stage mentioned\n.   * above(the SLIC stage). It describes the size of each\n.   * superpixel when initializing SLIC. Every superpixel\n.   * approximately has \\f$slicSpixelSize \\times slicSpixelSize\\f$\n.   * pixels in the begining.'
        pass
    
    def setSpatialWeight(self, w):
        "setSpatialWeight(w) -> None\n.   @brief: set and get the parameter spatialWeight.\n.   * This parameter is used in the first stage\n.   * mentioned above(the SLIC stage). It describes how important is the role\n.   * of position when calculating the distance between each pixel and it's\n.   * center. The exact formula to calculate the distance is\n.   * \\f$colorDistance + spatialWeight \\times spatialDistance\\f$.\n.   * The segmentation result tends to have more local consistency\n.   * if this value is larger."
        pass
    

def idct(src, dst=None, flags=None):
    'idct(src[, dst[, flags]]) -> dst\n.   @brief Calculates the inverse Discrete Cosine Transform of a 1D or 2D array.\n.   \n.   idct(src, dst, flags) is equivalent to dct(src, dst, flags | DCT_INVERSE).\n.   @param src input floating-point single-channel array.\n.   @param dst output array of the same size and type as src.\n.   @param flags operation flags.\n.   @sa  dct, dft, idft, getOptimalDFTSize'
    pass

def idft(src, dst=None, flags=None, nonzeroRows=None):
    'idft(src[, dst[, flags[, nonzeroRows]]]) -> dst\n.   @brief Calculates the inverse Discrete Fourier Transform of a 1D or 2D array.\n.   \n.   idft(src, dst, flags) is equivalent to dft(src, dst, flags | #DFT_INVERSE) .\n.   @note None of dft and idft scales the result by default. So, you should pass #DFT_SCALE to one of\n.   dft or idft explicitly to make these transforms mutually inverse.\n.   @sa dft, dct, idct, mulSpectrums, getOptimalDFTSize\n.   @param src input floating-point real or complex array.\n.   @param dst output array whose size and type depend on the flags.\n.   @param flags operation flags (see dft and #DftFlags).\n.   @param nonzeroRows number of dst rows to process; the rest of the rows have undefined content (see\n.   the convolution sample in dft description.'
    pass

def illuminationChange(src, mask, dst=None, alpha=None, beta=None):
    'illuminationChange(src, mask[, dst[, alpha[, beta]]]) -> dst\n.   @brief Applying an appropriate non-linear transformation to the gradient field inside the selection and\n.   then integrating back with a Poisson solver, modifies locally the apparent illumination of an image.\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param mask Input 8-bit 1 or 3-channel image.\n.   @param dst Output image with the same size and type as src.\n.   @param alpha Value ranges between 0-2.\n.   @param beta Value ranges between 0-2.\n.   \n.   This is useful to highlight under-exposed foreground objects or to reduce specular reflections.'
    pass

def imdecode(buf, flags):
    'imdecode(buf, flags) -> retval\n.   @brief Reads an image from a buffer in memory.\n.   \n.   The function imdecode reads an image from the specified buffer in the memory. If the buffer is too short or\n.   contains invalid data, the function returns an empty matrix ( Mat::data==NULL ).\n.   \n.   See cv::imread for the list of supported formats and flags description.\n.   \n.   @note In the case of color images, the decoded images will have the channels stored in **B G R** order.\n.   @param buf Input array or vector of bytes.\n.   @param flags The same flags as in cv::imread, see cv::ImreadModes.'
    pass

def imencode(ext, img, params=None):
    'imencode(ext, img[, params]) -> retval, buf\n.   @brief Encodes an image into a memory buffer.\n.   \n.   The function imencode compresses the image and stores it in the memory buffer that is resized to fit the\n.   result. See cv::imwrite for the list of supported formats and flags description.\n.   \n.   @param ext File extension that defines the output format.\n.   @param img Image to be written.\n.   @param buf Output buffer resized to fit the compressed image.\n.   @param params Format-specific parameters. See cv::imwrite and cv::ImwriteFlags.'
    pass

class img_hash_AverageHash(img_hash_ImgHashBase):
    __class__ = img_hash_AverageHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    

class img_hash_BlockMeanHash(img_hash_ImgHashBase):
    __class__ = img_hash_BlockMeanHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, mode=None):
        'create([, mode]) -> retval\n.'
        pass
    
    def getMean(self):
        'getMean() -> retval\n.'
        pass
    
    def setMode(self, mode):
        'setMode(mode) -> None\n.   @brief Create BlockMeanHash object\n.   @param mode'
        pass
    

class img_hash_ColorMomentHash(img_hash_ImgHashBase):
    __class__ = img_hash_ColorMomentHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    

class img_hash_ImgHashBase(_mod_builtins.object):
    __class__ = img_hash_ImgHashBase
    def __delattr__(self, name):
        'Implement delattr(self, name).'
        return None
    
    def __eq__(self, value):
        'Return self==value.'
        return False
    
    def __ge__(self, value):
        'Return self>=value.'
        return False
    
    def __getattribute__(self, name):
        'Return getattr(self, name).'
        pass
    
    def __gt__(self, value):
        'Return self>value.'
        return False
    
    def __hash__(self):
        'Return hash(self).'
        return 0
    
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __le__(self, value):
        'Return self<=value.'
        return False
    
    def __lt__(self, value):
        'Return self<value.'
        return False
    
    def __ne__(self, value):
        'Return self!=value.'
        return False
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    def __setattr__(self, name, value):
        'Implement setattr(self, name, value).'
        return None
    
    def __str__(self):
        'Return str(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compare(self, hashOne, hashTwo):
        'compare(hashOne, hashTwo) -> retval\n.   @brief Compare the hash value between inOne and inTwo\n.   @param hashOne Hash value one\n.   @param hashTwo Hash value two\n.   @return value indicate similarity between inOne and inTwo, the meaning\n.   of the value vary from algorithms to algorithms'
        pass
    
    def compute(self, inputArr, outputArr=None):
        'compute(inputArr[, outputArr]) -> outputArr\n.   @brief Computes hash of the input image\n.   @param inputArr input image want to compute hash value\n.   @param outputArr hash of the image'
        pass
    

class img_hash_MarrHildrethHash(img_hash_ImgHashBase):
    __class__ = img_hash_MarrHildrethHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create([, alpha[, scale]]) -> retval\n.   @param alpha int scale factor for marr wavelet (default=2).\n.   @param scale int level of scale factor (default = 1)'
        pass
    
    def getAlpha(self):
        'getAlpha() -> retval\n.   * @brief self explain'
        pass
    
    def getScale(self):
        'getScale() -> retval\n.   * @brief self explain'
        pass
    
    def setKernelParam(self, alpha, scale):
        'setKernelParam(alpha, scale) -> None\n.   @brief Set Mh kernel parameters\n.   @param alpha int scale factor for marr wavelet (default=2).\n.   @param scale int level of scale factor (default = 1)'
        pass
    

class img_hash_PHash(img_hash_ImgHashBase):
    __class__ = img_hash_PHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    

class img_hash_RadialVarianceHash(img_hash_ImgHashBase):
    __class__ = img_hash_RadialVarianceHash
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, sigma=None, numOfAngleLine=None):
        'create([, sigma[, numOfAngleLine]]) -> retval\n.'
        pass
    
    def getNumOfAngleLine(self):
        'getNumOfAngleLine() -> retval\n.'
        pass
    
    def getSigma(self):
        'getSigma() -> retval\n.'
        pass
    
    def setNumOfAngleLine(self, value):
        'setNumOfAngleLine(value) -> None\n.'
        pass
    
    def setSigma(self, value):
        'setSigma(value) -> None\n.'
        pass
    

def imread(filename, flags=None):
    'imread(filename[, flags]) -> retval\n.   @brief Loads an image from a file.\n.   \n.   @anchor imread\n.   \n.   The function imread loads an image from the specified file and returns it. If the image cannot be\n.   read (because of missing file, improper permissions, unsupported or invalid format), the function\n.   returns an empty matrix ( Mat::data==NULL ).\n.   \n.   Currently, the following file formats are supported:\n.   \n.   -   Windows bitmaps - \\*.bmp, \\*.dib (always supported)\n.   -   JPEG files - \\*.jpeg, \\*.jpg, \\*.jpe (see the *Notes* section)\n.   -   JPEG 2000 files - \\*.jp2 (see the *Notes* section)\n.   -   Portable Network Graphics - \\*.png (see the *Notes* section)\n.   -   WebP - \\*.webp (see the *Notes* section)\n.   -   Portable image format - \\*.pbm, \\*.pgm, \\*.ppm \\*.pxm, \\*.pnm (always supported)\n.   -   Sun rasters - \\*.sr, \\*.ras (always supported)\n.   -   TIFF files - \\*.tiff, \\*.tif (see the *Notes* section)\n.   -   OpenEXR Image files - \\*.exr (see the *Notes* section)\n.   -   Radiance HDR - \\*.hdr, \\*.pic (always supported)\n.   -   Raster and Vector geospatial data supported by Gdal (see the *Notes* section)\n.   \n.   @note\n.   \n.   -   The function determines the type of an image by the content, not by the file extension.\n.   -   In the case of color images, the decoded images will have the channels stored in **B G R** order.\n.   -   On Microsoft Windows\\* OS and MacOSX\\*, the codecs shipped with an OpenCV image (libjpeg,\n.   libpng, libtiff, and libjasper) are used by default. So, OpenCV can always read JPEGs, PNGs,\n.   and TIFFs. On MacOSX, there is also an option to use native MacOSX image readers. But beware\n.   that currently these native image loaders give images with different pixel values because of\n.   the color management embedded into MacOSX.\n.   -   On Linux\\*, BSD flavors and other Unix-like open-source operating systems, OpenCV looks for\n.   codecs supplied with an OS image. Install the relevant packages (do not forget the development\n.   files, for example, "libjpeg-dev", in Debian\\* and Ubuntu\\*) to get the codec support or turn\n.   on the OPENCV_BUILD_3RDPARTY_LIBS flag in CMake.\n.   -   In the case you set *WITH_GDAL* flag to true in CMake and @ref IMREAD_LOAD_GDAL to load the image,\n.   then [GDAL](http://www.gdal.org) driver will be used in order to decode the image by supporting\n.   the following formats: [Raster](http://www.gdal.org/formats_list.html),\n.   [Vector](http://www.gdal.org/ogr_formats.html).\n.   -   If EXIF information are embedded in the image file, the EXIF orientation will be taken into account\n.   and thus the image will be rotated accordingly except if the flag @ref IMREAD_IGNORE_ORIENTATION is passed.\n.   @param filename Name of file to be loaded.\n.   @param flags Flag that can take values of cv::ImreadModes'
    pass

def imreadmulti(filename, mats=None, flags=None):
    'imreadmulti(filename[, mats[, flags]]) -> retval, mats\n.   @brief Loads a multi-page image from a file.\n.   \n.   The function imreadmulti loads a multi-page image from the specified file into a vector of Mat objects.\n.   @param filename Name of file to be loaded.\n.   @param flags Flag that can take values of cv::ImreadModes, default with cv::IMREAD_ANYCOLOR.\n.   @param mats A vector of Mat objects holding each page, if more than one.\n.   @sa cv::imread'
    pass

def imshow(winname, mat):
    'imshow(winname, mat) -> None\n.   @brief Displays an image in the specified window.\n.   \n.   The function imshow displays an image in the specified window. If the window was created with the\n.   cv::WINDOW_AUTOSIZE flag, the image is shown with its original size, however it is still limited by the screen resolution.\n.   Otherwise, the image is scaled to fit the window. The function may scale the image, depending on its depth:\n.   \n.   -   If the image is 8-bit unsigned, it is displayed as is.\n.   -   If the image is 16-bit unsigned or 32-bit integer, the pixels are divided by 256. That is, the\n.   value range [0,255\\*256] is mapped to [0,255].\n.   -   If the image is 32-bit or 64-bit floating-point, the pixel values are multiplied by 255. That is, the\n.   value range [0,1] is mapped to [0,255].\n.   \n.   If window was created with OpenGL support, cv::imshow also support ogl::Buffer , ogl::Texture2D and\n.   cuda::GpuMat as input.\n.   \n.   If the window was not created before this function, it is assumed creating a window with cv::WINDOW_AUTOSIZE.\n.   \n.   If you need to show an image that is bigger than the screen resolution, you will need to call namedWindow("", WINDOW_NORMAL) before the imshow.\n.   \n.   @note This function should be followed by cv::waitKey function which displays the image for specified\n.   milliseconds. Otherwise, it won\'t display the image. For example, **waitKey(0)** will display the window\n.   infinitely until any keypress (it is suitable for image display). **waitKey(25)** will display a frame\n.   for 25 ms, after which display will be automatically closed. (If you put it in a loop to read\n.   videos, it will display the video frame-by-frame)\n.   \n.   @note\n.   \n.   [__Windows Backend Only__] Pressing Ctrl+C will copy the image to the clipboard.\n.   \n.   [__Windows Backend Only__] Pressing Ctrl+S will show a dialog to save the image.\n.   \n.   @param winname Name of the window.\n.   @param mat Image to be shown.'
    pass

def imwrite(filename, img, params=None):
    "imwrite(filename, img[, params]) -> retval\n.   @brief Saves an image to a specified file.\n.   \n.   The function imwrite saves the image to the specified file. The image format is chosen based on the\n.   filename extension (see cv::imread for the list of extensions). Only 8-bit (or 16-bit unsigned (CV_16U)\n.   in case of PNG, JPEG 2000, and TIFF) single-channel or 3-channel (with 'BGR' channel order) images\n.   can be saved using this function. If the format, depth or channel order is different, use\n.   Mat::convertTo , and cv::cvtColor to convert it before saving. Or, use the universal FileStorage I/O\n.   functions to save the image to XML or YAML format.\n.   \n.   It is possible to store PNG images with an alpha channel using this function. To do this, create\n.   8-bit (or 16-bit) 4-channel image BGRA, where the alpha channel goes last. Fully transparent pixels\n.   should have alpha set to 0, fully opaque pixels should have alpha set to 255/65535.\n.   \n.   The sample below shows how to create such a BGRA image and store to PNG file. It also demonstrates how to set custom\n.   compression parameters :\n.   @include snippets/imgcodecs_imwrite.cpp\n.   @param filename Name of the file.\n.   @param img Image to be saved.\n.   @param params Format-specific parameters encoded as pairs (paramId_1, paramValue_1, paramId_2, paramValue_2, ... .) see cv::ImwriteFlags"
    pass

def inRange(src, lowerb, upperb, dst=None):
    'inRange(src, lowerb, upperb[, dst]) -> dst\n.   @brief  Checks if array elements lie between the elements of two other arrays.\n.   \n.   The function checks the range as follows:\n.   -   For every element of a single-channel input array:\n.   \\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0  \\leq \\texttt{src} (I)_0 \\leq  \\texttt{upperb} (I)_0\\f]\n.   -   For two-channel arrays:\n.   \\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0  \\leq \\texttt{src} (I)_0 \\leq  \\texttt{upperb} (I)_0  \\land \\texttt{lowerb} (I)_1  \\leq \\texttt{src} (I)_1 \\leq  \\texttt{upperb} (I)_1\\f]\n.   -   and so forth.\n.   \n.   That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the\n.   specified 1D, 2D, 3D, ... box and 0 otherwise.\n.   \n.   When the lower and/or upper boundary parameters are scalars, the indexes\n.   (I) at lowerb and upperb in the above formulas should be omitted.\n.   @param src first input array.\n.   @param lowerb inclusive lower boundary array or a scalar.\n.   @param upperb inclusive upper boundary array or a scalar.\n.   @param dst output array of the same size as src and CV_8U type.'
    pass

def initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio=None):
    'initCameraMatrix2D(objectPoints, imagePoints, imageSize[, aspectRatio]) -> retval\n.   @brief Finds an initial camera matrix from 3D-2D point correspondences.\n.   \n.   @param objectPoints Vector of vectors of the calibration pattern points in the calibration pattern\n.   coordinate space. In the old interface all the per-view vectors are concatenated. See\n.   calibrateCamera for details.\n.   @param imagePoints Vector of vectors of the projections of the calibration pattern points. In the\n.   old interface all the per-view vectors are concatenated.\n.   @param imageSize Image size in pixels used to initialize the principal point.\n.   @param aspectRatio If it is zero or negative, both \\f$f_x\\f$ and \\f$f_y\\f$ are estimated independently.\n.   Otherwise, \\f$f_x = f_y * \\texttt{aspectRatio}\\f$ .\n.   \n.   The function estimates and returns an initial camera matrix for the camera calibration process.\n.   Currently, the function only supports planar calibration patterns, which are patterns where each\n.   object point has z-coordinate =0.'
    pass

def initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1=None, map2=None):
    "initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type[, map1[, map2]]) -> map1, map2\n.   @brief Computes the undistortion and rectification transformation map.\n.   \n.   The function computes the joint undistortion and rectification transformation and represents the\n.   result in the form of maps for remap. The undistorted image looks like original, as if it is\n.   captured with a camera using the camera matrix =newCameraMatrix and zero distortion. In case of a\n.   monocular camera, newCameraMatrix is usually equal to cameraMatrix, or it can be computed by\n.   #getOptimalNewCameraMatrix for a better control over scaling. In case of a stereo camera,\n.   newCameraMatrix is normally set to P1 or P2 computed by #stereoRectify .\n.   \n.   Also, this new camera is oriented differently in the coordinate space, according to R. That, for\n.   example, helps to align two heads of a stereo camera so that the epipolar lines on both images\n.   become horizontal and have the same y- coordinate (in case of a horizontally aligned stereo camera).\n.   \n.   The function actually builds the maps for the inverse mapping algorithm that is used by remap. That\n.   is, for each pixel \\f$(u, v)\\f$ in the destination (corrected and rectified) image, the function\n.   computes the corresponding coordinates in the source image (that is, in the original image from\n.   camera). The following process is applied:\n.   \\f[\n.   \\begin{array}{l}\n.   x  \\leftarrow (u - {c'}_x)/{f'}_x  \\\\\n.   y  \\leftarrow (v - {c'}_y)/{f'}_y  \\\\\n.   {[X\\,Y\\,W]} ^T  \\leftarrow R^{-1}*[x \\, y \\, 1]^T  \\\\\n.   x'  \\leftarrow X/W  \\\\\n.   y'  \\leftarrow Y/W  \\\\\n.   r^2  \\leftarrow x'^2 + y'^2 \\\\\n.   x''  \\leftarrow x' \\frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6}\n.   + 2p_1 x' y' + p_2(r^2 + 2 x'^2)  + s_1 r^2 + s_2 r^4\\\\\n.   y''  \\leftarrow y' \\frac{1 + k_1 r^2 + k_2 r^4 + k_3 r^6}{1 + k_4 r^2 + k_5 r^4 + k_6 r^6}\n.   + p_1 (r^2 + 2 y'^2) + 2 p_2 x' y' + s_3 r^2 + s_4 r^4 \\\\\n.   s\\vecthree{x'''}{y'''}{1} =\n.   \\vecthreethree{R_{33}(\\tau_x, \\tau_y)}{0}{-R_{13}((\\tau_x, \\tau_y)}\n.   {0}{R_{33}(\\tau_x, \\tau_y)}{-R_{23}(\\tau_x, \\tau_y)}\n.   {0}{0}{1} R(\\tau_x, \\tau_y) \\vecthree{x''}{y''}{1}\\\\\n.   map_x(u,v)  \\leftarrow x''' f_x + c_x  \\\\\n.   map_y(u,v)  \\leftarrow y''' f_y + c_y\n.   \\end{array}\n.   \\f]\n.   where \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$\n.   are the distortion coefficients.\n.   \n.   In case of a stereo camera, this function is called twice: once for each camera head, after\n.   stereoRectify, which in its turn is called after #stereoCalibrate. But if the stereo camera\n.   was not calibrated, it is still possible to compute the rectification transformations directly from\n.   the fundamental matrix using #stereoRectifyUncalibrated. For each camera, the function computes\n.   homography H as the rectification transformation in a pixel domain, not a rotation matrix R in 3D\n.   space. R can be computed from H as\n.   \\f[\\texttt{R} = \\texttt{cameraMatrix} ^{-1} \\cdot \\texttt{H} \\cdot \\texttt{cameraMatrix}\\f]\n.   where cameraMatrix can be chosen arbitrarily.\n.   \n.   @param cameraMatrix Input camera matrix \\f$A=\\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$\n.   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.\n.   @param R Optional rectification transformation in the object space (3x3 matrix). R1 or R2 ,\n.   computed by #stereoRectify can be passed here. If the matrix is empty, the identity transformation\n.   is assumed. In cvInitUndistortMap R assumed to be an identity matrix.\n.   @param newCameraMatrix New camera matrix \\f$A'=\\vecthreethree{f_x'}{0}{c_x'}{0}{f_y'}{c_y'}{0}{0}{1}\\f$.\n.   @param size Undistorted image size.\n.   @param m1type Type of the first output map that can be CV_32FC1, CV_32FC2 or CV_16SC2, see #convertMaps\n.   @param map1 The first output map.\n.   @param map2 The second output map."
    pass

def initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type, map1=None, map2=None, projType=None, alpha=None):
    'initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type[, map1[, map2[, projType[, alpha]]]]) -> retval, map1, map2\n.'
    pass

def inpaint(src, inpaintMask, inpaintRadius, flags, dst=None):
    'inpaint(src, inpaintMask, inpaintRadius, flags[, dst]) -> dst\n.   @brief Restores the selected region in an image using the region neighborhood.\n.   \n.   @param src Input 8-bit, 16-bit unsigned or 32-bit float 1-channel or 8-bit 3-channel image.\n.   @param inpaintMask Inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that\n.   needs to be inpainted.\n.   @param dst Output image with the same size and type as src .\n.   @param inpaintRadius Radius of a circular neighborhood of each point inpainted that is considered\n.   by the algorithm.\n.   @param flags Inpainting method that could be one of the following:\n.   -   **INPAINT_NS** Navier-Stokes based method [Navier01]\n.   -   **INPAINT_TELEA** Method by Alexandru Telea @cite Telea04 .\n.   \n.   The function reconstructs the selected image area from the pixel near the area boundary. The\n.   function may be used to remove dust and scratches from a scanned photo, or to remove undesirable\n.   objects from still images or video. See <http://en.wikipedia.org/wiki/Inpainting> for more details.\n.   \n.   @note\n.   -   An example using the inpainting technique can be found at\n.   opencv_source_code/samples/cpp/inpaint.cpp\n.   -   (Python) An example using the inpainting technique can be found at\n.   opencv_source_code/samples/python/inpaint.py'
    pass

def insertChannel():
    'insertChannel(src, dst, coi) -> dst\n.   @brief Inserts a single channel to dst (coi is 0-based index)\n.   @param src input array\n.   @param dst output array\n.   @param coi index of channel for insertion\n.   @sa mixChannels, merge'
    pass

def integral(src, sum=None, sdepth=None):
    'integral(src[, sum[, sdepth]]) -> sum\n.   @overload'
    pass

def integral2(src, sum=None, sqsum=None, sdepth=None, sqdepth=None):
    'integral2(src[, sum[, sqsum[, sdepth[, sqdepth]]]]) -> sum, sqsum\n.   @overload'
    pass

def integral3(src, sum=None, sqsum=None, tilted=None, sdepth=None, sqdepth=None):
    'integral3(src[, sum[, sqsum[, tilted[, sdepth[, sqdepth]]]]]) -> sum, sqsum, tilted\n.   @brief Calculates the integral of an image.\n.   \n.   The function calculates one or more integral images for the source image as follows:\n.   \n.   \\f[\\texttt{sum} (X,Y) =  \\sum _{x<X,y<Y}  \\texttt{image} (x,y)\\f]\n.   \n.   \\f[\\texttt{sqsum} (X,Y) =  \\sum _{x<X,y<Y}  \\texttt{image} (x,y)^2\\f]\n.   \n.   \\f[\\texttt{tilted} (X,Y) =  \\sum _{y<Y,abs(x-X+1) \\leq Y-y-1}  \\texttt{image} (x,y)\\f]\n.   \n.   Using these integral images, you can calculate sum, mean, and standard deviation over a specific\n.   up-right or rotated rectangular region of the image in a constant time, for example:\n.   \n.   \\f[\\sum _{x_1 \\leq x < x_2,  \\, y_1  \\leq y < y_2}  \\texttt{image} (x,y) =  \\texttt{sum} (x_2,y_2)- \\texttt{sum} (x_1,y_2)- \\texttt{sum} (x_2,y_1)+ \\texttt{sum} (x_1,y_1)\\f]\n.   \n.   It makes possible to do a fast blurring or fast block correlation with a variable window size, for\n.   example. In case of multi-channel images, sums for each channel are accumulated independently.\n.   \n.   As a practical example, the next figure shows the calculation of the integral of a straight\n.   rectangle Rect(3,3,3,2) and of a tilted rectangle Rect(5,1,2,3) . The selected pixels in the\n.   original image are shown, as well as the relative pixels in the integral images sum and tilted .\n.   \n.   ![integral calculation example](pics/integral.png)\n.   \n.   @param src input image as \\f$W \\times H\\f$, 8-bit or floating-point (32f or 64f).\n.   @param sum integral image as \\f$(W+1)\\times (H+1)\\f$ , 32-bit integer or floating-point (32f or 64f).\n.   @param sqsum integral image for squared pixel values; it is \\f$(W+1)\\times (H+1)\\f$, double-precision\n.   floating-point (64f) array.\n.   @param tilted integral for the image rotated by 45 degrees; it is \\f$(W+1)\\times (H+1)\\f$ array with\n.   the same data type as sum.\n.   @param sdepth desired depth of the integral and the tilted integral images, CV_32S, CV_32F, or\n.   CV_64F.\n.   @param sqdepth desired depth of the integral image of squared pixel values, CV_32F or CV_64F.'
    pass

def intersectConvexConvex(_p1, _p2, _p12=None, handleNested=None):
    'intersectConvexConvex(_p1, _p2[, _p12[, handleNested]]) -> retval, _p12\n.'
    pass

def invert(src, dst=None, flags=None):
    'invert(src[, dst[, flags]]) -> retval, dst\n.   @brief Finds the inverse or pseudo-inverse of a matrix.\n.   \n.   The function cv::invert inverts the matrix src and stores the result in dst\n.   . When the matrix src is singular or non-square, the function calculates\n.   the pseudo-inverse matrix (the dst matrix) so that norm(src\\*dst - I) is\n.   minimal, where I is an identity matrix.\n.   \n.   In case of the #DECOMP_LU method, the function returns non-zero value if\n.   the inverse has been successfully calculated and 0 if src is singular.\n.   \n.   In case of the #DECOMP_SVD method, the function returns the inverse\n.   condition number of src (the ratio of the smallest singular value to the\n.   largest singular value) and 0 if src is singular. The SVD method\n.   calculates a pseudo-inverse matrix if src is singular.\n.   \n.   Similarly to #DECOMP_LU, the method #DECOMP_CHOLESKY works only with\n.   non-singular square matrices that should also be symmetrical and\n.   positively defined. In this case, the function stores the inverted\n.   matrix in dst and returns non-zero. Otherwise, it returns 0.\n.   \n.   @param src input floating-point M x N matrix.\n.   @param dst output matrix of N x M size and the same type as src.\n.   @param flags inversion method (cv::DecompTypes)\n.   @sa solve, SVD'
    pass

def invertAffineTransform(M, iM=None):
    'invertAffineTransform(M[, iM]) -> iM\n.   @brief Inverts an affine transformation.\n.   \n.   The function computes an inverse affine transformation represented by \\f$2 \\times 3\\f$ matrix M:\n.   \n.   \\f[\\begin{bmatrix} a_{11} & a_{12} & b_1  \\\\ a_{21} & a_{22} & b_2 \\end{bmatrix}\\f]\n.   \n.   The result is also a \\f$2 \\times 3\\f$ matrix of the same type as M.\n.   \n.   @param M Original affine transformation.\n.   @param iM Output reverse affine transformation.'
    pass

def isContourConvex(contour):
    'isContourConvex(contour) -> retval\n.   @brief Tests a contour convexity.\n.   \n.   The function tests whether the input contour is convex or not. The contour must be simple, that is,\n.   without self-intersections. Otherwise, the function output is undefined.\n.   \n.   @param contour Input vector of 2D points, stored in std::vector\\<\\> or Mat'
    pass

def kmeans(data, K, bestLabels, criteria, attempts, flags, centers=None):
    'kmeans(data, K, bestLabels, criteria, attempts, flags[, centers]) -> retval, bestLabels, centers\n.   @brief Finds centers of clusters and groups input samples around the clusters.\n.   \n.   The function kmeans implements a k-means algorithm that finds the centers of cluster_count clusters\n.   and groups the input samples around the clusters. As an output, \\f$\\texttt{labels}_i\\f$ contains a\n.   0-based cluster index for the sample stored in the \\f$i^{th}\\f$ row of the samples matrix.\n.   \n.   @note\n.   -   (Python) An example on K-means clustering can be found at\n.   opencv_source_code/samples/python/kmeans.py\n.   @param data Data for clustering. An array of N-Dimensional points with float coordinates is needed.\n.   Examples of this array can be:\n.   -   Mat points(count, 2, CV_32F);\n.   -   Mat points(count, 1, CV_32FC2);\n.   -   Mat points(1, count, CV_32FC2);\n.   -   std::vector\\<cv::Point2f\\> points(sampleCount);\n.   @param K Number of clusters to split the set by.\n.   @param bestLabels Input/output integer array that stores the cluster indices for every sample.\n.   @param criteria The algorithm termination criteria, that is, the maximum number of iterations and/or\n.   the desired accuracy. The accuracy is specified as criteria.epsilon. As soon as each of the cluster\n.   centers moves by less than criteria.epsilon on some iteration, the algorithm stops.\n.   @param attempts Flag to specify the number of times the algorithm is executed using different\n.   initial labellings. The algorithm returns the labels that yield the best compactness (see the last\n.   function parameter).\n.   @param flags Flag that can take values of cv::KmeansFlags\n.   @param centers Output matrix of the cluster centers, one row per each cluster center.\n.   @return The function returns the compactness measure that is computed as\n.   \\f[\\sum _i  \\| \\texttt{samples} _i -  \\texttt{centers} _{ \\texttt{labels} _i} \\| ^2\\f]\n.   after every attempt. The best (minimum) value is chosen and the corresponding labels and the\n.   compactness value are returned by the function. Basically, you can use only the core of the\n.   function, set the number of attempts to 1, initialize labels each time using a custom algorithm,\n.   pass them with the ( flags = #KMEANS_USE_INITIAL_LABELS ) flag, and then choose the best\n.   (most-compact) clustering.'
    pass

def line(img, pt1, pt2, color, thickness=None, lineType=None, shift=None):
    'line(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img\n.   @brief Draws a line segment connecting two points.\n.   \n.   The function line draws the line segment between pt1 and pt2 points in the image. The line is\n.   clipped by the image boundaries. For non-antialiased lines with integer coordinates, the 8-connected\n.   or 4-connected Bresenham algorithm is used. Thick lines are drawn with rounding endings. Antialiased\n.   lines are drawn using Gaussian filtering.\n.   \n.   @param img Image.\n.   @param pt1 First point of the line segment.\n.   @param pt2 Second point of the line segment.\n.   @param color Line color.\n.   @param thickness Line thickness.\n.   @param lineType Type of the line. See #LineTypes.\n.   @param shift Number of fractional bits in the point coordinates.'
    pass

class line_descriptor_KeyLine(_mod_builtins.object):
    __class__ = line_descriptor_KeyLine
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def angle(self):
        'angle'
        pass
    
    @property
    def class_id(self):
        'class_id'
        pass
    
    @property
    def ePointInOctaveX(self):
        'ePointInOctaveX'
        pass
    
    @property
    def ePointInOctaveY(self):
        'ePointInOctaveY'
        pass
    
    @property
    def endPointX(self):
        'endPointX'
        pass
    
    @property
    def endPointY(self):
        'endPointY'
        pass
    
    def getEndPoint(self):
        'getEndPoint() -> retval\n.   Returns the end point of the line in the original image'
        pass
    
    def getEndPointInOctave(self):
        'getEndPointInOctave() -> retval\n.   Returns the end point of the line in the octave it was extracted from'
        pass
    
    def getStartPoint(self):
        'getStartPoint() -> retval\n.   Returns the start point of the line in the original image'
        pass
    
    def getStartPointInOctave(self):
        'getStartPointInOctave() -> retval\n.   Returns the start point of the line in the octave it was extracted from'
        pass
    
    @property
    def lineLength(self):
        'lineLength'
        pass
    
    @property
    def numOfPixels(self):
        'numOfPixels'
        pass
    
    @property
    def octave(self):
        'octave'
        pass
    
    @property
    def pt(self):
        'pt'
        pass
    
    @property
    def response(self):
        'response'
        pass
    
    @property
    def sPointInOctaveX(self):
        'sPointInOctaveX'
        pass
    
    @property
    def sPointInOctaveY(self):
        'sPointInOctaveY'
        pass
    
    @property
    def size(self):
        'size'
        pass
    
    @property
    def startPointX(self):
        'startPointX'
        pass
    
    @property
    def startPointY(self):
        'startPointY'
        pass
    

class line_descriptor_LSDDetector(Algorithm):
    __class__ = line_descriptor_LSDDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def createLSDDetector(cls):
        'createLSDDetector() -> retval\n.   @brief Creates ad LSDDetector object, using smart pointers.'
        pass
    
    def detect(self, image, scale, numOctaves, mask=None):
        'detect(image, scale, numOctaves[, mask]) -> keypoints\n.   @brief Detect lines inside an image.\n.   \n.   @param image input image\n.   @param keypoints vector that will store extracted lines for one or more images\n.   @param scale scale factor used in pyramids generation\n.   @param numOctaves number of octaves inside pyramid\n.   @param mask mask matrix to detect only KeyLines of interest\n\n\n\ndetect(images, keylines, scale, numOctaves[, masks]) -> None\n.   @overload\n.   @param images input images\n.   @param keylines set of vectors that will store extracted lines for one or more images\n.   @param scale scale factor used in pyramids generation\n.   @param numOctaves number of octaves inside pyramid\n.   @param masks vector of mask matrices to detect only KeyLines of interest from each input image'
        pass
    

def linearPolar(src, center, maxRadius, flags, dst=None):
    'linearPolar(src, center, maxRadius, flags[, dst]) -> dst\n.   @brief Remaps an image to polar coordinates space.\n.   \n.   @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags)\n.   \n.   @internal\n.   Transform the source image using the following transformation (See @ref polar_remaps_reference_image "Polar remaps reference image c)"):\n.   \\f[\\begin{array}{l}\n.   dst( \\rho , \\phi ) = src(x,y) \\\\\n.   dst.size() \\leftarrow src.size()\n.   \\end{array}\\f]\n.   \n.   where\n.   \\f[\\begin{array}{l}\n.   I = (dx,dy) = (x - center.x,y - center.y) \\\\\n.   \\rho = Kmag \\cdot \\texttt{magnitude} (I) ,\\\\\n.   \\phi = angle \\cdot \\texttt{angle} (I)\n.   \\end{array}\\f]\n.   \n.   and\n.   \\f[\\begin{array}{l}\n.   Kx = src.cols / maxRadius \\\\\n.   Ky = src.rows / 2\\Pi\n.   \\end{array}\\f]\n.   \n.   \n.   @param src Source image\n.   @param dst Destination image. It will have same size and type as src.\n.   @param center The transformation center;\n.   @param maxRadius The radius of the bounding circle to transform. It determines the inverse magnitude scale parameter too.\n.   @param flags A combination of interpolation methods, see #InterpolationFlags\n.   \n.   @note\n.   -   The function can not operate in-place.\n.   -   To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.\n.   \n.   @sa cv::logPolar\n.   @endinternal'
    pass

class linemod_Detector(_mod_builtins.object):
    __class__ = linemod_Detector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def addSyntheticTemplate(self, templates, class_id):
        'addSyntheticTemplate(templates, class_id) -> retval\n.   * \\brief Add a new object template computed by external means.'
        pass
    
    def addTemplate(self, sources, class_id, object_mask):
        'addTemplate(sources, class_id, object_mask) -> retval, bounding_box\n.   * \\brief Add new object template.\n.   *\n.   * \\param      sources      Source images, one for each modality.\n.   * \\param      class_id     Object class ID.\n.   * \\param      object_mask  Mask separating object from background.\n.   * \\param[out] bounding_box Optionally return bounding box of the extracted features.\n.   *\n.   * \\return Template ID, or -1 if failed to extract a valid template.'
        pass
    
    def classIds(self):
        'classIds() -> retval\n.'
        pass
    
    def getModalities(self):
        'getModalities() -> retval\n.   * \\brief Get the modalities used by this detector.\n.   *\n.   * You are not permitted to add/remove modalities, but you may dynamic_cast them to\n.   * tweak parameters.'
        pass
    
    def getT(self, pyramid_level):
        'getT(pyramid_level) -> retval\n.   * \\brief Get sampling step T at pyramid_level.'
        pass
    
    def getTemplates(self, class_id, template_id):
        'getTemplates(class_id, template_id) -> retval\n.   * \\brief Get the template pyramid identified by template_id.\n.   *\n.   * For example, with 2 modalities (Gradient, Normal) and two pyramid levels\n.   * (L0, L1), the order is (GradientL0, NormalL0, GradientL1, NormalL1).'
        pass
    
    def match(self, sources, threshold, class_ids=None, quantized_images=None, masks=None):
        'match(sources, threshold[, class_ids[, quantized_images[, masks]]]) -> matches, quantized_images\n.   * \\brief Detect objects by template matching.\n.   *\n.   * Matches globally at the lowest pyramid level, then refines locally stepping up the pyramid.\n.   *\n.   * \\param      sources   Source images, one for each modality.\n.   * \\param      threshold Similarity threshold, a percentage between 0 and 100.\n.   * \\param[out] matches   Template matches, sorted by similarity score.\n.   * \\param      class_ids If non-empty, only search for the desired object classes.\n.   * \\param[out] quantized_images Optionally return vector<Mat> of quantized images.\n.   * \\param      masks     The masks for consideration during matching. The masks should be CV_8UC1\n.   *                       where 255 represents a valid pixel.  If non-empty, the vector must be\n.   *                       the same size as sources.  Each element must be\n.   *                       empty or the same size as its corresponding source.'
        pass
    
    def numClasses(self):
        'numClasses() -> retval\n.'
        pass
    
    def numTemplates(self):
        'numTemplates() -> retval\n.   \n\n\n\nnumTemplates(class_id) -> retval\n.'
        pass
    
    def pyramidLevels(self):
        'pyramidLevels() -> retval\n.   * \\brief Get number of pyramid levels used by this detector.'
        pass
    
    def read(self, fn):
        'read(fn) -> None\n.'
        pass
    
    def readClasses(self, class_ids, format=None):
        'readClasses(class_ids[, format]) -> None\n.'
        pass
    
    def writeClasses(self, format=None):
        'writeClasses([, format]) -> None\n.'
        pass
    

class linemod_Feature(_mod_builtins.object):
    __class__ = linemod_Feature
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def label(self):
        'label'
        pass
    
    @property
    def x(self):
        'x'
        pass
    
    @property
    def y(self):
        'y'
        pass
    

class linemod_Match(_mod_builtins.object):
    __class__ = linemod_Match
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def class_id(self):
        'class_id'
        pass
    
    @property
    def similarity(self):
        'similarity'
        pass
    
    @property
    def template_id(self):
        'template_id'
        pass
    
    @property
    def x(self):
        'x'
        pass
    
    @property
    def y(self):
        'y'
        pass
    

class linemod_Modality(_mod_builtins.object):
    __class__ = linemod_Modality
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, modality_type):
        'create(modality_type) -> retval\n.   * \\brief Create modality by name.\n.   *\n.   * The following modality types are supported:\n.   * - "ColorGradient"\n.   * - "DepthNormal"\n\n\n\ncreate(fn) -> retval\n.   * \\brief Load a modality from file.'
        pass
    
    def name(self):
        'name() -> retval\n.'
        pass
    
    def process(self, src, mask=None):
        'process(src[, mask]) -> retval\n.   * \\brief Form a quantized image pyramid from a source image.\n.   *\n.   * \\param[in] src  The source image. Type depends on the modality.\n.   * \\param[in] mask Optional mask. If not empty, unmasked pixels are set to zero\n.   *                 in quantized image and cannot be extracted as features.'
        pass
    
    def read(self, fn):
        'read(fn) -> None\n.'
        pass
    

class linemod_QuantizedPyramid(_mod_builtins.object):
    __class__ = linemod_QuantizedPyramid
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def extractTemplate(self):
        'extractTemplate() -> retval, templ\n.   * \\brief Extract most discriminant features at current pyramid level to form a new template.\n.   *\n.   * \\param[out] templ The new template.'
        pass
    
    def pyrDown(self):
        'pyrDown() -> None\n.   * \\brief Go to the next pyramid level.\n.   *\n.   * \\todo Allow pyramid scale factor other than 2'
        pass
    
    def quantize(self, dst=None):
        'quantize([, dst]) -> dst\n.   * \\brief Compute quantized image at current pyramid level for online detection.\n.   *\n.   * \\param[out] dst The destination 8-bit image. For each pixel at most one bit is set,\n.   *                 representing its classification.'
        pass
    

class linemod_Template(_mod_builtins.object):
    __class__ = linemod_Template
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def features(self):
        'features'
        pass
    
    @property
    def height(self):
        'height'
        pass
    
    @property
    def pyramid_level(self):
        'pyramid_level'
        pass
    
    @property
    def width(self):
        'width'
        pass
    

def log(src, dst=None):
    'log(src[, dst]) -> dst\n.   @brief Calculates the natural logarithm of every array element.\n.   \n.   The function cv::log calculates the natural logarithm of every element of the input array:\n.   \\f[\\texttt{dst} (I) =  \\log (\\texttt{src}(I)) \\f]\n.   \n.   Output on zero, negative and special (NaN, Inf) values is undefined.\n.   \n.   @param src input array.\n.   @param dst output array of the same size and type as src .\n.   @sa exp, cartToPolar, polarToCart, phase, pow, sqrt, magnitude'
    pass

def logPolar(src, center, M, flags, dst=None):
    'logPolar(src, center, M, flags[, dst]) -> dst\n.   @brief Remaps an image to semilog-polar coordinates space.\n.   \n.   @deprecated This function produces same result as cv::warpPolar(src, dst, src.size(), center, maxRadius, flags+WARP_POLAR_LOG);\n.   \n.   @internal\n.   Transform the source image using the following transformation (See @ref polar_remaps_reference_image "Polar remaps reference image d)"):\n.   \\f[\\begin{array}{l}\n.   dst( \\rho , \\phi ) = src(x,y) \\\\\n.   dst.size() \\leftarrow src.size()\n.   \\end{array}\\f]\n.   \n.   where\n.   \\f[\\begin{array}{l}\n.   I = (dx,dy) = (x - center.x,y - center.y) \\\\\n.   \\rho = M \\cdot log_e(\\texttt{magnitude} (I)) ,\\\\\n.   \\phi = Kangle \\cdot \\texttt{angle} (I) \\\\\n.   \\end{array}\\f]\n.   \n.   and\n.   \\f[\\begin{array}{l}\n.   M = src.cols / log_e(maxRadius) \\\\\n.   Kangle = src.rows / 2\\Pi \\\\\n.   \\end{array}\\f]\n.   \n.   The function emulates the human "foveal" vision and can be used for fast scale and\n.   rotation-invariant template matching, for object tracking and so forth.\n.   @param src Source image\n.   @param dst Destination image. It will have same size and type as src.\n.   @param center The transformation center; where the output precision is maximal\n.   @param M Magnitude scale parameter. It determines the radius of the bounding circle to transform too.\n.   @param flags A combination of interpolation methods, see #InterpolationFlags\n.   \n.   @note\n.   -   The function can not operate in-place.\n.   -   To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.\n.   \n.   @sa cv::linearPolar\n.   @endinternal'
    pass

def magnitude(x, y, magnitude=None):
    'magnitude(x, y[, magnitude]) -> magnitude\n.   @brief Calculates the magnitude of 2D vectors.\n.   \n.   The function cv::magnitude calculates the magnitude of 2D vectors formed\n.   from the corresponding elements of x and y arrays:\n.   \\f[\\texttt{dst} (I) =  \\sqrt{\\texttt{x}(I)^2 + \\texttt{y}(I)^2}\\f]\n.   @param x floating-point array of x-coordinates of the vectors.\n.   @param y floating-point array of y-coordinates of the vectors; it must\n.   have the same size as x.\n.   @param magnitude output array of the same size and type as x.\n.   @sa cartToPolar, polarToCart, phase, sqrt'
    pass

def matMulDeriv(A, B, dABdA=None, dABdB=None):
    'matMulDeriv(A, B[, dABdA[, dABdB]]) -> dABdA, dABdB\n.   @brief Computes partial derivatives of the matrix product for each multiplied matrix.\n.   \n.   @param A First multiplied matrix.\n.   @param B Second multiplied matrix.\n.   @param dABdA First output derivative matrix d(A\\*B)/dA of size\n.   \\f$\\texttt{A.rows*B.cols} \\times {A.rows*A.cols}\\f$ .\n.   @param dABdB Second output derivative matrix d(A\\*B)/dB of size\n.   \\f$\\texttt{A.rows*B.cols} \\times {B.rows*B.cols}\\f$ .\n.   \n.   The function computes partial derivatives of the elements of the matrix product \\f$A*B\\f$ with regard to\n.   the elements of each of the two input matrices. The function is used to compute the Jacobian\n.   matrices in stereoCalibrate but can also be used in any other similar optimization function.'
    pass

def matchShapes(contour1, contour2, method, parameter):
    'matchShapes(contour1, contour2, method, parameter) -> retval\n.   @brief Compares two shapes.\n.   \n.   The function compares two shapes. All three implemented methods use the Hu invariants (see #HuMoments)\n.   \n.   @param contour1 First contour or grayscale image.\n.   @param contour2 Second contour or grayscale image.\n.   @param method Comparison method, see #ShapeMatchModes\n.   @param parameter Method-specific parameter (not supported now).'
    pass

def matchTemplate(image, templ, method, result=None, mask=None):
    "matchTemplate(image, templ, method[, result[, mask]]) -> result\n.   @brief Compares a template against overlapped image regions.\n.   \n.   The function slides through image , compares the overlapped patches of size \\f$w \\times h\\f$ against\n.   templ using the specified method and stores the comparison results in result . Here are the formulae\n.   for the available comparison methods ( \\f$I\\f$ denotes image, \\f$T\\f$ template, \\f$R\\f$ result ). The summation\n.   is done over template and/or the image patch: \\f$x' = 0...w-1, y' = 0...h-1\\f$\n.   \n.   After the function finishes the comparison, the best matches can be found as global minimums (when\n.   #TM_SQDIFF was used) or maximums (when #TM_CCORR or #TM_CCOEFF was used) using the\n.   #minMaxLoc function. In case of a color image, template summation in the numerator and each sum in\n.   the denominator is done over all of the channels and separate mean values are used for each channel.\n.   That is, the function can take a color template and a color image. The result will still be a\n.   single-channel image, which is easier to analyze.\n.   \n.   @param image Image where the search is running. It must be 8-bit or 32-bit floating-point.\n.   @param templ Searched template. It must be not greater than the source image and have the same\n.   data type.\n.   @param result Map of comparison results. It must be single-channel 32-bit floating-point. If image\n.   is \\f$W \\times H\\f$ and templ is \\f$w \\times h\\f$ , then result is \\f$(W-w+1) \\times (H-h+1)\\f$ .\n.   @param method Parameter specifying the comparison method, see #TemplateMatchModes\n.   @param mask Mask of searched template. It must have the same datatype and size with templ. It is\n.   not set by default. Currently, only the #TM_SQDIFF and #TM_CCORR_NORMED methods are supported."
    pass

def max(src1, src2, dst=None):
    'max(src1, src2[, dst]) -> dst\n.   @brief Calculates per-element maximum of two arrays or an array and a scalar.\n.   \n.   The function cv::max calculates the per-element maximum of two arrays:\n.   \\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{src2} (I))\\f]\n.   or array and a scalar:\n.   \\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{value} )\\f]\n.   @param src1 first input array.\n.   @param src2 second input array of the same size and type as src1 .\n.   @param dst output array of the same size and type as src1.\n.   @sa  min, compare, inRange, minMaxLoc, @ref MatrixExpressions'
    pass

def mean():
    "mean(src[, mask]) -> retval\n.   @brief Calculates an average (mean) of array elements.\n.   \n.   The function cv::mean calculates the mean value M of array elements,\n.   independently for each channel, and return it:\n.   \\f[\\begin{array}{l} N =  \\sum _{I: \\; \\texttt{mask} (I) \\ne 0} 1 \\\\ M_c =  \\left ( \\sum _{I: \\; \\texttt{mask} (I) \\ne 0}{ \\texttt{mtx} (I)_c} \\right )/N \\end{array}\\f]\n.   When all the mask elements are 0's, the function returns Scalar::all(0)\n.   @param src input array that should have from 1 to 4 channels so that the result can be stored in\n.   Scalar_ .\n.   @param mask optional operation mask.\n.   @sa  countNonZero, meanStdDev, norm, minMaxLoc"
    pass

def meanShift(probImage, window, criteria):
    'meanShift(probImage, window, criteria) -> retval, window\n.   @brief Finds an object on a back projection image.\n.   \n.   @param probImage Back projection of the object histogram. See calcBackProject for details.\n.   @param window Initial search window.\n.   @param criteria Stop criteria for the iterative search algorithm.\n.   returns\n.   :   Number of iterations CAMSHIFT took to converge.\n.   The function implements the iterative object search algorithm. It takes the input back projection of\n.   an object and the initial position. The mass center in window of the back projection image is\n.   computed and the search window center shifts to the mass center. The procedure is repeated until the\n.   specified number of iterations criteria.maxCount is done or until the window center shifts by less\n.   than criteria.epsilon. The algorithm is used inside CamShift and, unlike CamShift , the search\n.   window size or orientation do not change during the search. You can simply pass the output of\n.   calcBackProject to this function. But better results can be obtained if you pre-filter the back\n.   projection and remove the noise. For example, you can do this by retrieving connected components\n.   with findContours , throwing away contours with small area ( contourArea ), and rendering the\n.   remaining contours with drawContours.'
    pass

def meanStdDev(src, mean=None, stddev=None, mask=None):
    "meanStdDev(src[, mean[, stddev[, mask]]]) -> mean, stddev\n.   Calculates a mean and standard deviation of array elements.\n.   \n.   The function cv::meanStdDev calculates the mean and the standard deviation M\n.   of array elements independently for each channel and returns it via the\n.   output parameters:\n.   \\f[\\begin{array}{l} N =  \\sum _{I, \\texttt{mask} (I)  \\ne 0} 1 \\\\ \\texttt{mean} _c =  \\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\texttt{src} (I)_c}{N} \\\\ \\texttt{stddev} _c =  \\sqrt{\\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} \\left ( \\texttt{src} (I)_c -  \\texttt{mean} _c \\right )^2}{N}} \\end{array}\\f]\n.   When all the mask elements are 0's, the function returns\n.   mean=stddev=Scalar::all(0).\n.   @note The calculated standard deviation is only the diagonal of the\n.   complete normalized covariance matrix. If the full matrix is needed, you\n.   can reshape the multi-channel array M x N to the single-channel array\n.   M\\*N x mtx.channels() (only possible when the matrix is continuous) and\n.   then pass the matrix to calcCovarMatrix .\n.   @param src input array that should have from 1 to 4 channels so that the results can be stored in\n.   Scalar_ 's.\n.   @param mean output parameter: calculated mean value.\n.   @param stddev output parameter: calculated standard deviation.\n.   @param mask optional operation mask.\n.   @sa  countNonZero, mean, norm, minMaxLoc, calcCovarMatrix"
    pass

def medianBlur(src, ksize, dst=None):
    'medianBlur(src, ksize[, dst]) -> dst\n.   @brief Blurs an image using the median filter.\n.   \n.   The function smoothes an image using the median filter with the \\f$\\texttt{ksize} \\times\n.   \\texttt{ksize}\\f$ aperture. Each channel of a multi-channel image is processed independently.\n.   In-place operation is supported.\n.   \n.   @note The median filter uses #BORDER_REPLICATE internally to cope with border pixels, see #BorderTypes\n.   \n.   @param src input 1-, 3-, or 4-channel image; when ksize is 3 or 5, the image depth should be\n.   CV_8U, CV_16U, or CV_32F, for larger aperture sizes, it can only be CV_8U.\n.   @param dst destination array of the same size and type as src.\n.   @param ksize aperture linear size; it must be odd and greater than 1, for example: 3, 5, 7 ...\n.   @sa  bilateralFilter, blur, boxFilter, GaussianBlur'
    pass

def merge(mv, dst=None):
    'merge(mv[, dst]) -> dst\n.   @overload\n.   @param mv input vector of matrices to be merged; all the matrices in mv must have the same\n.   size and the same depth.\n.   @param dst output array of the same size and the same depth as mv[0]; The number of channels will\n.   be the total number of channels in the matrix array.'
    pass

def min(src1, src2, dst=None):
    'min(src1, src2[, dst]) -> dst\n.   @brief Calculates per-element minimum of two arrays or an array and a scalar.\n.   \n.   The function cv::min calculates the per-element minimum of two arrays:\n.   \\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{src2} (I))\\f]\n.   or array and a scalar:\n.   \\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{value} )\\f]\n.   @param src1 first input array.\n.   @param src2 second input array of the same size and type as src1.\n.   @param dst output array of the same size and type as src1.\n.   @sa max, compare, inRange, minMaxLoc'
    pass

def minAreaRect(points):
    'minAreaRect(points) -> retval\n.   @brief Finds a rotated rectangle of the minimum area enclosing the input 2D point set.\n.   \n.   The function calculates and returns the minimum-area bounding rectangle (possibly rotated) for a\n.   specified point set. Developer should keep in mind that the returned RotatedRect can contain negative\n.   indices when data is close to the containing Mat element boundary.\n.   \n.   @param points Input vector of 2D points, stored in std::vector\\<\\> or Mat'
    pass

def minEnclosingCircle(points):
    'minEnclosingCircle(points) -> center, radius\n.   @brief Finds a circle of the minimum area enclosing a 2D point set.\n.   \n.   The function finds the minimal enclosing circle of a 2D point set using an iterative algorithm.\n.   \n.   @param points Input vector of 2D points, stored in std::vector\\<\\> or Mat\n.   @param center Output center of the circle.\n.   @param radius Output radius of the circle.'
    pass

def minEnclosingTriangle(points, triangle=None):
    "minEnclosingTriangle(points[, triangle]) -> retval, triangle\n.   @brief Finds a triangle of minimum area enclosing a 2D point set and returns its area.\n.   \n.   The function finds a triangle of minimum area enclosing the given set of 2D points and returns its\n.   area. The output for a given 2D point set is shown in the image below. 2D points are depicted in\n.   *red* and the enclosing triangle in *yellow*.\n.   \n.   ![Sample output of the minimum enclosing triangle function](pics/minenclosingtriangle.png)\n.   \n.   The implementation of the algorithm is based on O'Rourke's @cite ORourke86 and Klee and Laskowski's\n.   @cite KleeLaskowski85 papers. O'Rourke provides a \\f$\\theta(n)\\f$ algorithm for finding the minimal\n.   enclosing triangle of a 2D convex polygon with n vertices. Since the #minEnclosingTriangle function\n.   takes a 2D point set as input an additional preprocessing step of computing the convex hull of the\n.   2D point set is required. The complexity of the #convexHull function is \\f$O(n log(n))\\f$ which is higher\n.   than \\f$\\theta(n)\\f$. Thus the overall complexity of the function is \\f$O(n log(n))\\f$.\n.   \n.   @param points Input vector of 2D points with depth CV_32S or CV_32F, stored in std::vector\\<\\> or Mat\n.   @param triangle Output vector of three 2D points defining the vertices of the triangle. The depth\n.   of the OutputArray must be CV_32F."
    pass

def minMaxLoc(src, mask=None):
    'minMaxLoc(src[, mask]) -> minVal, maxVal, minLoc, maxLoc\n.   @brief Finds the global minimum and maximum in an array.\n.   \n.   The function cv::minMaxLoc finds the minimum and maximum element values and their positions. The\n.   extremums are searched across the whole array or, if mask is not an empty array, in the specified\n.   array region.\n.   \n.   The function do not work with multi-channel arrays. If you need to find minimum or maximum\n.   elements across all the channels, use Mat::reshape first to reinterpret the array as\n.   single-channel. Or you may extract the particular channel using either extractImageCOI , or\n.   mixChannels , or split .\n.   @param src input single-channel array.\n.   @param minVal pointer to the returned minimum value; NULL is used if not required.\n.   @param maxVal pointer to the returned maximum value; NULL is used if not required.\n.   @param minLoc pointer to the returned minimum location (in 2D case); NULL is used if not required.\n.   @param maxLoc pointer to the returned maximum location (in 2D case); NULL is used if not required.\n.   @param mask optional mask used to select a sub-array.\n.   @sa max, min, compare, inRange, extractImageCOI, mixChannels, split, Mat::reshape'
    pass

def mixChannels(src, dst, fromTo):
    'mixChannels(src, dst, fromTo) -> dst\n.   @overload\n.   @param src input array or vector of matrices; all of the matrices must have the same size and the\n.   same depth.\n.   @param dst output array or vector of matrices; all the matrices **must be allocated**; their size and\n.   depth must be the same as in src[0].\n.   @param fromTo array of index pairs specifying which channels are copied and where; fromTo[k\\*2] is\n.   a 0-based index of the input channel in src, fromTo[k\\*2+1] is an index of the output channel in\n.   dst; the continuous channel numbering is used: the first input image channels are indexed from 0 to\n.   src[0].channels()-1, the second input image channels are indexed from src[0].channels() to\n.   src[0].channels() + src[1].channels()-1, and so on, the same scheme is used for the output image\n.   channels; as a special case, when fromTo[k\\*2] is negative, the corresponding output channel is\n.   filled with zero .'
    pass

class ml_ANN_MLP(ml_StatModel):
    __class__ = ml_ANN_MLP
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates empty model\n.   \n.   Use StatModel::train to train the model, Algorithm::load\\<ANN_MLP\\>(filename) to load the pre-trained model.\n.   Note that the train method has optional flags: ANN_MLP::TrainFlags.'
        pass
    
    def getAnnealCoolingRatio(self):
        'getAnnealCoolingRatio() -> retval\n.   @see setAnnealCoolingRatio'
        pass
    
    def getAnnealFinalT(self):
        'getAnnealFinalT() -> retval\n.   @see setAnnealFinalT'
        pass
    
    def getAnnealInitialT(self):
        'getAnnealInitialT() -> retval\n.   @see setAnnealInitialT'
        pass
    
    def getAnnealItePerStep(self):
        'getAnnealItePerStep() -> retval\n.   @see setAnnealItePerStep'
        pass
    
    def getBackpropMomentumScale(self):
        'getBackpropMomentumScale() -> retval\n.   @see setBackpropMomentumScale'
        pass
    
    def getBackpropWeightScale(self):
        'getBackpropWeightScale() -> retval\n.   @see setBackpropWeightScale'
        pass
    
    def getLayerSizes(self):
        'getLayerSizes() -> retval\n.   Integer vector specifying the number of neurons in each layer including the input and output layers.\n.   The very first element specifies the number of elements in the input layer.\n.   The last element - number of elements in the output layer.\n.   @sa setLayerSizes'
        pass
    
    def getRpropDW0(self):
        'getRpropDW0() -> retval\n.   @see setRpropDW0'
        pass
    
    def getRpropDWMax(self):
        'getRpropDWMax() -> retval\n.   @see setRpropDWMax'
        pass
    
    def getRpropDWMin(self):
        'getRpropDWMin() -> retval\n.   @see setRpropDWMin'
        pass
    
    def getRpropDWMinus(self):
        'getRpropDWMinus() -> retval\n.   @see setRpropDWMinus'
        pass
    
    def getRpropDWPlus(self):
        'getRpropDWPlus() -> retval\n.   @see setRpropDWPlus'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getTrainMethod(self):
        'getTrainMethod() -> retval\n.   Returns current training method'
        pass
    
    def getWeights(self, layerIdx):
        'getWeights(layerIdx) -> retval\n.'
        pass
    
    @classmethod
    def load(cls, filepath):
        'load(filepath) -> retval\n.   @brief Loads and creates a serialized ANN from a file\n.   *\n.   * Use ANN::save to serialize and store an ANN to disk.\n.   * Load the ANN from this file again, by calling this function with the path to the file.\n.   *\n.   * @param filepath path to serialized ANN'
        pass
    
    def setActivationFunction(self, type, param1=None, param2=None):
        'setActivationFunction(type[, param1[, param2]]) -> None\n.   Initialize the activation function for each neuron.\n.   Currently the default and the only fully supported activation function is ANN_MLP::SIGMOID_SYM.\n.   @param type The type of activation function. See ANN_MLP::ActivationFunctions.\n.   @param param1 The first parameter of the activation function, \\f$\\alpha\\f$. Default value is 0.\n.   @param param2 The second parameter of the activation function, \\f$\\beta\\f$. Default value is 0.'
        pass
    
    def setAnnealCoolingRatio(self, val):
        'setAnnealCoolingRatio(val) -> None\n.   @copybrief getAnnealCoolingRatio @see getAnnealCoolingRatio'
        pass
    
    def setAnnealFinalT(self, val):
        'setAnnealFinalT(val) -> None\n.   @copybrief getAnnealFinalT @see getAnnealFinalT'
        pass
    
    def setAnnealInitialT(self, val):
        'setAnnealInitialT(val) -> None\n.   @copybrief getAnnealInitialT @see getAnnealInitialT'
        pass
    
    def setAnnealItePerStep(self, val):
        'setAnnealItePerStep(val) -> None\n.   @copybrief getAnnealItePerStep @see getAnnealItePerStep'
        pass
    
    def setBackpropMomentumScale(self, val):
        'setBackpropMomentumScale(val) -> None\n.   @copybrief getBackpropMomentumScale @see getBackpropMomentumScale'
        pass
    
    def setBackpropWeightScale(self, val):
        'setBackpropWeightScale(val) -> None\n.   @copybrief getBackpropWeightScale @see getBackpropWeightScale'
        pass
    
    def setLayerSizes(self, _layer_sizes):
        'setLayerSizes(_layer_sizes) -> None\n.   Integer vector specifying the number of neurons in each layer including the input and output layers.\n.   The very first element specifies the number of elements in the input layer.\n.   The last element - number of elements in the output layer. Default value is empty Mat.\n.   @sa getLayerSizes'
        pass
    
    def setRpropDW0(self, val):
        'setRpropDW0(val) -> None\n.   @copybrief getRpropDW0 @see getRpropDW0'
        pass
    
    def setRpropDWMax(self, val):
        'setRpropDWMax(val) -> None\n.   @copybrief getRpropDWMax @see getRpropDWMax'
        pass
    
    def setRpropDWMin(self, val):
        'setRpropDWMin(val) -> None\n.   @copybrief getRpropDWMin @see getRpropDWMin'
        pass
    
    def setRpropDWMinus(self, val):
        'setRpropDWMinus(val) -> None\n.   @copybrief getRpropDWMinus @see getRpropDWMinus'
        pass
    
    def setRpropDWPlus(self, val):
        'setRpropDWPlus(val) -> None\n.   @copybrief getRpropDWPlus @see getRpropDWPlus'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    
    def setTrainMethod(self, method, param1=None, param2=None):
        'setTrainMethod(method[, param1[, param2]]) -> None\n.   Sets training method and common parameters.\n.   @param method Default value is ANN_MLP::RPROP. See ANN_MLP::TrainingMethods.\n.   @param param1 passed to setRpropDW0 for ANN_MLP::RPROP and to setBackpropWeightScale for ANN_MLP::BACKPROP and to initialT for ANN_MLP::ANNEAL.\n.   @param param2 passed to setRpropDWMin for ANN_MLP::RPROP and to setBackpropMomentumScale for ANN_MLP::BACKPROP and to finalT for ANN_MLP::ANNEAL.'
        pass
    

class ml_ANN_MLP_ANNEAL(ml_ANN_MLP):
    __class__ = ml_ANN_MLP_ANNEAL
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates empty model\n.   \n.   Use StatModel::train to train the model, Algorithm::load\\<ANN_MLP\\>(filename) to load the pre-trained model.\n.   Note that the train method has optional flags: ANN_MLP::TrainFlags.'
        pass
    
    def getAnnealCoolingRatio(self):
        'getAnnealCoolingRatio() -> retval\n.   @see setAnnealCoolingRatio'
        pass
    
    def getAnnealFinalT(self):
        'getAnnealFinalT() -> retval\n.   @see setAnnealFinalT'
        pass
    
    def getAnnealInitialT(self):
        'getAnnealInitialT() -> retval\n.   @see setAnnealInitialT'
        pass
    
    def getAnnealItePerStep(self):
        'getAnnealItePerStep() -> retval\n.   @see setAnnealItePerStep'
        pass
    
    @classmethod
    def load(cls, filepath):
        'load(filepath) -> retval\n.   @brief Loads and creates a serialized ANN from a file\n.   *\n.   * Use ANN::save to serialize and store an ANN to disk.\n.   * Load the ANN from this file again, by calling this function with the path to the file.\n.   *\n.   * @param filepath path to serialized ANN'
        pass
    
    def setAnnealCoolingRatio(self, val):
        'setAnnealCoolingRatio(val) -> None\n.   @copybrief getAnnealCoolingRatio @see getAnnealCoolingRatio'
        pass
    
    def setAnnealFinalT(self, val):
        'setAnnealFinalT(val) -> None\n.   @copybrief getAnnealFinalT @see getAnnealFinalT'
        pass
    
    def setAnnealInitialT(self, val):
        'setAnnealInitialT(val) -> None\n.   @copybrief getAnnealInitialT @see getAnnealInitialT'
        pass
    
    def setAnnealItePerStep(self, val):
        'setAnnealItePerStep(val) -> None\n.   @copybrief getAnnealItePerStep @see getAnnealItePerStep'
        pass
    

class ml_Boost(ml_DTrees):
    __class__ = ml_Boost
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   Creates the empty model.\n.   Use StatModel::train to train the model, Algorithm::load\\<Boost\\>(filename) to load the pre-trained model.'
        pass
    
    def getBoostType(self):
        'getBoostType() -> retval\n.   @see setBoostType'
        pass
    
    def getWeakCount(self):
        'getWeakCount() -> retval\n.   @see setWeakCount'
        pass
    
    def getWeightTrimRate(self):
        'getWeightTrimRate() -> retval\n.   @see setWeightTrimRate'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized Boost from a file\n.   *\n.   * Use Boost::save to serialize and store an RTree to disk.\n.   * Load the Boost from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized Boost\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def setBoostType(self, val):
        'setBoostType(val) -> None\n.   @copybrief getBoostType @see getBoostType'
        pass
    
    def setWeakCount(self, val):
        'setWeakCount(val) -> None\n.   @copybrief getWeakCount @see getWeakCount'
        pass
    
    def setWeightTrimRate(self, val):
        'setWeightTrimRate(val) -> None\n.   @copybrief getWeightTrimRate @see getWeightTrimRate'
        pass
    

class ml_DTrees(ml_StatModel):
    __class__ = ml_DTrees
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates the empty model\n.   \n.   The static method creates empty decision tree with the specified parameters. It should be then\n.   trained using train method (see StatModel::train). Alternatively, you can load the model from\n.   file using Algorithm::load\\<DTrees\\>(filename).'
        pass
    
    def getCVFolds(self):
        'getCVFolds() -> retval\n.   @see setCVFolds'
        pass
    
    def getMaxCategories(self):
        'getMaxCategories() -> retval\n.   @see setMaxCategories'
        pass
    
    def getMaxDepth(self):
        'getMaxDepth() -> retval\n.   @see setMaxDepth'
        pass
    
    def getMinSampleCount(self):
        'getMinSampleCount() -> retval\n.   @see setMinSampleCount'
        pass
    
    def getPriors(self):
        'getPriors() -> retval\n.   @see setPriors'
        pass
    
    def getRegressionAccuracy(self):
        'getRegressionAccuracy() -> retval\n.   @see setRegressionAccuracy'
        pass
    
    def getTruncatePrunedTree(self):
        'getTruncatePrunedTree() -> retval\n.   @see setTruncatePrunedTree'
        pass
    
    def getUse1SERule(self):
        'getUse1SERule() -> retval\n.   @see setUse1SERule'
        pass
    
    def getUseSurrogates(self):
        'getUseSurrogates() -> retval\n.   @see setUseSurrogates'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized DTrees from a file\n.   *\n.   * Use DTree::save to serialize and store an DTree to disk.\n.   * Load the DTree from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized DTree\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def setCVFolds(self, val):
        'setCVFolds(val) -> None\n.   @copybrief getCVFolds @see getCVFolds'
        pass
    
    def setMaxCategories(self, val):
        'setMaxCategories(val) -> None\n.   @copybrief getMaxCategories @see getMaxCategories'
        pass
    
    def setMaxDepth(self, val):
        'setMaxDepth(val) -> None\n.   @copybrief getMaxDepth @see getMaxDepth'
        pass
    
    def setMinSampleCount(self, val):
        'setMinSampleCount(val) -> None\n.   @copybrief getMinSampleCount @see getMinSampleCount'
        pass
    
    def setPriors(self, val):
        'setPriors(val) -> None\n.   @copybrief getPriors @see getPriors'
        pass
    
    def setRegressionAccuracy(self, val):
        'setRegressionAccuracy(val) -> None\n.   @copybrief getRegressionAccuracy @see getRegressionAccuracy'
        pass
    
    def setTruncatePrunedTree(self, val):
        'setTruncatePrunedTree(val) -> None\n.   @copybrief getTruncatePrunedTree @see getTruncatePrunedTree'
        pass
    
    def setUse1SERule(self, val):
        'setUse1SERule(val) -> None\n.   @copybrief getUse1SERule @see getUse1SERule'
        pass
    
    def setUseSurrogates(self, val):
        'setUseSurrogates(val) -> None\n.   @copybrief getUseSurrogates @see getUseSurrogates'
        pass
    

class ml_EM(ml_StatModel):
    __class__ = ml_EM
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   Creates empty %EM model.\n.   The model should be trained then using StatModel::train(traindata, flags) method. Alternatively, you\n.   can use one of the EM::train\\* methods or load it from file using Algorithm::load\\<EM\\>(filename).'
        pass
    
    def getClustersNumber(self):
        'getClustersNumber() -> retval\n.   @see setClustersNumber'
        pass
    
    def getCovarianceMatrixType(self):
        'getCovarianceMatrixType() -> retval\n.   @see setCovarianceMatrixType'
        pass
    
    def getCovs(self, covs=None):
        'getCovs([, covs]) -> covs\n.   @brief Returns covariation matrices\n.   \n.   Returns vector of covariation matrices. Number of matrices is the number of gaussian mixtures,\n.   each matrix is a square floating-point matrix NxN, where N is the space dimensionality.'
        pass
    
    def getMeans(self):
        'getMeans() -> retval\n.   @brief Returns the cluster centers (means of the Gaussian mixture)\n.   \n.   Returns matrix with the number of rows equal to the number of mixtures and number of columns\n.   equal to the space dimensionality.'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getWeights(self):
        'getWeights() -> retval\n.   @brief Returns weights of the mixtures\n.   \n.   Returns vector with the number of elements equal to the number of mixtures.'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized EM from a file\n.   *\n.   * Use EM::save to serialize and store an EM to disk.\n.   * Load the EM from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized EM\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def predict(self, samples, results=None, flags=None):
        'predict(samples[, results[, flags]]) -> retval, results\n.   @brief Returns posterior probabilities for the provided samples\n.   \n.   @param samples The input samples, floating-point matrix\n.   @param results The optional output \\f$ nSamples \\times nClusters\\f$ matrix of results. It contains\n.   posterior probabilities for each sample from the input\n.   @param flags This parameter will be ignored'
        pass
    
    def predict2(self, sample, probs=None):
        'predict2(sample[, probs]) -> retval, probs\n.   @brief Returns a likelihood logarithm value and an index of the most probable mixture component\n.   for the given sample.\n.   \n.   @param sample A sample for classification. It should be a one-channel matrix of\n.   \\f$1 \\times dims\\f$ or \\f$dims \\times 1\\f$ size.\n.   @param probs Optional output matrix that contains posterior probabilities of each component\n.   given the sample. It has \\f$1 \\times nclusters\\f$ size and CV_64FC1 type.\n.   \n.   The method returns a two-element double vector. Zero element is a likelihood logarithm value for\n.   the sample. First element is an index of the most probable mixture component for the given\n.   sample.'
        pass
    
    def setClustersNumber(self, val):
        'setClustersNumber(val) -> None\n.   @copybrief getClustersNumber @see getClustersNumber'
        pass
    
    def setCovarianceMatrixType(self, val):
        'setCovarianceMatrixType(val) -> None\n.   @copybrief getCovarianceMatrixType @see getCovarianceMatrixType'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    
    def trainE(self, samples, means0, covs0=None, weights0=None, logLikelihoods=None, labels=None, probs=None):
        'trainE(samples, means0[, covs0[, weights0[, logLikelihoods[, labels[, probs]]]]]) -> retval, logLikelihoods, labels, probs\n.   @brief Estimate the Gaussian mixture parameters from a samples set.\n.   \n.   This variation starts with Expectation step. You need to provide initial means \\f$a_k\\f$ of\n.   mixture components. Optionally you can pass initial weights \\f$\\pi_k\\f$ and covariance matrices\n.   \\f$S_k\\f$ of mixture components.\n.   \n.   @param samples Samples from which the Gaussian mixture model will be estimated. It should be a\n.   one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type\n.   it will be converted to the inner matrix of such type for the further computing.\n.   @param means0 Initial means \\f$a_k\\f$ of mixture components. It is a one-channel matrix of\n.   \\f$nclusters \\times dims\\f$ size. If the matrix does not have CV_64F type it will be\n.   converted to the inner matrix of such type for the further computing.\n.   @param covs0 The vector of initial covariance matrices \\f$S_k\\f$ of mixture components. Each of\n.   covariance matrices is a one-channel matrix of \\f$dims \\times dims\\f$ size. If the matrices\n.   do not have CV_64F type they will be converted to the inner matrices of such type for the\n.   further computing.\n.   @param weights0 Initial weights \\f$\\pi_k\\f$ of mixture components. It should be a one-channel\n.   floating-point matrix with \\f$1 \\times nclusters\\f$ or \\f$nclusters \\times 1\\f$ size.\n.   @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for\n.   each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type.\n.   @param labels The optional output "class label" for each sample:\n.   \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable\n.   mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type.\n.   @param probs The optional output matrix that contains posterior probabilities of each Gaussian\n.   mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and\n.   CV_64FC1 type.'
        pass
    
    def trainEM(self, samples, logLikelihoods=None, labels=None, probs=None):
        'trainEM(samples[, logLikelihoods[, labels[, probs]]]) -> retval, logLikelihoods, labels, probs\n.   @brief Estimate the Gaussian mixture parameters from a samples set.\n.   \n.   This variation starts with Expectation step. Initial values of the model parameters will be\n.   estimated by the k-means algorithm.\n.   \n.   Unlike many of the ML models, %EM is an unsupervised learning algorithm and it does not take\n.   responses (class labels or function values) as input. Instead, it computes the *Maximum\n.   Likelihood Estimate* of the Gaussian mixture parameters from an input sample set, stores all the\n.   parameters inside the structure: \\f$p_{i,k}\\f$ in probs, \\f$a_k\\f$ in means , \\f$S_k\\f$ in\n.   covs[k], \\f$\\pi_k\\f$ in weights , and optionally computes the output "class label" for each\n.   sample: \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most\n.   probable mixture component for each sample).\n.   \n.   The trained model can be used further for prediction, just like any other classifier. The\n.   trained model is similar to the NormalBayesClassifier.\n.   \n.   @param samples Samples from which the Gaussian mixture model will be estimated. It should be a\n.   one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type\n.   it will be converted to the inner matrix of such type for the further computing.\n.   @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for\n.   each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type.\n.   @param labels The optional output "class label" for each sample:\n.   \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable\n.   mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type.\n.   @param probs The optional output matrix that contains posterior probabilities of each Gaussian\n.   mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and\n.   CV_64FC1 type.'
        pass
    
    def trainM(self, samples, probs0, logLikelihoods=None, labels=None, probs=None):
        'trainM(samples, probs0[, logLikelihoods[, labels[, probs]]]) -> retval, logLikelihoods, labels, probs\n.   @brief Estimate the Gaussian mixture parameters from a samples set.\n.   \n.   This variation starts with Maximization step. You need to provide initial probabilities\n.   \\f$p_{i,k}\\f$ to use this option.\n.   \n.   @param samples Samples from which the Gaussian mixture model will be estimated. It should be a\n.   one-channel matrix, each row of which is a sample. If the matrix does not have CV_64F type\n.   it will be converted to the inner matrix of such type for the further computing.\n.   @param probs0\n.   @param logLikelihoods The optional output matrix that contains a likelihood logarithm value for\n.   each sample. It has \\f$nsamples \\times 1\\f$ size and CV_64FC1 type.\n.   @param labels The optional output "class label" for each sample:\n.   \\f$\\texttt{labels}_i=\\texttt{arg max}_k(p_{i,k}), i=1..N\\f$ (indices of the most probable\n.   mixture component for each sample). It has \\f$nsamples \\times 1\\f$ size and CV_32SC1 type.\n.   @param probs The optional output matrix that contains posterior probabilities of each Gaussian\n.   mixture component given the each sample. It has \\f$nsamples \\times nclusters\\f$ size and\n.   CV_64FC1 type.'
        pass
    

class ml_KNearest(ml_StatModel):
    __class__ = ml_KNearest
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates the empty model\n.   \n.   The static method creates empty %KNearest classifier. It should be then trained using StatModel::train method.'
        pass
    
    def findNearest(self, samples, k, results=None, neighborResponses=None, dist=None):
        "findNearest(samples, k[, results[, neighborResponses[, dist]]]) -> retval, results, neighborResponses, dist\n.   @brief Finds the neighbors and predicts responses for input vectors.\n.   \n.   @param samples Input samples stored by rows. It is a single-precision floating-point matrix of\n.   `<number_of_samples> * k` size.\n.   @param k Number of used nearest neighbors. Should be greater than 1.\n.   @param results Vector with results of prediction (regression or classification) for each input\n.   sample. It is a single-precision floating-point vector with `<number_of_samples>` elements.\n.   @param neighborResponses Optional output values for corresponding neighbors. It is a single-\n.   precision floating-point matrix of `<number_of_samples> * k` size.\n.   @param dist Optional output distances from the input vectors to the corresponding neighbors. It\n.   is a single-precision floating-point matrix of `<number_of_samples> * k` size.\n.   \n.   For each input vector (a row of the matrix samples), the method finds the k nearest neighbors.\n.   In case of regression, the predicted result is a mean value of the particular vector's neighbor\n.   responses. In case of classification, the class is determined by voting.\n.   \n.   For each input vector, the neighbors are sorted by their distances to the vector.\n.   \n.   In case of C++ interface you can use output pointers to empty matrices and the function will\n.   allocate memory itself.\n.   \n.   If only a single input vector is passed, all output matrices are optional and the predicted\n.   value is returned by the method.\n.   \n.   The function is parallelized with the TBB library."
        pass
    
    def getAlgorithmType(self):
        'getAlgorithmType() -> retval\n.   @see setAlgorithmType'
        pass
    
    def getDefaultK(self):
        'getDefaultK() -> retval\n.   @see setDefaultK'
        pass
    
    def getEmax(self):
        'getEmax() -> retval\n.   @see setEmax'
        pass
    
    def getIsClassifier(self):
        'getIsClassifier() -> retval\n.   @see setIsClassifier'
        pass
    
    def setAlgorithmType(self, val):
        'setAlgorithmType(val) -> None\n.   @copybrief getAlgorithmType @see getAlgorithmType'
        pass
    
    def setDefaultK(self, val):
        'setDefaultK(val) -> None\n.   @copybrief getDefaultK @see getDefaultK'
        pass
    
    def setEmax(self, val):
        'setEmax(val) -> None\n.   @copybrief getEmax @see getEmax'
        pass
    
    def setIsClassifier(self, val):
        'setIsClassifier(val) -> None\n.   @copybrief getIsClassifier @see getIsClassifier'
        pass
    

class ml_LogisticRegression(ml_StatModel):
    __class__ = ml_LogisticRegression
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates empty model.\n.   \n.   Creates Logistic Regression model with parameters given.'
        pass
    
    def getIterations(self):
        'getIterations() -> retval\n.   @see setIterations'
        pass
    
    def getLearningRate(self):
        'getLearningRate() -> retval\n.   @see setLearningRate'
        pass
    
    def getMiniBatchSize(self):
        'getMiniBatchSize() -> retval\n.   @see setMiniBatchSize'
        pass
    
    def getRegularization(self):
        'getRegularization() -> retval\n.   @see setRegularization'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getTrainMethod(self):
        'getTrainMethod() -> retval\n.   @see setTrainMethod'
        pass
    
    def get_learnt_thetas(self):
        'get_learnt_thetas() -> retval\n.   @brief This function returns the trained parameters arranged across rows.\n.   \n.   For a two class classifcation problem, it returns a row matrix. It returns learnt parameters of\n.   the Logistic Regression as a matrix of type CV_32F.'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized LogisticRegression from a file\n.   *\n.   * Use LogisticRegression::save to serialize and store an LogisticRegression to disk.\n.   * Load the LogisticRegression from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized LogisticRegression\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def predict(self, samples, results=None, flags=None):
        'predict(samples[, results[, flags]]) -> retval, results\n.   @brief Predicts responses for input samples and returns a float type.\n.   \n.   @param samples The input data for the prediction algorithm. Matrix [m x n], where each row\n.   contains variables (features) of one object being classified. Should have data type CV_32F.\n.   @param results Predicted labels as a column matrix of type CV_32S.\n.   @param flags Not used.'
        pass
    
    def setIterations(self, val):
        'setIterations(val) -> None\n.   @copybrief getIterations @see getIterations'
        pass
    
    def setLearningRate(self, val):
        'setLearningRate(val) -> None\n.   @copybrief getLearningRate @see getLearningRate'
        pass
    
    def setMiniBatchSize(self, val):
        'setMiniBatchSize(val) -> None\n.   @copybrief getMiniBatchSize @see getMiniBatchSize'
        pass
    
    def setRegularization(self, val):
        'setRegularization(val) -> None\n.   @copybrief getRegularization @see getRegularization'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    
    def setTrainMethod(self, val):
        'setTrainMethod(val) -> None\n.   @copybrief getTrainMethod @see getTrainMethod'
        pass
    

class ml_NormalBayesClassifier(ml_StatModel):
    __class__ = ml_NormalBayesClassifier
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   Creates empty model\n.   Use StatModel::train to train the model after creation.'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized NormalBayesClassifier from a file\n.   *\n.   * Use NormalBayesClassifier::save to serialize and store an NormalBayesClassifier to disk.\n.   * Load the NormalBayesClassifier from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized NormalBayesClassifier\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def predictProb(self, inputs, outputs=None, outputProbs=None, flags=None):
        'predictProb(inputs[, outputs[, outputProbs[, flags]]]) -> retval, outputs, outputProbs\n.   @brief Predicts the response for sample(s).\n.   \n.   The method estimates the most probable classes for input vectors. Input vectors (one or more)\n.   are stored as rows of the matrix inputs. In case of multiple input vectors, there should be one\n.   output vector outputs. The predicted class for a single input vector is returned by the method.\n.   The vector outputProbs contains the output probabilities corresponding to each element of\n.   result.'
        pass
    

class ml_ParamGrid(_mod_builtins.object):
    __class__ = ml_ParamGrid
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, minVal=None, maxVal=None, logstep=None):
        'create([, minVal[, maxVal[, logstep]]]) -> retval\n.   @brief Creates a ParamGrid Ptr that can be given to the %SVM::trainAuto method\n.   \n.   @param minVal minimum value of the parameter grid\n.   @param maxVal maximum value of the parameter grid\n.   @param logstep Logarithmic step for iterating the statmodel parameter'
        pass
    
    @property
    def logStep(self):
        'logStep'
        pass
    
    @property
    def maxVal(self):
        'maxVal'
        pass
    
    @property
    def minVal(self):
        'minVal'
        pass
    

class ml_RTrees(ml_DTrees):
    __class__ = ml_RTrees
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   Creates the empty model.\n.   Use StatModel::train to train the model, StatModel::train to create and train the model,\n.   Algorithm::load to load the pre-trained model.'
        pass
    
    def getActiveVarCount(self):
        'getActiveVarCount() -> retval\n.   @see setActiveVarCount'
        pass
    
    def getCalculateVarImportance(self):
        'getCalculateVarImportance() -> retval\n.   @see setCalculateVarImportance'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getVarImportance(self):
        'getVarImportance() -> retval\n.   Returns the variable importance array.\n.   The method returns the variable importance vector, computed at the training stage when\n.   CalculateVarImportance is set to true. If this flag was set to false, the empty matrix is\n.   returned.'
        pass
    
    def getVotes(self, samples, flags, results=None):
        "getVotes(samples, flags[, results]) -> results\n.   Returns the result of each individual tree in the forest.\n.   In case the model is a regression problem, the method will return each of the trees'\n.   results for each of the sample cases. If the model is a classifier, it will return\n.   a Mat with samples + 1 rows, where the first row gives the class number and the\n.   following rows return the votes each class had for each sample.\n.   @param samples Array containing the samples for which votes will be calculated.\n.   @param results Array where the result of the calculation will be written.\n.   @param flags Flags for defining the type of RTrees."
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized RTree from a file\n.   *\n.   * Use RTree::save to serialize and store an RTree to disk.\n.   * Load the RTree from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized RTree\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def setActiveVarCount(self, val):
        'setActiveVarCount(val) -> None\n.   @copybrief getActiveVarCount @see getActiveVarCount'
        pass
    
    def setCalculateVarImportance(self, val):
        'setCalculateVarImportance(val) -> None\n.   @copybrief getCalculateVarImportance @see getCalculateVarImportance'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    

class ml_SVM(ml_StatModel):
    __class__ = ml_SVM
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   Creates empty model.\n.   Use StatModel::train to train the model. Since %SVM has several parameters, you may want to\n.   find the best parameters for your problem, it can be done with SVM::trainAuto.'
        pass
    
    def getC(self):
        'getC() -> retval\n.   @see setC'
        pass
    
    def getClassWeights(self):
        'getClassWeights() -> retval\n.   @see setClassWeights'
        pass
    
    def getCoef0(self):
        'getCoef0() -> retval\n.   @see setCoef0'
        pass
    
    def getDecisionFunction(self, i, alpha=None, svidx=None):
        'getDecisionFunction(i[, alpha[, svidx]]) -> retval, alpha, svidx\n.   @brief Retrieves the decision function\n.   \n.   @param i the index of the decision function. If the problem solved is regression, 1-class or\n.   2-class classification, then there will be just one decision function and the index should\n.   always be 0. Otherwise, in the case of N-class classification, there will be \\f$N(N-1)/2\\f$\n.   decision functions.\n.   @param alpha the optional output vector for weights, corresponding to different support vectors.\n.   In the case of linear %SVM all the alpha\'s will be 1\'s.\n.   @param svidx the optional output vector of indices of support vectors within the matrix of\n.   support vectors (which can be retrieved by SVM::getSupportVectors). In the case of linear\n.   %SVM each decision function consists of a single "compressed" support vector.\n.   \n.   The method returns rho parameter of the decision function, a scalar subtracted from the weighted\n.   sum of kernel responses.'
        pass
    
    @classmethod
    def getDefaultGridPtr(cls, param_id):
        'getDefaultGridPtr(param_id) -> retval\n.   @brief Generates a grid for %SVM parameters.\n.   \n.   @param param_id %SVM parameters IDs that must be one of the SVM::ParamTypes. The grid is\n.   generated for the parameter with this ID.\n.   \n.   The function generates a grid pointer for the specified parameter of the %SVM algorithm.\n.   The grid may be passed to the function SVM::trainAuto.'
        pass
    
    def getDegree(self):
        'getDegree() -> retval\n.   @see setDegree'
        pass
    
    def getGamma(self):
        'getGamma() -> retval\n.   @see setGamma'
        pass
    
    def getKernelType(self):
        'getKernelType() -> retval\n.   Type of a %SVM kernel.\n.   See SVM::KernelTypes. Default value is SVM::RBF.'
        pass
    
    def getNu(self):
        'getNu() -> retval\n.   @see setNu'
        pass
    
    def getP(self):
        'getP() -> retval\n.   @see setP'
        pass
    
    def getSupportVectors(self):
        'getSupportVectors() -> retval\n.   @brief Retrieves all the support vectors\n.   \n.   The method returns all the support vectors as a floating-point matrix, where support vectors are\n.   stored as matrix rows.'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getType(self):
        'getType() -> retval\n.   @see setType'
        pass
    
    def getUncompressedSupportVectors(self):
        'getUncompressedSupportVectors() -> retval\n.   @brief Retrieves all the uncompressed support vectors of a linear %SVM\n.   \n.   The method returns all the uncompressed support vectors of a linear %SVM that the compressed\n.   support vector, used for prediction, was derived from. They are returned in a floating-point\n.   matrix, where the support vectors are stored as matrix rows.'
        pass
    
    @classmethod
    def load(cls, filepath):
        'load(filepath) -> retval\n.   @brief Loads and creates a serialized svm from a file\n.   *\n.   * Use SVM::save to serialize and store an SVM to disk.\n.   * Load the SVM from this file again, by calling this function with the path to the file.\n.   *\n.   * @param filepath path to serialized svm'
        pass
    
    def setC(self, val):
        'setC(val) -> None\n.   @copybrief getC @see getC'
        pass
    
    def setClassWeights(self, val):
        'setClassWeights(val) -> None\n.   @copybrief getClassWeights @see getClassWeights'
        pass
    
    def setCoef0(self, val):
        'setCoef0(val) -> None\n.   @copybrief getCoef0 @see getCoef0'
        pass
    
    def setDegree(self, val):
        'setDegree(val) -> None\n.   @copybrief getDegree @see getDegree'
        pass
    
    def setGamma(self, val):
        'setGamma(val) -> None\n.   @copybrief getGamma @see getGamma'
        pass
    
    def setKernel(self, kernelType):
        'setKernel(kernelType) -> None\n.   Initialize with one of predefined kernels.\n.   See SVM::KernelTypes.'
        pass
    
    def setNu(self, val):
        'setNu(val) -> None\n.   @copybrief getNu @see getNu'
        pass
    
    def setP(self, val):
        'setP(val) -> None\n.   @copybrief getP @see getP'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    
    def setType(self, val):
        'setType(val) -> None\n.   @copybrief getType @see getType'
        pass
    
    def trainAuto(self, samples, layout, responses, kFold=None, Cgrid=None, gammaGrid=None, pGrid=None, nuGrid=None, coeffGrid=None, degreeGrid=None, balanced=None):
        'trainAuto(samples, layout, responses[, kFold[, Cgrid[, gammaGrid[, pGrid[, nuGrid[, coeffGrid[, degreeGrid[, balanced]]]]]]]]) -> retval\n.   @brief Trains an %SVM with optimal parameters\n.   \n.   @param samples training samples\n.   @param layout See ml::SampleTypes.\n.   @param responses vector of responses associated with the training samples.\n.   @param kFold Cross-validation parameter. The training set is divided into kFold subsets. One\n.   subset is used to test the model, the others form the train set. So, the %SVM algorithm is\n.   @param Cgrid grid for C\n.   @param gammaGrid grid for gamma\n.   @param pGrid grid for p\n.   @param nuGrid grid for nu\n.   @param coeffGrid grid for coeff\n.   @param degreeGrid grid for degree\n.   @param balanced If true and the problem is 2-class classification then the method creates more\n.   balanced cross-validation subsets that is proportions between classes in subsets are close\n.   to such proportion in the whole train dataset.\n.   \n.   The method trains the %SVM model automatically by choosing the optimal parameters C, gamma, p,\n.   nu, coef0, degree. Parameters are considered optimal when the cross-validation\n.   estimate of the test set error is minimal.\n.   \n.   This function only makes use of SVM::getDefaultGrid for parameter optimization and thus only\n.   offers rudimentary parameter options.\n.   \n.   This function works for the classification (SVM::C_SVC or SVM::NU_SVC) as well as for the\n.   regression (SVM::EPS_SVR or SVM::NU_SVR). If it is SVM::ONE_CLASS, no optimization is made and\n.   the usual %SVM with parameters specified in params is executed.'
        pass
    

class ml_SVMSGD(ml_StatModel):
    __class__ = ml_SVMSGD
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls):
        'create() -> retval\n.   @brief Creates empty model.\n.   * Use StatModel::train to train the model. Since %SVMSGD has several parameters, you may want to\n.   * find the best parameters for your problem or use setOptimalParameters() to set some default parameters.'
        pass
    
    def getInitialStepSize(self):
        'getInitialStepSize() -> retval\n.   @see setInitialStepSize'
        pass
    
    def getMarginRegularization(self):
        'getMarginRegularization() -> retval\n.   @see setMarginRegularization'
        pass
    
    def getMarginType(self):
        'getMarginType() -> retval\n.   @see setMarginType'
        pass
    
    def getShift(self):
        'getShift() -> retval\n.   * @return the shift of the trained model (decision function f(x) = weights * x + shift).'
        pass
    
    def getStepDecreasingPower(self):
        'getStepDecreasingPower() -> retval\n.   @see setStepDecreasingPower'
        pass
    
    def getSvmsgdType(self):
        'getSvmsgdType() -> retval\n.   @see setSvmsgdType'
        pass
    
    def getTermCriteria(self):
        'getTermCriteria() -> retval\n.   @see setTermCriteria'
        pass
    
    def getWeights(self):
        'getWeights() -> retval\n.   * @return the weights of the trained model (decision function f(x) = weights * x + shift).'
        pass
    
    @classmethod
    def load(cls, filepath, nodeName=None):
        'load(filepath[, nodeName]) -> retval\n.   @brief Loads and creates a serialized SVMSGD from a file\n.   *\n.   * Use SVMSGD::save to serialize and store an SVMSGD to disk.\n.   * Load the SVMSGD from this file again, by calling this function with the path to the file.\n.   * Optionally specify the node for the file containing the classifier\n.   *\n.   * @param filepath path to serialized SVMSGD\n.   * @param nodeName name of node containing the classifier'
        pass
    
    def setInitialStepSize(self, InitialStepSize):
        'setInitialStepSize(InitialStepSize) -> None\n.   @copybrief getInitialStepSize @see getInitialStepSize'
        pass
    
    def setMarginRegularization(self, marginRegularization):
        'setMarginRegularization(marginRegularization) -> None\n.   @copybrief getMarginRegularization @see getMarginRegularization'
        pass
    
    def setMarginType(self, marginType):
        'setMarginType(marginType) -> None\n.   @copybrief getMarginType @see getMarginType'
        pass
    
    def setOptimalParameters(self, svmsgdType=None, marginType=None):
        'setOptimalParameters([, svmsgdType[, marginType]]) -> None\n.   @brief Function sets optimal parameters values for chosen SVM SGD model.\n.   * @param svmsgdType is the type of SVMSGD classifier.\n.   * @param marginType is the type of margin constraint.'
        pass
    
    def setStepDecreasingPower(self, stepDecreasingPower):
        'setStepDecreasingPower(stepDecreasingPower) -> None\n.   @copybrief getStepDecreasingPower @see getStepDecreasingPower'
        pass
    
    def setSvmsgdType(self, svmsgdType):
        'setSvmsgdType(svmsgdType) -> None\n.   @copybrief getSvmsgdType @see getSvmsgdType'
        pass
    
    def setTermCriteria(self, val):
        'setTermCriteria(val) -> None\n.   @copybrief getTermCriteria @see getTermCriteria'
        pass
    

class ml_StatModel(Algorithm):
    __class__ = ml_StatModel
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calcError(self, data, test, resp=None):
        "calcError(data, test[, resp]) -> retval, resp\n.   @brief Computes error on the training or test dataset\n.   \n.   @param data the training data\n.   @param test if true, the error is computed over the test subset of the data, otherwise it's\n.   computed over the training subset of the data. Please note that if you loaded a completely\n.   different dataset to evaluate already trained classifier, you will probably want not to set\n.   the test subset at all with TrainData::setTrainTestSplitRatio and specify test=false, so\n.   that the error is computed for the whole new set. Yes, this sounds a bit confusing.\n.   @param resp the optional output responses.\n.   \n.   The method uses StatModel::predict to compute the error. For regression models the error is\n.   computed as RMS, for classifiers - as a percent of missclassified samples (0%-100%)."
        pass
    
    def empty(self):
        'empty() -> retval\n.'
        pass
    
    def getVarCount(self):
        'getVarCount() -> retval\n.   @brief Returns the number of variables in training samples'
        pass
    
    def isClassifier(self):
        'isClassifier() -> retval\n.   @brief Returns true if the model is classifier'
        pass
    
    def isTrained(self):
        'isTrained() -> retval\n.   @brief Returns true if the model is trained'
        pass
    
    def predict(self):
        'predict(samples[, results[, flags]]) -> retval, results\n.   @brief Predicts response(s) for the provided sample(s)\n.   \n.   @param samples The input samples, floating-point matrix\n.   @param results The optional output matrix of results.\n.   @param flags The optional flags, model-dependent. See cv::ml::StatModel::Flags.'
        pass
    
    def train(self, trainData, flags=None):
        'train(trainData[, flags]) -> retval\n.   @brief Trains the statistical model\n.   \n.   @param trainData training data that can be loaded from file using TrainData::loadFromCSV or\n.   created with TrainData::create.\n.   @param flags optional flags, depending on the model. Some of the models can be updated with the\n.   new training samples, not completely overwritten (such as NormalBayesClassifier or ANN_MLP).\n\n\n\ntrain(samples, layout, responses) -> retval\n.   @brief Trains the statistical model\n.   \n.   @param samples training samples\n.   @param layout See ml::SampleTypes.\n.   @param responses vector of responses associated with the training samples.'
        pass
    

class ml_TrainData(_mod_builtins.object):
    __class__ = ml_TrainData
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, samples, layout, responses, varIdx=None, sampleIdx=None, sampleWeights=None, varType=None):
        'create(samples, layout, responses[, varIdx[, sampleIdx[, sampleWeights[, varType]]]]) -> retval\n.   @brief Creates training data from in-memory arrays.\n.   \n.   @param samples matrix of samples. It should have CV_32F type.\n.   @param layout see ml::SampleTypes.\n.   @param responses matrix of responses. If the responses are scalar, they should be stored as a\n.   single row or as a single column. The matrix should have type CV_32F or CV_32S (in the\n.   former case the responses are considered as ordered by default; in the latter case - as\n.   categorical)\n.   @param varIdx vector specifying which variables to use for training. It can be an integer vector\n.   (CV_32S) containing 0-based variable indices or byte vector (CV_8U) containing a mask of\n.   active variables.\n.   @param sampleIdx vector specifying which samples to use for training. It can be an integer\n.   vector (CV_32S) containing 0-based sample indices or byte vector (CV_8U) containing a mask\n.   of training samples.\n.   @param sampleWeights optional vector with weights for each sample. It should have CV_32F type.\n.   @param varType optional vector of type CV_8U and size `<number_of_variables_in_samples> +\n.   <number_of_variables_in_responses>`, containing types of each input and output variable. See\n.   ml::VariableTypes.'
        pass
    
    def getCatCount(self, vi):
        'getCatCount(vi) -> retval\n.'
        pass
    
    def getCatMap(self):
        'getCatMap() -> retval\n.'
        pass
    
    def getCatOfs(self):
        'getCatOfs() -> retval\n.'
        pass
    
    def getClassLabels(self):
        'getClassLabels() -> retval\n.   @brief Returns the vector of class labels\n.   \n.   The function returns vector of unique labels occurred in the responses.'
        pass
    
    def getDefaultSubstValues(self):
        'getDefaultSubstValues() -> retval\n.'
        pass
    
    def getLayout(self):
        'getLayout() -> retval\n.'
        pass
    
    def getMissing(self):
        'getMissing() -> retval\n.'
        pass
    
    def getNAllVars(self):
        'getNAllVars() -> retval\n.'
        pass
    
    def getNSamples(self):
        'getNSamples() -> retval\n.'
        pass
    
    def getNTestSamples(self):
        'getNTestSamples() -> retval\n.'
        pass
    
    def getNTrainSamples(self):
        'getNTrainSamples() -> retval\n.'
        pass
    
    def getNVars(self):
        'getNVars() -> retval\n.'
        pass
    
    def getNames(self):
        'getNames(names) -> None\n.   @brief Returns vector of symbolic names captured in loadFromCSV()'
        pass
    
    def getNormCatResponses(self):
        'getNormCatResponses() -> retval\n.'
        pass
    
    def getResponseType(self):
        'getResponseType() -> retval\n.'
        pass
    
    def getResponses(self):
        'getResponses() -> retval\n.'
        pass
    
    def getSample(self, varIdx, sidx, buf):
        'getSample(varIdx, sidx, buf) -> None\n.'
        pass
    
    def getSampleWeights(self):
        'getSampleWeights() -> retval\n.'
        pass
    
    def getSamples(self):
        'getSamples() -> retval\n.'
        pass
    
    @classmethod
    def getSubMatrix(cls, matrix, idx, layout):
        'getSubMatrix(matrix, idx, layout) -> retval\n.   @brief Extract from matrix rows/cols specified by passed indexes.\n.   @param matrix input matrix (supported types: CV_32S, CV_32F, CV_64F)\n.   @param idx 1D index vector\n.   @param layout specifies to extract rows (cv::ml::ROW_SAMPLES) or to extract columns (cv::ml::COL_SAMPLES)'
        pass
    
    @classmethod
    def getSubVector(cls, vec, idx):
        'getSubVector(vec, idx) -> retval\n.   @brief Extract from 1D vector elements specified by passed indexes.\n.   @param vec input vector (supported types: CV_32S, CV_32F, CV_64F)\n.   @param idx 1D index vector'
        pass
    
    def getTestNormCatResponses(self):
        'getTestNormCatResponses() -> retval\n.'
        pass
    
    def getTestResponses(self):
        'getTestResponses() -> retval\n.'
        pass
    
    def getTestSampleIdx(self):
        'getTestSampleIdx() -> retval\n.'
        pass
    
    def getTestSampleWeights(self):
        'getTestSampleWeights() -> retval\n.'
        pass
    
    def getTestSamples(self):
        'getTestSamples() -> retval\n.   @brief Returns matrix of test samples'
        pass
    
    def getTrainNormCatResponses(self):
        'getTrainNormCatResponses() -> retval\n.   @brief Returns the vector of normalized categorical responses\n.   \n.   The function returns vector of responses. Each response is integer from `0` to `<number of\n.   classes>-1`. The actual label value can be retrieved then from the class label vector, see\n.   TrainData::getClassLabels.'
        pass
    
    def getTrainResponses(self):
        "getTrainResponses() -> retval\n.   @brief Returns the vector of responses\n.   \n.   The function returns ordered or the original categorical responses. Usually it's used in\n.   regression algorithms."
        pass
    
    def getTrainSampleIdx(self):
        'getTrainSampleIdx() -> retval\n.'
        pass
    
    def getTrainSampleWeights(self):
        'getTrainSampleWeights() -> retval\n.'
        pass
    
    def getTrainSamples(self, layout=None, compressSamples=None, compressVars=None):
        "getTrainSamples([, layout[, compressSamples[, compressVars]]]) -> retval\n.   @brief Returns matrix of train samples\n.   \n.   @param layout The requested layout. If it's different from the initial one, the matrix is\n.   transposed. See ml::SampleTypes.\n.   @param compressSamples if true, the function returns only the training samples (specified by\n.   sampleIdx)\n.   @param compressVars if true, the function returns the shorter training samples, containing only\n.   the active variables.\n.   \n.   In current implementation the function tries to avoid physical data copying and returns the\n.   matrix stored inside TrainData (unless the transposition or compression is needed)."
        pass
    
    def getValues(self, vi, sidx, values):
        'getValues(vi, sidx, values) -> None\n.'
        pass
    
    def getVarIdx(self):
        'getVarIdx() -> retval\n.'
        pass
    
    def getVarSymbolFlags(self):
        'getVarSymbolFlags() -> retval\n.'
        pass
    
    def getVarType(self):
        'getVarType() -> retval\n.'
        pass
    
    def setTrainTestSplit(self, count, shuffle=None):
        'setTrainTestSplit(count[, shuffle]) -> None\n.   @brief Splits the training data into the training and test parts\n.   @sa TrainData::setTrainTestSplitRatio'
        pass
    
    def setTrainTestSplitRatio(self, ratio, shuffle=None):
        'setTrainTestSplitRatio(ratio[, shuffle]) -> None\n.   @brief Splits the training data into the training and test parts\n.   \n.   The function selects a subset of specified relative size and then returns it as the training\n.   set. If the function is not called, all the data is used for training. Please, note that for\n.   each of TrainData::getTrain\\* there is corresponding TrainData::getTest\\*, so that the test\n.   subset can be retrieved and processed as well.\n.   @sa TrainData::setTrainTestSplit'
        pass
    
    def shuffleTrainTest(self):
        'shuffleTrainTest() -> None\n.'
        pass
    

def moments(array, binaryImage=None):
    "moments(array[, binaryImage]) -> retval\n.   @brief Calculates all of the moments up to the third order of a polygon or rasterized shape.\n.   \n.   The function computes moments, up to the 3rd order, of a vector shape or a rasterized shape. The\n.   results are returned in the structure cv::Moments.\n.   \n.   @param array Raster image (single-channel, 8-bit or floating-point 2D array) or an array (\n.   \\f$1 \\times N\\f$ or \\f$N \\times 1\\f$ ) of 2D points (Point or Point2f ).\n.   @param binaryImage If it is true, all non-zero image pixels are treated as 1's. The parameter is\n.   used for images only.\n.   @returns moments.\n.   \n.   @note Only applicable to contour moments calculations from Python bindings: Note that the numpy\n.   type for the input array should be either np.int32 or np.float32.\n.   \n.   @sa  contourArea, arcLength"
    pass

def morphologyEx(src, op, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None):
    'morphologyEx(src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst\n.   @brief Performs advanced morphological transformations.\n.   \n.   The function cv::morphologyEx can perform advanced morphological transformations using an erosion and dilation as\n.   basic operations.\n.   \n.   Any of the operations can be done in-place. In case of multi-channel images, each channel is\n.   processed independently.\n.   \n.   @param src Source image. The number of channels can be arbitrary. The depth should be one of\n.   CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.\n.   @param dst Destination image of the same size and type as source image.\n.   @param op Type of a morphological operation, see #MorphTypes\n.   @param kernel Structuring element. It can be created using #getStructuringElement.\n.   @param anchor Anchor position with the kernel. Negative values mean that the anchor is at the\n.   kernel center.\n.   @param iterations Number of times erosion and dilation are applied.\n.   @param borderType Pixel extrapolation method, see #BorderTypes\n.   @param borderValue Border value in case of a constant border. The default value has a special\n.   meaning.\n.   @sa  dilate, erode, getStructuringElement\n.   @note The number of iterations is the number of times erosion or dilatation operation will be applied.\n.   For instance, an opening operation (#MORPH_OPEN) with two iterations is equivalent to apply\n.   successively: erode -> erode -> dilate -> dilate (and not erode -> dilate -> erode -> dilate).'
    pass

def moveWindow(winname, x, y):
    'moveWindow(winname, x, y) -> None\n.   @brief Moves window to the specified position\n.   \n.   @param winname Name of the window.\n.   @param x The new x-coordinate of the window.\n.   @param y The new y-coordinate of the window.'
    pass

def mulSpectrums(a, b, flags, c=None, conjB=None):
    'mulSpectrums(a, b, flags[, c[, conjB]]) -> c\n.   @brief Performs the per-element multiplication of two Fourier spectrums.\n.   \n.   The function cv::mulSpectrums performs the per-element multiplication of the two CCS-packed or complex\n.   matrices that are results of a real or complex Fourier transform.\n.   \n.   The function, together with dft and idft , may be used to calculate convolution (pass conjB=false )\n.   or correlation (pass conjB=true ) of two arrays rapidly. When the arrays are complex, they are\n.   simply multiplied (per element) with an optional conjugation of the second-array elements. When the\n.   arrays are real, they are assumed to be CCS-packed (see dft for details).\n.   @param a first input array.\n.   @param b second input array of the same size and type as src1 .\n.   @param c output array of the same size and type as src1 .\n.   @param flags operation flags; currently, the only supported flag is cv::DFT_ROWS, which indicates that\n.   each row of src1 and src2 is an independent 1D Fourier spectrum. If you do not want to use this flag, then simply add a `0` as value.\n.   @param conjB optional flag that conjugates the second input array before the multiplication (true)\n.   or not (false).'
    pass

def mulTransposed(src, aTa, dst=None, delta=None, scale=None, dtype=None):
    'mulTransposed(src, aTa[, dst[, delta[, scale[, dtype]]]]) -> dst\n.   @brief Calculates the product of a matrix and its transposition.\n.   \n.   The function cv::mulTransposed calculates the product of src and its\n.   transposition:\n.   \\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} )^T ( \\texttt{src} - \\texttt{delta} )\\f]\n.   if aTa=true , and\n.   \\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} ) ( \\texttt{src} - \\texttt{delta} )^T\\f]\n.   otherwise. The function is used to calculate the covariance matrix. With\n.   zero delta, it can be used as a faster substitute for general matrix\n.   product A\\*B when B=A\'\n.   @param src input single-channel matrix. Note that unlike gemm, the\n.   function can multiply not only floating-point matrices.\n.   @param dst output square matrix.\n.   @param aTa Flag specifying the multiplication ordering. See the\n.   description below.\n.   @param delta Optional delta matrix subtracted from src before the\n.   multiplication. When the matrix is empty ( delta=noArray() ), it is\n.   assumed to be zero, that is, nothing is subtracted. If it has the same\n.   size as src , it is simply subtracted. Otherwise, it is "repeated" (see\n.   repeat ) to cover the full src and then subtracted. Type of the delta\n.   matrix, when it is not empty, must be the same as the type of created\n.   output matrix. See the dtype parameter description below.\n.   @param scale Optional scale factor for the matrix product.\n.   @param dtype Optional type of the output matrix. When it is negative,\n.   the output matrix will have the same type as src . Otherwise, it will be\n.   type=CV_MAT_DEPTH(dtype) that should be either CV_32F or CV_64F .\n.   @sa calcCovarMatrix, gemm, repeat, reduce'
    pass

def multiply(src1, src2, dst=None, scale=None, dtype=None):
    'multiply(src1, src2[, dst[, scale[, dtype]]]) -> dst\n.   @brief Calculates the per-element scaled product of two arrays.\n.   \n.   The function multiply calculates the per-element product of two arrays:\n.   \n.   \\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{scale} \\cdot \\texttt{src1} (I)  \\cdot \\texttt{src2} (I))\\f]\n.   \n.   There is also a @ref MatrixExpressions -friendly variant of the first function. See Mat::mul .\n.   \n.   For a not-per-element matrix product, see gemm .\n.   \n.   @note Saturation is not applied when the output array has the depth\n.   CV_32S. You may even get result of an incorrect sign in the case of\n.   overflow.\n.   @param src1 first input array.\n.   @param src2 second input array of the same size and the same type as src1.\n.   @param dst output array of the same size and type as src1.\n.   @param scale optional scale factor.\n.   @param dtype optional depth of the output array\n.   @sa add, subtract, divide, scaleAdd, addWeighted, accumulate, accumulateProduct, accumulateSquare,\n.   Mat::convertTo'
    pass

def namedWindow(winname, flags=None):
    'namedWindow(winname[, flags]) -> None\n.   @brief Creates a window.\n.   \n.   The function namedWindow creates a window that can be used as a placeholder for images and\n.   trackbars. Created windows are referred to by their names.\n.   \n.   If a window with the same name already exists, the function does nothing.\n.   \n.   You can call cv::destroyWindow or cv::destroyAllWindows to close the window and de-allocate any associated\n.   memory usage. For a simple program, you do not really have to call these functions because all the\n.   resources and windows of the application are closed automatically by the operating system upon exit.\n.   \n.   @note\n.   \n.   Qt backend supports additional flags:\n.   -   **WINDOW_NORMAL or WINDOW_AUTOSIZE:** WINDOW_NORMAL enables you to resize the\n.   window, whereas WINDOW_AUTOSIZE adjusts automatically the window size to fit the\n.   displayed image (see imshow ), and you cannot change the window size manually.\n.   -   **WINDOW_FREERATIO or WINDOW_KEEPRATIO:** WINDOW_FREERATIO adjusts the image\n.   with no respect to its ratio, whereas WINDOW_KEEPRATIO keeps the image ratio.\n.   -   **WINDOW_GUI_NORMAL or WINDOW_GUI_EXPANDED:** WINDOW_GUI_NORMAL is the old way to draw the window\n.   without statusbar and toolbar, whereas WINDOW_GUI_EXPANDED is a new enhanced GUI.\n.   By default, flags == WINDOW_AUTOSIZE | WINDOW_KEEPRATIO | WINDOW_GUI_EXPANDED\n.   \n.   @param winname Name of the window in the window caption that may be used as a window identifier.\n.   @param flags Flags of the window. The supported flags are: (cv::WindowFlags)'
    pass

def norm(src1, normType=None, mask=None):
    'norm(src1[, normType[, mask]]) -> retval\n.   @brief Calculates the  absolute norm of an array.\n.   \n.   This version of #norm calculates the absolute norm of src1. The type of norm to calculate is specified using #NormTypes.\n.   \n.   As example for one array consider the function \\f$r(x)= \\begin{pmatrix} x \\\\ 1-x \\end{pmatrix}, x \\in [-1;1]\\f$.\n.   The \\f$ L_{1}, L_{2} \\f$ and \\f$ L_{\\infty} \\f$ norm for the sample value \\f$r(-1) = \\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix}\\f$\n.   is calculated as follows\n.   \\f{align*}\n.   \\| r(-1) \\|_{L_1} &= |-1| + |2| = 3 \\\\\n.   \\| r(-1) \\|_{L_2} &= \\sqrt{(-1)^{2} + (2)^{2}} = \\sqrt{5} \\\\\n.   \\| r(-1) \\|_{L_\\infty} &= \\max(|-1|,|2|) = 2\n.   \\f}\n.   and for \\f$r(0.5) = \\begin{pmatrix} 0.5 \\\\ 0.5 \\end{pmatrix}\\f$ the calculation is\n.   \\f{align*}\n.   \\| r(0.5) \\|_{L_1} &= |0.5| + |0.5| = 1 \\\\\n.   \\| r(0.5) \\|_{L_2} &= \\sqrt{(0.5)^{2} + (0.5)^{2}} = \\sqrt{0.5} \\\\\n.   \\| r(0.5) \\|_{L_\\infty} &= \\max(|0.5|,|0.5|) = 0.5.\n.   \\f}\n.   The following graphic shows all values for the three norm functions \\f$\\| r(x) \\|_{L_1}, \\| r(x) \\|_{L_2}\\f$ and \\f$\\| r(x) \\|_{L_\\infty}\\f$.\n.   It is notable that the \\f$ L_{1} \\f$ norm forms the upper and the \\f$ L_{\\infty} \\f$ norm forms the lower border for the example function \\f$ r(x) \\f$.\n.   ![Graphs for the different norm functions from the above example](pics/NormTypes_OneArray_1-2-INF.png)\n.   \n.   When the mask parameter is specified and it is not empty, the norm is\n.   \n.   If normType is not specified, #NORM_L2 is used.\n.   calculated only over the region specified by the mask.\n.   \n.   Multi-channel input arrays are treated as single-channel arrays, that is,\n.   the results for all channels are combined.\n.   \n.   Hamming norms can only be calculated with CV_8U depth arrays.\n.   \n.   @param src1 first input array.\n.   @param normType type of the norm (see #NormTypes).\n.   @param mask optional operation mask; it must have the same size as src1 and CV_8UC1 type.\n\n\n\nnorm(src1, src2[, normType[, mask]]) -> retval\n.   @brief Calculates an absolute difference norm or a relative difference norm.\n.   \n.   This version of cv::norm calculates the absolute difference norm\n.   or the relative difference norm of arrays src1 and src2.\n.   The type of norm to calculate is specified using #NormTypes.\n.   \n.   @param src1 first input array.\n.   @param src2 second input array of the same size and the same type as src1.\n.   @param normType type of the norm (see #NormTypes).\n.   @param mask optional operation mask; it must have the same size as src1 and CV_8UC1 type.'
    pass

def normalize(src, dst, alpha=None, beta=None, norm_type=None, dtype=None, mask=None):
    'normalize(src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]) -> dst\n.   @brief Normalizes the norm or value range of an array.\n.   \n.   The function cv::normalize normalizes scale and shift the input array elements so that\n.   \\f[\\| \\texttt{dst} \\| _{L_p}= \\texttt{alpha}\\f]\n.   (where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, respectively; or so that\n.   \\f[\\min _I  \\texttt{dst} (I)= \\texttt{alpha} , \\, \\, \\max _I  \\texttt{dst} (I)= \\texttt{beta}\\f]\n.   \n.   when normType=NORM_MINMAX (for dense arrays only). The optional mask specifies a sub-array to be\n.   normalized. This means that the norm or min-n-max are calculated over the sub-array, and then this\n.   sub-array is modified to be normalized. If you want to only use the mask to calculate the norm or\n.   min-max but modify the whole array, you can use norm and Mat::convertTo.\n.   \n.   In case of sparse matrices, only the non-zero values are analyzed and transformed. Because of this,\n.   the range transformation for sparse matrices is not allowed since it can shift the zero level.\n.   \n.   Possible usage with some positive example data:\n.   @code{.cpp}\n.   vector<double> positiveData = { 2.0, 8.0, 10.0 };\n.   vector<double> normalizedData_l1, normalizedData_l2, normalizedData_inf, normalizedData_minmax;\n.   \n.   // Norm to probability (total count)\n.   // sum(numbers) = 20.0\n.   // 2.0      0.1     (2.0/20.0)\n.   // 8.0      0.4     (8.0/20.0)\n.   // 10.0     0.5     (10.0/20.0)\n.   normalize(positiveData, normalizedData_l1, 1.0, 0.0, NORM_L1);\n.   \n.   // Norm to unit vector: ||positiveData|| = 1.0\n.   // 2.0      0.15\n.   // 8.0      0.62\n.   // 10.0     0.77\n.   normalize(positiveData, normalizedData_l2, 1.0, 0.0, NORM_L2);\n.   \n.   // Norm to max element\n.   // 2.0      0.2     (2.0/10.0)\n.   // 8.0      0.8     (8.0/10.0)\n.   // 10.0     1.0     (10.0/10.0)\n.   normalize(positiveData, normalizedData_inf, 1.0, 0.0, NORM_INF);\n.   \n.   // Norm to range [0.0;1.0]\n.   // 2.0      0.0     (shift to left border)\n.   // 8.0      0.75    (6.0/8.0)\n.   // 10.0     1.0     (shift to right border)\n.   normalize(positiveData, normalizedData_minmax, 1.0, 0.0, NORM_MINMAX);\n.   @endcode\n.   \n.   @param src input array.\n.   @param dst output array of the same size as src .\n.   @param alpha norm value to normalize to or the lower range boundary in case of the range\n.   normalization.\n.   @param beta upper range boundary in case of the range normalization; it is not used for the norm\n.   normalization.\n.   @param norm_type normalization type (see cv::NormTypes).\n.   @param dtype when negative, the output array has the same type as src; otherwise, it has the same\n.   number of channels as src and the depth =CV_MAT_DEPTH(dtype).\n.   @param mask optional operation mask.\n.   @sa norm, Mat::convertTo, SparseMat::convertTo'
    pass

class optflow_DISOpticalFlow(DenseOpticalFlow):
    __class__ = optflow_DISOpticalFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getFinestScale(self):
        'getFinestScale() -> retval\n.   @brief Finest level of the Gaussian pyramid on which the flow is computed (zero level\n.   corresponds to the original image resolution). The final flow is obtained by bilinear upscaling.\n.   @see setFinestScale'
        pass
    
    def getGradientDescentIterations(self):
        'getGradientDescentIterations() -> retval\n.   @brief Maximum number of gradient descent iterations in the patch inverse search stage. Higher values\n.   may improve quality in some cases.\n.   @see setGradientDescentIterations'
        pass
    
    def getPatchSize(self):
        'getPatchSize() -> retval\n.   @brief Size of an image patch for matching (in pixels). Normally, default 8x8 patches work well\n.   enough in most cases.\n.   @see setPatchSize'
        pass
    
    def getPatchStride(self):
        'getPatchStride() -> retval\n.   @brief Stride between neighbor patches. Must be less than patch size. Lower values correspond\n.   to higher flow quality.\n.   @see setPatchStride'
        pass
    
    def getUseMeanNormalization(self):
        "getUseMeanNormalization() -> retval\n.   @brief Whether to use mean-normalization of patches when computing patch distance. It is turned on\n.   by default as it typically provides a noticeable quality boost because of increased robustness to\n.   illumination variations. Turn it off if you are certain that your sequence doesn't contain any changes\n.   in illumination.\n.   @see setUseMeanNormalization"
        pass
    
    def getUseSpatialPropagation(self):
        'getUseSpatialPropagation() -> retval\n.   @brief Whether to use spatial propagation of good optical flow vectors. This option is turned on by\n.   default, as it tends to work better on average and can sometimes help recover from major errors\n.   introduced by the coarse-to-fine scheme employed by the DIS optical flow algorithm. Turning this\n.   option off can make the output flow field a bit smoother, however.\n.   @see setUseSpatialPropagation'
        pass
    
    def getVariationalRefinementAlpha(self):
        'getVariationalRefinementAlpha() -> retval\n.   @brief Weight of the smoothness term\n.   @see setVariationalRefinementAlpha'
        pass
    
    def getVariationalRefinementDelta(self):
        'getVariationalRefinementDelta() -> retval\n.   @brief Weight of the color constancy term\n.   @see setVariationalRefinementDelta'
        pass
    
    def getVariationalRefinementGamma(self):
        'getVariationalRefinementGamma() -> retval\n.   @brief Weight of the gradient constancy term\n.   @see setVariationalRefinementGamma'
        pass
    
    def getVariationalRefinementIterations(self):
        'getVariationalRefinementIterations() -> retval\n.   @brief Number of fixed point iterations of variational refinement per scale. Set to zero to\n.   disable variational refinement completely. Higher values will typically result in more smooth and\n.   high-quality flow.\n.   @see setGradientDescentIterations'
        pass
    
    def setFinestScale(self, val):
        'setFinestScale(val) -> None\n.   @copybrief getFinestScale @see getFinestScale'
        pass
    
    def setGradientDescentIterations(self, val):
        'setGradientDescentIterations(val) -> None\n.   @copybrief getGradientDescentIterations @see getGradientDescentIterations'
        pass
    
    def setPatchSize(self, val):
        'setPatchSize(val) -> None\n.   @copybrief getPatchSize @see getPatchSize'
        pass
    
    def setPatchStride(self, val):
        'setPatchStride(val) -> None\n.   @copybrief getPatchStride @see getPatchStride'
        pass
    
    def setUseMeanNormalization(self, val):
        'setUseMeanNormalization(val) -> None\n.   @copybrief getUseMeanNormalization @see getUseMeanNormalization'
        pass
    
    def setUseSpatialPropagation(self, val):
        'setUseSpatialPropagation(val) -> None\n.   @copybrief getUseSpatialPropagation @see getUseSpatialPropagation'
        pass
    
    def setVariationalRefinementAlpha(self, val):
        'setVariationalRefinementAlpha(val) -> None\n.   @copybrief getVariationalRefinementAlpha @see getVariationalRefinementAlpha'
        pass
    
    def setVariationalRefinementDelta(self, val):
        'setVariationalRefinementDelta(val) -> None\n.   @copybrief getVariationalRefinementDelta @see getVariationalRefinementDelta'
        pass
    
    def setVariationalRefinementGamma(self, val):
        'setVariationalRefinementGamma(val) -> None\n.   @copybrief getVariationalRefinementGamma @see getVariationalRefinementGamma'
        pass
    
    def setVariationalRefinementIterations(self, val):
        'setVariationalRefinementIterations(val) -> None\n.   @copybrief getGradientDescentIterations @see getGradientDescentIterations'
        pass
    

class optflow_GPCDetails(_mod_builtins.object):
    __class__ = optflow_GPCDetails
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_GPCPatchDescriptor(_mod_builtins.object):
    __class__ = optflow_GPCPatchDescriptor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_GPCPatchSample(_mod_builtins.object):
    __class__ = optflow_GPCPatchSample
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_GPCTrainingSamples(_mod_builtins.object):
    __class__ = optflow_GPCTrainingSamples
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_GPCTree(Algorithm):
    __class__ = optflow_GPCTree
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_OpticalFlowPCAFlow(DenseOpticalFlow):
    __class__ = optflow_OpticalFlowPCAFlow
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_PCAPrior(_mod_builtins.object):
    __class__ = optflow_PCAPrior
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class optflow_VariationalRefinement(DenseOpticalFlow):
    __class__ = optflow_VariationalRefinement
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calcUV(self):
        'calcUV(I0, I1, flow_u, flow_v) -> flow_u, flow_v\n.   @brief @ref calc function overload to handle separate horizontal (u) and vertical (v) flow components\n.   (to avoid extra splits/merges)'
        pass
    
    def getAlpha(self):
        'getAlpha() -> retval\n.   @brief Weight of the smoothness term\n.   @see setAlpha'
        pass
    
    def getDelta(self):
        'getDelta() -> retval\n.   @brief Weight of the color constancy term\n.   @see setDelta'
        pass
    
    def getFixedPointIterations(self):
        'getFixedPointIterations() -> retval\n.   @brief Number of outer (fixed-point) iterations in the minimization procedure.\n.   @see setFixedPointIterations'
        pass
    
    def getGamma(self):
        'getGamma() -> retval\n.   @brief Weight of the gradient constancy term\n.   @see setGamma'
        pass
    
    def getOmega(self):
        'getOmega() -> retval\n.   @brief Relaxation factor in SOR\n.   @see setOmega'
        pass
    
    def getSorIterations(self):
        'getSorIterations() -> retval\n.   @brief Number of inner successive over-relaxation (SOR) iterations\n.   in the minimization procedure to solve the respective linear system.\n.   @see setSorIterations'
        pass
    
    def setAlpha(self, val):
        'setAlpha(val) -> None\n.   @copybrief getAlpha @see getAlpha'
        pass
    
    def setDelta(self, val):
        'setDelta(val) -> None\n.   @copybrief getDelta @see getDelta'
        pass
    
    def setFixedPointIterations(self, val):
        'setFixedPointIterations(val) -> None\n.   @copybrief getFixedPointIterations @see getFixedPointIterations'
        pass
    
    def setGamma(self, val):
        'setGamma(val) -> None\n.   @copybrief getGamma @see getGamma'
        pass
    
    def setOmega(self, val):
        'setOmega(val) -> None\n.   @copybrief getOmega @see getOmega'
        pass
    
    def setSorIterations(self, val):
        'setSorIterations(val) -> None\n.   @copybrief getSorIterations @see getSorIterations'
        pass
    

def patchNaNs(a, val=None):
    "patchNaNs(a[, val]) -> a\n.   @brief converts NaN's to the given number"
    pass

def pencilSketch(src, dst1=None, dst2=None, sigma_s=None, sigma_r=None, shade_factor=None):
    'pencilSketch(src[, dst1[, dst2[, sigma_s[, sigma_r[, shade_factor]]]]]) -> dst1, dst2\n.   @brief Pencil-like non-photorealistic line drawing\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst1 Output 8-bit 1-channel image.\n.   @param dst2 Output image with the same size and type as src.\n.   @param sigma_s Range between 0 to 200.\n.   @param sigma_r Range between 0 to 1.\n.   @param shade_factor Range between 0 to 0.1.'
    pass

def perspectiveTransform(src, m, dst=None):
    "perspectiveTransform(src, m[, dst]) -> dst\n.   @brief Performs the perspective matrix transformation of vectors.\n.   \n.   The function cv::perspectiveTransform transforms every element of src by\n.   treating it as a 2D or 3D vector, in the following way:\n.   \\f[(x, y, z)  \\rightarrow (x'/w, y'/w, z'/w)\\f]\n.   where\n.   \\f[(x', y', z', w') =  \\texttt{mat} \\cdot \\begin{bmatrix} x & y & z & 1  \\end{bmatrix}\\f]\n.   and\n.   \\f[w =  \\fork{w'}{if \\(w' \\ne 0\\)}{\\infty}{otherwise}\\f]\n.   \n.   Here a 3D vector transformation is shown. In case of a 2D vector\n.   transformation, the z component is omitted.\n.   \n.   @note The function transforms a sparse set of 2D or 3D vectors. If you\n.   want to transform an image using perspective transformation, use\n.   warpPerspective . If you have an inverse problem, that is, you want to\n.   compute the most probable perspective transformation out of several\n.   pairs of corresponding points, you can use getPerspectiveTransform or\n.   findHomography .\n.   @param src input two-channel or three-channel floating-point array; each\n.   element is a 2D/3D vector to be transformed.\n.   @param dst output array of the same size and type as src.\n.   @param m 3x3 or 4x4 floating-point transformation matrix.\n.   @sa  transform, warpPerspective, getPerspectiveTransform, findHomography"
    pass

def phase(x, y, angle=None, angleInDegrees=None):
    'phase(x, y[, angle[, angleInDegrees]]) -> angle\n.   @brief Calculates the rotation angle of 2D vectors.\n.   \n.   The function cv::phase calculates the rotation angle of each 2D vector that\n.   is formed from the corresponding elements of x and y :\n.   \\f[\\texttt{angle} (I) =  \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))\\f]\n.   \n.   The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 ,\n.   the corresponding angle(I) is set to 0.\n.   @param x input floating-point array of x-coordinates of 2D vectors.\n.   @param y input array of y-coordinates of 2D vectors; it must have the\n.   same size and the same type as x.\n.   @param angle output array of vector angles; it has the same size and\n.   same type as x .\n.   @param angleInDegrees when true, the function calculates the angle in\n.   degrees, otherwise, they are measured in radians.'
    pass

def phaseCorrelate(src1, src2, window=None):
    'phaseCorrelate(src1, src2[, window]) -> retval, response\n.   @brief The function is used to detect translational shifts that occur between two images.\n.   \n.   The operation takes advantage of the Fourier shift theorem for detecting the translational shift in\n.   the frequency domain. It can be used for fast image registration as well as motion estimation. For\n.   more information please see <http://en.wikipedia.org/wiki/Phase_correlation>\n.   \n.   Calculates the cross-power spectrum of two supplied source arrays. The arrays are padded if needed\n.   with getOptimalDFTSize.\n.   \n.   The function performs the following equations:\n.   - First it applies a Hanning window (see <http://en.wikipedia.org/wiki/Hann_function>) to each\n.   image to remove possible edge effects. This window is cached until the array size changes to speed\n.   up processing time.\n.   - Next it computes the forward DFTs of each source array:\n.   \\f[\\mathbf{G}_a = \\mathcal{F}\\{src_1\\}, \\; \\mathbf{G}_b = \\mathcal{F}\\{src_2\\}\\f]\n.   where \\f$\\mathcal{F}\\f$ is the forward DFT.\n.   - It then computes the cross-power spectrum of each frequency domain array:\n.   \\f[R = \\frac{ \\mathbf{G}_a \\mathbf{G}_b^*}{|\\mathbf{G}_a \\mathbf{G}_b^*|}\\f]\n.   - Next the cross-correlation is converted back into the time domain via the inverse DFT:\n.   \\f[r = \\mathcal{F}^{-1}\\{R\\}\\f]\n.   - Finally, it computes the peak location and computes a 5x5 weighted centroid around the peak to\n.   achieve sub-pixel accuracy.\n.   \\f[(\\Delta x, \\Delta y) = \\texttt{weightedCentroid} \\{\\arg \\max_{(x, y)}\\{r\\}\\}\\f]\n.   - If non-zero, the response parameter is computed as the sum of the elements of r within the 5x5\n.   centroid around the peak location. It is normalized to a maximum of 1 (meaning there is a single\n.   peak) and will be smaller when there are multiple peaks.\n.   \n.   @param src1 Source floating point array (CV_32FC1 or CV_64FC1)\n.   @param src2 Source floating point array (CV_32FC1 or CV_64FC1)\n.   @param window Floating point array with windowing coefficients to reduce edge effects (optional).\n.   @param response Signal power within the 5x5 centroid around the peak, between 0 and 1 (optional).\n.   @returns detected phase shift (sub-pixel) between the two arrays.\n.   \n.   @sa dft, getOptimalDFTSize, idft, mulSpectrums createHanningWindow'
    pass

class phase_unwrapping_HistogramPhaseUnwrapping(phase_unwrapping_PhaseUnwrapping):
    __class__ = phase_unwrapping_HistogramPhaseUnwrapping
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getInverseReliabilityMap(self, reliabilityMap=None):
        'getInverseReliabilityMap([, reliabilityMap]) -> reliabilityMap\n.   * @brief Get the reliability map computed from the wrapped phase map.\n.   \n.   * @param reliabilityMap Image where the reliability map is stored.'
        pass
    

class phase_unwrapping_PhaseUnwrapping(_mod_builtins.object):
    __class__ = phase_unwrapping_PhaseUnwrapping
    def __delattr__(self, name):
        'Implement delattr(self, name).'
        return None
    
    def __eq__(self, value):
        'Return self==value.'
        return False
    
    def __ge__(self, value):
        'Return self>=value.'
        return False
    
    def __getattribute__(self, name):
        'Return getattr(self, name).'
        pass
    
    def __gt__(self, value):
        'Return self>value.'
        return False
    
    def __hash__(self):
        'Return hash(self).'
        return 0
    
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __le__(self, value):
        'Return self<=value.'
        return False
    
    def __lt__(self, value):
        'Return self<value.'
        return False
    
    def __ne__(self, value):
        'Return self!=value.'
        return False
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    def __setattr__(self, name, value):
        'Implement setattr(self, name, value).'
        return None
    
    def __str__(self):
        'Return str(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def unwrapPhaseMap(self, wrappedPhaseMap, unwrappedPhaseMap=None, shadowMask=None):
        'unwrapPhaseMap(wrappedPhaseMap[, unwrappedPhaseMap[, shadowMask]]) -> unwrappedPhaseMap\n.   * @brief Unwraps a 2D phase map.\n.   \n.   * @param wrappedPhaseMap The wrapped phase map that needs to be unwrapped.\n.   * @param unwrappedPhaseMap The unwrapped phase map.\n.   * @param shadowMask Optional parameter used when some pixels do not hold any phase information in the wrapped phase map.'
        pass
    

class plot_Plot2d(Algorithm):
    __class__ = plot_Plot2d
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, data):
        'create(data) -> retval\n.   * @brief Creates Plot2d object\n.   *\n.   * @param data \\f$1xN\\f$ or \\f$Nx1\\f$ matrix containing \\f$Y\\f$ values of points to plot. \\f$X\\f$ values\n.   * will be equal to indexes of correspondind elements in data matrix.\n\n\n\ncreate(dataX, dataY) -> retval\n.   * @brief Creates Plot2d object\n.   *\n.   * @param dataX \\f$1xN\\f$ or \\f$Nx1\\f$ matrix \\f$X\\f$ values of points to plot.\n.   * @param dataY \\f$1xN\\f$ or \\f$Nx1\\f$ matrix containing \\f$Y\\f$ values of points to plot.'
        pass
    
    def render(self, _plotResult=None):
        'render([, _plotResult]) -> _plotResult\n.'
        pass
    
    def setGridLinesNumber(self, gridLinesNumber):
        'setGridLinesNumber(gridLinesNumber) -> None\n.'
        pass
    
    def setInvertOrientation(self, _invertOrientation):
        'setInvertOrientation(_invertOrientation) -> None\n.'
        pass
    
    def setMaxX(self, _plotMaxX):
        'setMaxX(_plotMaxX) -> None\n.'
        pass
    
    def setMaxY(self, _plotMaxY):
        'setMaxY(_plotMaxY) -> None\n.'
        pass
    
    def setMinX(self, _plotMinX):
        'setMinX(_plotMinX) -> None\n.'
        pass
    
    def setMinY(self, _plotMinY):
        'setMinY(_plotMinY) -> None\n.'
        pass
    
    def setNeedPlotLine(self, _needPlotLine):
        'setNeedPlotLine(_needPlotLine) -> None\n.   * @brief Switches data visualization mode\n.   *\n.   * @param _needPlotLine if true then neighbour plot points will be connected by lines.\n.   * In other case data will be plotted as a set of standalone points.'
        pass
    
    def setPlotAxisColor(self, _plotAxisColor):
        'setPlotAxisColor(_plotAxisColor) -> None\n.'
        pass
    
    def setPlotBackgroundColor(self, _plotBackgroundColor):
        'setPlotBackgroundColor(_plotBackgroundColor) -> None\n.'
        pass
    
    def setPlotGridColor(self, _plotGridColor):
        'setPlotGridColor(_plotGridColor) -> None\n.'
        pass
    
    def setPlotLineColor(self, _plotLineColor):
        'setPlotLineColor(_plotLineColor) -> None\n.'
        pass
    
    def setPlotLineWidth(self, _plotLineWidth):
        'setPlotLineWidth(_plotLineWidth) -> None\n.'
        pass
    
    def setPlotSize(self, _plotSizeWidth, _plotSizeHeight):
        'setPlotSize(_plotSizeWidth, _plotSizeHeight) -> None\n.'
        pass
    
    def setPlotTextColor(self, _plotTextColor):
        'setPlotTextColor(_plotTextColor) -> None\n.'
        pass
    
    def setPointIdxToPrint(self):
        'setPointIdxToPrint(pointIdx) -> None\n.   * @brief Sets the index of a point which coordinates will be printed on the top left corner of the plot (if ShowText flag is true).\n.   *\n.   * @param pointIdx index of the required point in data array.'
        pass
    
    def setShowGrid(self, needShowGrid):
        'setShowGrid(needShowGrid) -> None\n.'
        pass
    
    def setShowText(self, needShowText):
        'setShowText(needShowText) -> None\n.'
        pass
    

def pointPolygonTest(contour, pt, measureDist):
    'pointPolygonTest(contour, pt, measureDist) -> retval\n.   @brief Performs a point-in-contour test.\n.   \n.   The function determines whether the point is inside a contour, outside, or lies on an edge (or\n.   coincides with a vertex). It returns positive (inside), negative (outside), or zero (on an edge)\n.   value, correspondingly. When measureDist=false , the return value is +1, -1, and 0, respectively.\n.   Otherwise, the return value is a signed distance between the point and the nearest contour edge.\n.   \n.   See below a sample output of the function where each image pixel is tested against the contour:\n.   \n.   ![sample output](pics/pointpolygon.png)\n.   \n.   @param contour Input contour.\n.   @param pt Point tested against the contour.\n.   @param measureDist If true, the function estimates the signed distance from the point to the\n.   nearest contour edge. Otherwise, the function only checks if the point is inside a contour or not.'
    pass

def polarToCart(magnitude, angle, x=None, y=None, angleInDegrees=None):
    'polarToCart(magnitude, angle[, x[, y[, angleInDegrees]]]) -> x, y\n.   @brief Calculates x and y coordinates of 2D vectors from their magnitude and angle.\n.   \n.   The function cv::polarToCart calculates the Cartesian coordinates of each 2D\n.   vector represented by the corresponding elements of magnitude and angle:\n.   \\f[\\begin{array}{l} \\texttt{x} (I) =  \\texttt{magnitude} (I) \\cos ( \\texttt{angle} (I)) \\\\ \\texttt{y} (I) =  \\texttt{magnitude} (I) \\sin ( \\texttt{angle} (I)) \\\\ \\end{array}\\f]\n.   \n.   The relative accuracy of the estimated coordinates is about 1e-6.\n.   @param magnitude input floating-point array of magnitudes of 2D vectors;\n.   it can be an empty matrix (=Mat()), in this case, the function assumes\n.   that all the magnitudes are =1; if it is not empty, it must have the\n.   same size and type as angle.\n.   @param angle input floating-point array of angles of 2D vectors.\n.   @param x output array of x-coordinates of 2D vectors; it has the same\n.   size and type as angle.\n.   @param y output array of y-coordinates of 2D vectors; it has the same\n.   size and type as angle.\n.   @param angleInDegrees when true, the input angles are measured in\n.   degrees, otherwise, they are measured in radians.\n.   @sa cartToPolar, magnitude, phase, exp, log, pow, sqrt'
    pass

def polylines(img, pts, isClosed, color, thickness=None, lineType=None, shift=None):
    'polylines(img, pts, isClosed, color[, thickness[, lineType[, shift]]]) -> img\n.   @brief Draws several polygonal curves.\n.   \n.   @param img Image.\n.   @param pts Array of polygonal curves.\n.   @param isClosed Flag indicating whether the drawn polylines are closed or not. If they are closed,\n.   the function draws a line from the last vertex of each curve to its first vertex.\n.   @param color Polyline color.\n.   @param thickness Thickness of the polyline edges.\n.   @param lineType Type of the line segments. See #LineTypes\n.   @param shift Number of fractional bits in the vertex coordinates.\n.   \n.   The function cv::polylines draws one or more polygonal curves.'
    pass

def pow(src, power, dst=None):
    'pow(src, power[, dst]) -> dst\n.   @brief Raises every array element to a power.\n.   \n.   The function cv::pow raises every element of the input array to power :\n.   \\f[\\texttt{dst} (I) =  \\fork{\\texttt{src}(I)^{power}}{if \\(\\texttt{power}\\) is integer}{|\\texttt{src}(I)|^{power}}{otherwise}\\f]\n.   \n.   So, for a non-integer power exponent, the absolute values of input array\n.   elements are used. However, it is possible to get true values for\n.   negative values using some extra operations. In the example below,\n.   computing the 5th root of array src shows:\n.   @code{.cpp}\n.   Mat mask = src < 0;\n.   pow(src, 1./5, dst);\n.   subtract(Scalar::all(0), dst, dst, mask);\n.   @endcode\n.   For some values of power, such as integer values, 0.5 and -0.5,\n.   specialized faster algorithms are used.\n.   \n.   Special values (NaN, Inf) are not handled.\n.   @param src input array.\n.   @param power exponent of power.\n.   @param dst output array of the same size and type as src.\n.   @sa sqrt, exp, log, cartToPolar, polarToCart'
    pass

class ppf_match_3d_ICP(_mod_builtins.object):
    __class__ = ppf_match_3d_ICP
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def registerModelToScene(self, srcPC, dstPC):
        'registerModelToScene(srcPC, dstPC) -> retval, residual, pose\n.   *  \\brief Perform registration\n.   *\n.   *  @param [in] srcPC The input point cloud for the model. Expected to have the normals (Nx6). Currently,\n.   *  CV_32F is the only supported data type.\n.   *  @param [in] dstPC The input point cloud for the scene. It is assumed that the model is registered on the scene. Scene remains static. Expected to have the normals (Nx6). Currently, CV_32F is the only supported data type.\n.   *  @param [out] residual The output registration error.\n.   *  @param [out] pose Transformation between srcPC and dstPC.\n.   *  \\return On successful termination, the function returns 0.\n.   *\n.   *  \\details It is assumed that the model is registered on the scene. Scene remains static, while the model transforms. The output poses transform the models onto the scene. Because of the point to plane minimization, the scene is expected to have the normals available. Expected to have the normals (Nx6).'
        pass
    

class ppf_match_3d_PPF3DDetector(_mod_builtins.object):
    __class__ = ppf_match_3d_PPF3DDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class ppf_match_3d_PoseCluster3D(_mod_builtins.object):
    __class__ = ppf_match_3d_PoseCluster3D
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

def preCornerDetect(src, ksize, dst=None, borderType=None):
    'preCornerDetect(src, ksize[, dst[, borderType]]) -> dst\n.   @brief Calculates a feature map for corner detection.\n.   \n.   The function calculates the complex spatial derivative-based function of the source image\n.   \n.   \\f[\\texttt{dst} = (D_x  \\texttt{src} )^2  \\cdot D_{yy}  \\texttt{src} + (D_y  \\texttt{src} )^2  \\cdot D_{xx}  \\texttt{src} - 2 D_x  \\texttt{src} \\cdot D_y  \\texttt{src} \\cdot D_{xy}  \\texttt{src}\\f]\n.   \n.   where \\f$D_x\\f$,\\f$D_y\\f$ are the first image derivatives, \\f$D_{xx}\\f$,\\f$D_{yy}\\f$ are the second image\n.   derivatives, and \\f$D_{xy}\\f$ is the mixed derivative.\n.   \n.   The corners can be found as local maximums of the functions, as shown below:\n.   @code\n.   Mat corners, dilated_corners;\n.   preCornerDetect(image, corners, 3);\n.   // dilation with 3x3 rectangular structuring element\n.   dilate(corners, dilated_corners, Mat(), 1);\n.   Mat corner_mask = corners == dilated_corners;\n.   @endcode\n.   \n.   @param src Source single-channel 8-bit of floating-point image.\n.   @param dst Output image that has the type CV_32F and the same size as src .\n.   @param ksize %Aperture size of the Sobel .\n.   @param borderType Pixel extrapolation method. See #BorderTypes.'
    pass

def projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints=None, jacobian=None, aspectRatio=None):
    'projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs[, imagePoints[, jacobian[, aspectRatio]]]) -> imagePoints, jacobian\n.   @brief Projects 3D points to an image plane.\n.   \n.   @param objectPoints Array of object points, 3xN/Nx3 1-channel or 1xN/Nx1 3-channel (or\n.   vector\\<Point3f\\> ), where N is the number of points in the view.\n.   @param rvec Rotation vector. See Rodrigues for details.\n.   @param tvec Translation vector.\n.   @param cameraMatrix Camera matrix \\f$A = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{_1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. If the vector is empty, the zero distortion coefficients are assumed.\n.   @param imagePoints Output array of image points, 2xN/Nx2 1-channel or 1xN/Nx1 2-channel, or\n.   vector\\<Point2f\\> .\n.   @param jacobian Optional output 2Nx(10+\\<numDistCoeffs\\>) jacobian matrix of derivatives of image\n.   points with respect to components of the rotation vector, translation vector, focal lengths,\n.   coordinates of the principal point and the distortion coefficients. In the old interface different\n.   components of the jacobian are returned via different output parameters.\n.   @param aspectRatio Optional "fixed aspect ratio" parameter. If the parameter is not 0, the\n.   function assumes that the aspect ratio (*fx/fy*) is fixed and correspondingly adjusts the jacobian\n.   matrix.\n.   \n.   The function computes projections of 3D points to the image plane given intrinsic and extrinsic\n.   camera parameters. Optionally, the function computes Jacobians - matrices of partial derivatives of\n.   image points coordinates (as functions of all the input parameters) with respect to the particular\n.   parameters, intrinsic and/or extrinsic. The Jacobians are used during the global optimization in\n.   calibrateCamera, solvePnP, and stereoCalibrate . The function itself can also be used to compute a\n.   re-projection error given the current intrinsic and extrinsic parameters.\n.   \n.   @note By setting rvec=tvec=(0,0,0) or by setting cameraMatrix to a 3x3 identity matrix, or by\n.   passing zero distortion coefficients, you can get various useful partial cases of the function. This\n.   means that you can compute the distorted coordinates for a sparse set of points or apply a\n.   perspective transformation (and also compute the derivatives) in the ideal zero-distortion setup.'
    pass

def putText(img, text, org, fontFace, fontScale, color, thickness=None, lineType=None, bottomLeftOrigin=None):
    'putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) -> img\n.   @brief Draws a text string.\n.   \n.   The function cv::putText renders the specified text string in the image. Symbols that cannot be rendered\n.   using the specified font are replaced by question marks. See #getTextSize for a text rendering code\n.   example.\n.   \n.   @param img Image.\n.   @param text Text string to be drawn.\n.   @param org Bottom-left corner of the text string in the image.\n.   @param fontFace Font type, see #HersheyFonts.\n.   @param fontScale Font scale factor that is multiplied by the font-specific base size.\n.   @param color Text color.\n.   @param thickness Thickness of the lines used to draw a text.\n.   @param lineType Line type. See #LineTypes\n.   @param bottomLeftOrigin When true, the image data origin is at the bottom-left corner. Otherwise,\n.   it is at the top-left corner.'
    pass

def pyrDown(src, dst=None, dstsize=None, borderType=None):
    "pyrDown(src[, dst[, dstsize[, borderType]]]) -> dst\n.   @brief Blurs an image and downsamples it.\n.   \n.   By default, size of the output image is computed as `Size((src.cols+1)/2, (src.rows+1)/2)`, but in\n.   any case, the following conditions should be satisfied:\n.   \n.   \\f[\\begin{array}{l} | \\texttt{dstsize.width} *2-src.cols| \\leq 2 \\\\ | \\texttt{dstsize.height} *2-src.rows| \\leq 2 \\end{array}\\f]\n.   \n.   The function performs the downsampling step of the Gaussian pyramid construction. First, it\n.   convolves the source image with the kernel:\n.   \n.   \\f[\\frac{1}{256} \\begin{bmatrix} 1 & 4 & 6 & 4 & 1  \\\\ 4 & 16 & 24 & 16 & 4  \\\\ 6 & 24 & 36 & 24 & 6  \\\\ 4 & 16 & 24 & 16 & 4  \\\\ 1 & 4 & 6 & 4 & 1 \\end{bmatrix}\\f]\n.   \n.   Then, it downsamples the image by rejecting even rows and columns.\n.   \n.   @param src input image.\n.   @param dst output image; it has the specified size and the same type as src.\n.   @param dstsize size of the output image.\n.   @param borderType Pixel extrapolation method, see #BorderTypes (#BORDER_CONSTANT isn't supported)"
    pass

def pyrMeanShiftFiltering(src, sp, sr, dst=None, maxLevel=None, termcrit=None):
    'pyrMeanShiftFiltering(src, sp, sr[, dst[, maxLevel[, termcrit]]]) -> dst\n.   @brief Performs initial step of meanshift segmentation of an image.\n.   \n.   The function implements the filtering stage of meanshift segmentation, that is, the output of the\n.   function is the filtered "posterized" image with color gradients and fine-grain texture flattened.\n.   At every pixel (X,Y) of the input image (or down-sized input image, see below) the function executes\n.   meanshift iterations, that is, the pixel (X,Y) neighborhood in the joint space-color hyperspace is\n.   considered:\n.   \n.   \\f[(x,y): X- \\texttt{sp} \\le x  \\le X+ \\texttt{sp} , Y- \\texttt{sp} \\le y  \\le Y+ \\texttt{sp} , ||(R,G,B)-(r,g,b)||   \\le \\texttt{sr}\\f]\n.   \n.   where (R,G,B) and (r,g,b) are the vectors of color components at (X,Y) and (x,y), respectively\n.   (though, the algorithm does not depend on the color space used, so any 3-component color space can\n.   be used instead). Over the neighborhood the average spatial value (X\',Y\') and average color vector\n.   (R\',G\',B\') are found and they act as the neighborhood center on the next iteration:\n.   \n.   \\f[(X,Y)~(X\',Y\'), (R,G,B)~(R\',G\',B\').\\f]\n.   \n.   After the iterations over, the color components of the initial pixel (that is, the pixel from where\n.   the iterations started) are set to the final value (average color at the last iteration):\n.   \n.   \\f[I(X,Y) <- (R*,G*,B*)\\f]\n.   \n.   When maxLevel \\> 0, the gaussian pyramid of maxLevel+1 levels is built, and the above procedure is\n.   run on the smallest layer first. After that, the results are propagated to the larger layer and the\n.   iterations are run again only on those pixels where the layer colors differ by more than sr from the\n.   lower-resolution layer of the pyramid. That makes boundaries of color regions sharper. Note that the\n.   results will be actually different from the ones obtained by running the meanshift procedure on the\n.   whole original image (i.e. when maxLevel==0).\n.   \n.   @param src The source 8-bit, 3-channel image.\n.   @param dst The destination image of the same format and the same size as the source.\n.   @param sp The spatial window radius.\n.   @param sr The color window radius.\n.   @param maxLevel Maximum level of the pyramid for the segmentation.\n.   @param termcrit Termination criteria: when to stop meanshift iterations.'
    pass

def pyrUp(src, dst=None, dstsize=None, borderType=None):
    'pyrUp(src[, dst[, dstsize[, borderType]]]) -> dst\n.   @brief Upsamples an image and then blurs it.\n.   \n.   By default, size of the output image is computed as `Size(src.cols\\*2, (src.rows\\*2)`, but in any\n.   case, the following conditions should be satisfied:\n.   \n.   \\f[\\begin{array}{l} | \\texttt{dstsize.width} -src.cols*2| \\leq  ( \\texttt{dstsize.width}   \\mod  2)  \\\\ | \\texttt{dstsize.height} -src.rows*2| \\leq  ( \\texttt{dstsize.height}   \\mod  2) \\end{array}\\f]\n.   \n.   The function performs the upsampling step of the Gaussian pyramid construction, though it can\n.   actually be used to construct the Laplacian pyramid. First, it upsamples the source image by\n.   injecting even zero rows and columns and then convolves the result with the same kernel as in\n.   pyrDown multiplied by 4.\n.   \n.   @param src input image.\n.   @param dst output image. It has the specified size and the same type as src .\n.   @param dstsize size of the output image.\n.   @param borderType Pixel extrapolation method, see #BorderTypes (only #BORDER_DEFAULT is supported)'
    pass

def randShuffle(dst, iterFactor=None):
    'randShuffle(dst[, iterFactor]) -> dst\n.   @brief Shuffles the array elements randomly.\n.   \n.   The function cv::randShuffle shuffles the specified 1D array by randomly choosing pairs of elements and\n.   swapping them. The number of such swap operations will be dst.rows\\*dst.cols\\*iterFactor .\n.   @param dst input/output numerical 1D array.\n.   @param iterFactor scale factor that determines the number of random swap operations (see the details\n.   below).\n.   @param rng optional random number generator used for shuffling; if it is zero, theRNG () is used\n.   instead.\n.   @sa RNG, sort'
    pass

def randn(dst, mean, stddev):
    'randn(dst, mean, stddev) -> dst\n.   @brief Fills the array with normally distributed random numbers.\n.   \n.   The function cv::randn fills the matrix dst with normally distributed random numbers with the specified\n.   mean vector and the standard deviation matrix. The generated random numbers are clipped to fit the\n.   value range of the output array data type.\n.   @param dst output array of random numbers; the array must be pre-allocated and have 1 to 4 channels.\n.   @param mean mean value (expectation) of the generated random numbers.\n.   @param stddev standard deviation of the generated random numbers; it can be either a vector (in\n.   which case a diagonal standard deviation matrix is assumed) or a square matrix.\n.   @sa RNG, randu'
    pass

def randu(dst, low, high):
    'randu(dst, low, high) -> dst\n.   @brief Generates a single uniformly-distributed random number or an array of random numbers.\n.   \n.   Non-template variant of the function fills the matrix dst with uniformly-distributed\n.   random numbers from the specified range:\n.   \\f[\\texttt{low} _c  \\leq \\texttt{dst} (I)_c <  \\texttt{high} _c\\f]\n.   @param dst output array of random numbers; the array must be pre-allocated.\n.   @param low inclusive lower boundary of the generated random numbers.\n.   @param high exclusive upper boundary of the generated random numbers.\n.   @sa RNG, randn, theRNG'
    pass

def recoverPose(E, points1, points2, cameraMatrix, R=None, t=None, mask=None):
    'recoverPose(E, points1, points2, cameraMatrix[, R[, t[, mask]]]) -> retval, R, t, mask\n.   @brief Recover relative camera rotation and translation from an estimated essential matrix and the\n.   corresponding points in two images, using cheirality check. Returns the number of inliers which pass\n.   the check.\n.   \n.   @param E The input essential matrix.\n.   @param points1 Array of N 2D points from the first image. The point coordinates should be\n.   floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1 .\n.   @param cameraMatrix Camera matrix \\f$K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   Note that this function assumes that points1 and points2 are feature points from cameras with the\n.   same camera matrix.\n.   @param R Recovered relative rotation.\n.   @param t Recovered relative translation.\n.   @param mask Input/output mask for inliers in points1 and points2.\n.   :   If it is not empty, then it marks inliers in points1 and points2 for then given essential\n.   matrix E. Only these inliers will be used to recover pose. In the output mask only inliers\n.   which pass the cheirality check.\n.   This function decomposes an essential matrix using decomposeEssentialMat and then verifies possible\n.   pose hypotheses by doing cheirality check. The cheirality check basically means that the\n.   triangulated 3D points should have positive depth. Some details can be found in @cite Nister03 .\n.   \n.   This function can be used to process output E and mask from findEssentialMat. In this scenario,\n.   points1 and points2 are the same input for findEssentialMat. :\n.   @code\n.   // Example. Estimation of fundamental matrix using the RANSAC algorithm\n.   int point_count = 100;\n.   vector<Point2f> points1(point_count);\n.   vector<Point2f> points2(point_count);\n.   \n.   // initialize the points here ...\n.   for( int i = 0; i < point_count; i++ )\n.   {\n.   points1[i] = ...;\n.   points2[i] = ...;\n.   }\n.   \n.   // cametra matrix with both focal lengths = 1, and principal point = (0, 0)\n.   Mat cameraMatrix = Mat::eye(3, 3, CV_64F);\n.   \n.   Mat E, R, t, mask;\n.   \n.   E = findEssentialMat(points1, points2, cameraMatrix, RANSAC, 0.999, 1.0, mask);\n.   recoverPose(E, points1, points2, cameraMatrix, R, t, mask);\n.   @endcode\n\n\n\nrecoverPose(E, points1, points2[, R[, t[, focal[, pp[, mask]]]]]) -> retval, R, t, mask\n.   @overload\n.   @param E The input essential matrix.\n.   @param points1 Array of N 2D points from the first image. The point coordinates should be\n.   floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1 .\n.   @param R Recovered relative rotation.\n.   @param t Recovered relative translation.\n.   @param focal Focal length of the camera. Note that this function assumes that points1 and points2\n.   are feature points from cameras with same focal length and principal point.\n.   @param pp principal point of the camera.\n.   @param mask Input/output mask for inliers in points1 and points2.\n.   :   If it is not empty, then it marks inliers in points1 and points2 for then given essential\n.   matrix E. Only these inliers will be used to recover pose. In the output mask only inliers\n.   which pass the cheirality check.\n.   \n.   This function differs from the one above that it computes camera matrix from focal length and\n.   principal point:\n.   \n.   \\f[K =\n.   \\begin{bmatrix}\n.   f & 0 & x_{pp}  \\\\\n.   0 & f & y_{pp}  \\\\\n.   0 & 0 & 1\n.   \\end{bmatrix}\\f]\n\n\n\nrecoverPose(E, points1, points2, cameraMatrix, distanceThresh[, R[, t[, mask[, triangulatedPoints]]]]) -> retval, R, t, mask, triangulatedPoints\n.   @overload\n.   @param E The input essential matrix.\n.   @param points1 Array of N 2D points from the first image. The point coordinates should be\n.   floating-point (single or double precision).\n.   @param points2 Array of the second image points of the same size and format as points1.\n.   @param cameraMatrix Camera matrix \\f$K = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   Note that this function assumes that points1 and points2 are feature points from cameras with the\n.   same camera matrix.\n.   @param R Recovered relative rotation.\n.   @param t Recovered relative translation.\n.   @param distanceThresh threshold distance which is used to filter out far away points (i.e. infinite points).\n.   @param mask Input/output mask for inliers in points1 and points2.\n.   :   If it is not empty, then it marks inliers in points1 and points2 for then given essential\n.   matrix E. Only these inliers will be used to recover pose. In the output mask only inliers\n.   which pass the cheirality check.\n.   @param triangulatedPoints 3d points which were reconstructed by triangulation.'
    pass

def rectangle(img, pt1, pt2, color, thickness=None, lineType=None, shift=None):
    'rectangle(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img\n.   @brief Draws a simple, thick, or filled up-right rectangle.\n.   \n.   The function cv::rectangle draws a rectangle outline or a filled rectangle whose two opposite corners\n.   are pt1 and pt2.\n.   \n.   @param img Image.\n.   @param pt1 Vertex of the rectangle.\n.   @param pt2 Vertex of the rectangle opposite to pt1 .\n.   @param color Rectangle color or brightness (grayscale image).\n.   @param thickness Thickness of lines that make up the rectangle. Negative values, like #FILLED,\n.   mean that the function has to draw a filled rectangle.\n.   @param lineType Type of the line. See #LineTypes\n.   @param shift Number of fractional bits in the point coordinates.'
    pass

def rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags, R1=None, R2=None, R3=None, P1=None, P2=None, P3=None, Q=None):
    'rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags[, R1[, R2[, R3[, P1[, P2[, P3[, Q]]]]]]]) -> retval, R1, R2, R3, P1, P2, P3, Q, roi1, roi2\n.'
    pass

def redirectError(onError):
    'redirectError(onError) -> None'
    pass

def reduce(src, dim, rtype, dst=None, dtype=None):
    'reduce(src, dim, rtype[, dst[, dtype]]) -> dst\n.   @brief Reduces a matrix to a vector.\n.   \n.   The function #reduce reduces the matrix to a vector by treating the matrix rows/columns as a set of\n.   1D vectors and performing the specified operation on the vectors until a single row/column is\n.   obtained. For example, the function can be used to compute horizontal and vertical projections of a\n.   raster image. In case of #REDUCE_MAX and #REDUCE_MIN , the output image should have the same type as the source one.\n.   In case of #REDUCE_SUM and #REDUCE_AVG , the output may have a larger element bit-depth to preserve accuracy.\n.   And multi-channel arrays are also supported in these two reduction modes.\n.   \n.   The following code demonstrates its usage for a single channel matrix.\n.   @snippet snippets/core_reduce.cpp example\n.   \n.   And the following code demonstrates its usage for a two-channel matrix.\n.   @snippet snippets/core_reduce.cpp example2\n.   \n.   @param src input 2D matrix.\n.   @param dst output vector. Its size and type is defined by dim and dtype parameters.\n.   @param dim dimension index along which the matrix is reduced. 0 means that the matrix is reduced to\n.   a single row. 1 means that the matrix is reduced to a single column.\n.   @param rtype reduction operation that could be one of #ReduceTypes\n.   @param dtype when negative, the output vector will have the same type as the input matrix,\n.   otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), src.channels()).\n.   @sa repeat'
    pass

class reg_Map(_mod_builtins.object):
    __class__ = reg_Map
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compose(self, map):
        'compose(map) -> None\n.'
        pass
    
    def inverseMap(self):
        'inverseMap() -> retval\n.'
        pass
    
    def inverseWarp(self, img1, img2=None):
        'inverseWarp(img1[, img2]) -> img2\n.'
        pass
    
    def scale(self, factor):
        'scale(factor) -> None\n.'
        pass
    
    def warp(self, img1, img2=None):
        'warp(img1[, img2]) -> img2\n.'
        pass
    

class reg_MapAffine(reg_Map):
    __class__ = reg_MapAffine
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compose(self, map):
        'compose(map) -> None\n.'
        pass
    
    def getLinTr(self, linTr=None):
        'getLinTr([, linTr]) -> linTr\n.'
        pass
    
    def getShift(self, shift=None):
        'getShift([, shift]) -> shift\n.'
        pass
    
    def inverseMap(self):
        'inverseMap() -> retval\n.'
        pass
    
    def inverseWarp(self, img1, img2=None):
        'inverseWarp(img1[, img2]) -> img2\n.'
        pass
    
    def scale(self, factor):
        'scale(factor) -> None\n.'
        pass
    

class reg_MapProjec(reg_Map):
    __class__ = reg_MapProjec
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compose(self, map):
        'compose(map) -> None\n.'
        pass
    
    def getProjTr(self, projTr=None):
        'getProjTr([, projTr]) -> projTr\n.'
        pass
    
    def inverseMap(self):
        'inverseMap() -> retval\n.'
        pass
    
    def inverseWarp(self, img1, img2=None):
        'inverseWarp(img1[, img2]) -> img2\n.'
        pass
    
    def normalize(self):
        'normalize() -> None\n.'
        pass
    
    def scale(self, factor):
        'scale(factor) -> None\n.'
        pass
    

class reg_MapShift(reg_Map):
    __class__ = reg_MapShift
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compose(self, map):
        'compose(map) -> None\n.'
        pass
    
    def getShift(self, shift=None):
        'getShift([, shift]) -> shift\n.'
        pass
    
    def inverseMap(self):
        'inverseMap() -> retval\n.'
        pass
    
    def inverseWarp(self, img1, img2=None):
        'inverseWarp(img1[, img2]) -> img2\n.'
        pass
    
    def scale(self, factor):
        'scale(factor) -> None\n.'
        pass
    

class reg_MapTypeCaster(_mod_builtins.object):
    __class__ = reg_MapTypeCaster
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def toAffine(cls, sourceMap):
        'toAffine(sourceMap) -> retval\n.'
        pass
    
    @classmethod
    def toProjec(cls, sourceMap):
        'toProjec(sourceMap) -> retval\n.'
        pass
    
    @classmethod
    def toShift(cls, sourceMap):
        'toShift(sourceMap) -> retval\n.'
        pass
    

class reg_Mapper(_mod_builtins.object):
    __class__ = reg_Mapper
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperGradAffine(reg_Mapper):
    __class__ = reg_MapperGradAffine
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperGradEuclid(reg_Mapper):
    __class__ = reg_MapperGradEuclid
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperGradProj(reg_Mapper):
    __class__ = reg_MapperGradProj
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperGradShift(reg_Mapper):
    __class__ = reg_MapperGradShift
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperGradSimilar(reg_Mapper):
    __class__ = reg_MapperGradSimilar
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    

class reg_MapperPyramid(reg_Mapper):
    __class__ = reg_MapperPyramid
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def calculate(self, img1, img2, init=None):
        'calculate(img1, img2[, init]) -> retval\n.'
        pass
    
    def getMap(self):
        'getMap() -> retval\n.'
        pass
    
    @property
    def numIterPerScale_(self):
        'numIterPerScale_'
        pass
    
    @property
    def numLev_(self):
        'numLev_'
        pass
    

def remap(src, map1, map2, interpolation, dst=None, borderMode=None, borderValue=None):
    'remap(src, map1, map2, interpolation[, dst[, borderMode[, borderValue]]]) -> dst\n.   @brief Applies a generic geometrical transformation to an image.\n.   \n.   The function remap transforms the source image using the specified map:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\texttt{src} (map_x(x,y),map_y(x,y))\\f]\n.   \n.   where values of pixels with non-integer coordinates are computed using one of available\n.   interpolation methods. \\f$map_x\\f$ and \\f$map_y\\f$ can be encoded as separate floating-point maps\n.   in \\f$map_1\\f$ and \\f$map_2\\f$ respectively, or interleaved floating-point maps of \\f$(x,y)\\f$ in\n.   \\f$map_1\\f$, or fixed-point maps created by using convertMaps. The reason you might want to\n.   convert from floating to fixed-point representations of a map is that they can yield much faster\n.   (\\~2x) remapping operations. In the converted case, \\f$map_1\\f$ contains pairs (cvFloor(x),\n.   cvFloor(y)) and \\f$map_2\\f$ contains indices in a table of interpolation coefficients.\n.   \n.   This function cannot operate in-place.\n.   \n.   @param src Source image.\n.   @param dst Destination image. It has the same size as map1 and the same type as src .\n.   @param map1 The first map of either (x,y) points or just x values having the type CV_16SC2 ,\n.   CV_32FC1, or CV_32FC2. See convertMaps for details on converting a floating point\n.   representation to fixed-point for speed.\n.   @param map2 The second map of y values having the type CV_16UC1, CV_32FC1, or none (empty map\n.   if map1 is (x,y) points), respectively.\n.   @param interpolation Interpolation method (see #InterpolationFlags). The method #INTER_AREA is\n.   not supported by this function.\n.   @param borderMode Pixel extrapolation method (see #BorderTypes). When\n.   borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image that\n.   corresponds to the "outliers" in the source image are not modified by the function.\n.   @param borderValue Value used in case of a constant border. By default, it is 0.\n.   @note\n.   Due to current implementation limitations the size of an input and output images should be less than 32767x32767.'
    pass

def repeat(src, ny, nx, dst=None):
    'repeat(src, ny, nx[, dst]) -> dst\n.   @brief Fills the output array with repeated copies of the input array.\n.   \n.   The function cv::repeat duplicates the input array one or more times along each of the two axes:\n.   \\f[\\texttt{dst} _{ij}= \\texttt{src} _{i\\mod src.rows, \\; j\\mod src.cols }\\f]\n.   The second variant of the function is more convenient to use with @ref MatrixExpressions.\n.   @param src input array to replicate.\n.   @param ny Flag to specify how many times the `src` is repeated along the\n.   vertical axis.\n.   @param nx Flag to specify how many times the `src` is repeated along the\n.   horizontal axis.\n.   @param dst output array of the same type as `src`.\n.   @sa cv::reduce'
    pass

def reprojectImageTo3D(disparity, Q, _3dImage=None, handleMissingValues=None, ddepth=None):
    'reprojectImageTo3D(disparity, Q[, _3dImage[, handleMissingValues[, ddepth]]]) -> _3dImage\n.   @brief Reprojects a disparity image to 3D space.\n.   \n.   @param disparity Input single-channel 8-bit unsigned, 16-bit signed, 32-bit signed or 32-bit\n.   floating-point disparity image. If 16-bit signed format is used, the values are assumed to have no\n.   fractional bits.\n.   @param _3dImage Output 3-channel floating-point image of the same size as disparity . Each\n.   element of _3dImage(x,y) contains 3D coordinates of the point (x,y) computed from the disparity\n.   map.\n.   @param Q \\f$4 \\times 4\\f$ perspective transformation matrix that can be obtained with stereoRectify.\n.   @param handleMissingValues Indicates, whether the function should handle missing values (i.e.\n.   points where the disparity was not computed). If handleMissingValues=true, then pixels with the\n.   minimal disparity that corresponds to the outliers (see StereoMatcher::compute ) are transformed\n.   to 3D points with a very large Z value (currently set to 10000).\n.   @param ddepth The optional output array depth. If it is -1, the output image will have CV_32F\n.   depth. ddepth can also be set to CV_16S, CV_32S or CV_32F.\n.   \n.   The function transforms a single-channel disparity map to a 3-channel image representing a 3D\n.   surface. That is, for each pixel (x,y) and the corresponding disparity d=disparity(x,y) , it\n.   computes:\n.   \n.   \\f[\\begin{array}{l} [X \\; Y \\; Z \\; W]^T =  \\texttt{Q} *[x \\; y \\; \\texttt{disparity} (x,y) \\; 1]^T  \\\\ \\texttt{\\_3dImage} (x,y) = (X/W, \\; Y/W, \\; Z/W) \\end{array}\\f]\n.   \n.   The matrix Q can be an arbitrary \\f$4 \\times 4\\f$ matrix (for example, the one computed by\n.   stereoRectify). To reproject a sparse set of points {(x,y,d),...} to 3D space, use\n.   perspectiveTransform .'
    pass

def resize(src, dsize, dst=None, fx=None, fy=None, interpolation=None):
    'resize(src, dsize[, dst[, fx[, fy[, interpolation]]]]) -> dst\n.   @brief Resizes an image.\n.   \n.   The function resize resizes the image src down to or up to the specified size. Note that the\n.   initial dst type or size are not taken into account. Instead, the size and type are derived from\n.   the `src`,`dsize`,`fx`, and `fy`. If you want to resize src so that it fits the pre-created dst,\n.   you may call the function as follows:\n.   @code\n.   // explicitly specify dsize=dst.size(); fx and fy will be computed from that.\n.   resize(src, dst, dst.size(), 0, 0, interpolation);\n.   @endcode\n.   If you want to decimate the image by factor of 2 in each direction, you can call the function this\n.   way:\n.   @code\n.   // specify fx and fy and let the function compute the destination image size.\n.   resize(src, dst, Size(), 0.5, 0.5, interpolation);\n.   @endcode\n.   To shrink an image, it will generally look best with #INTER_AREA interpolation, whereas to\n.   enlarge an image, it will generally look best with c#INTER_CUBIC (slow) or #INTER_LINEAR\n.   (faster but still looks OK).\n.   \n.   @param src input image.\n.   @param dst output image; it has the size dsize (when it is non-zero) or the size computed from\n.   src.size(), fx, and fy; the type of dst is the same as of src.\n.   @param dsize output image size; if it equals zero, it is computed as:\n.   \\f[\\texttt{dsize = Size(round(fx*src.cols), round(fy*src.rows))}\\f]\n.   Either dsize or both fx and fy must be non-zero.\n.   @param fx scale factor along the horizontal axis; when it equals 0, it is computed as\n.   \\f[\\texttt{(double)dsize.width/src.cols}\\f]\n.   @param fy scale factor along the vertical axis; when it equals 0, it is computed as\n.   \\f[\\texttt{(double)dsize.height/src.rows}\\f]\n.   @param interpolation interpolation method, see #InterpolationFlags\n.   \n.   @sa  warpAffine, warpPerspective, remap'
    pass

def resizeWindow(winname, width, height):
    'resizeWindow(winname, width, height) -> None\n.   @brief Resizes window to the specified size\n.   \n.   @note\n.   \n.   -   The specified window size is for the image area. Toolbars are not counted.\n.   -   Only windows created without cv::WINDOW_AUTOSIZE flag can be resized.\n.   \n.   @param winname Window name.\n.   @param width The new window width.\n.   @param height The new window height.\n\n\n\nresizeWindow(winname, size) -> None\n.   @overload\n.   @param winname Window name.\n.   @param size The new window size.'
    pass

class rgbd_DepthCleaner(Algorithm):
    __class__ = rgbd_DepthCleaner
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, depth, window_size=None, method=None):
        'create(depth[, window_size[, method]]) -> retval\n.   Constructor\n.   * @param depth the depth of the normals (only CV_32F or CV_64F)\n.   * @param window_size the window size to compute the normals: can only be 1,3,5 or 7\n.   * @param method one of the methods to use: RGBD_NORMALS_METHOD_SRI, RGBD_NORMALS_METHOD_FALS'
        pass
    
    def getDepth(self):
        'getDepth() -> retval\n.'
        pass
    
    def getMethod(self):
        'getMethod() -> retval\n.'
        pass
    
    def getWindowSize(self):
        'getWindowSize() -> retval\n.'
        pass
    
    def initialize(self):
        'initialize() -> None\n.   Initializes some data that is cached for later computation\n.   * If that function is not called, it will be called the first time normals are computed'
        pass
    
    def setDepth(self, val):
        'setDepth(val) -> None\n.'
        pass
    
    def setMethod(self, val):
        'setMethod(val) -> None\n.'
        pass
    
    def setWindowSize(self, val):
        'setWindowSize(val) -> None\n.'
        pass
    

class rgbd_ICPOdometry(rgbd_Odometry):
    __class__ = rgbd_ICPOdometry
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, cameraMatrix=None, minDepth=None, maxDepth=None, maxDepthDiff=None, maxPointsPart=None, iterCounts=None, transformType=None):
        'create([, cameraMatrix[, minDepth[, maxDepth[, maxDepthDiff[, maxPointsPart[, iterCounts[, transformType]]]]]]]) -> retval\n.   Constructor.\n.   * @param cameraMatrix Camera matrix\n.   * @param minDepth Pixels with depth less than minDepth will not be used\n.   * @param maxDepth Pixels with depth larger than maxDepth will not be used\n.   * @param maxDepthDiff Correspondences between pixels of two given frames will be filtered out\n.   *                     if their depth difference is larger than maxDepthDiff\n.   * @param maxPointsPart The method uses a random pixels subset of size frameWidth x frameHeight x pointsPart\n.   * @param iterCounts Count of iterations on each pyramid level.\n.   * @param transformType Class of trasformation'
        pass
    
    def getCameraMatrix(self):
        'getCameraMatrix() -> retval\n.'
        pass
    
    def getIterationCounts(self):
        'getIterationCounts() -> retval\n.'
        pass
    
    def getMaxDepth(self):
        'getMaxDepth() -> retval\n.'
        pass
    
    def getMaxDepthDiff(self):
        'getMaxDepthDiff() -> retval\n.'
        pass
    
    def getMaxPointsPart(self):
        'getMaxPointsPart() -> retval\n.'
        pass
    
    def getMaxRotation(self):
        'getMaxRotation() -> retval\n.'
        pass
    
    def getMaxTranslation(self):
        'getMaxTranslation() -> retval\n.'
        pass
    
    def getMinDepth(self):
        'getMinDepth() -> retval\n.'
        pass
    
    def getNormalsComputer(self):
        'getNormalsComputer() -> retval\n.'
        pass
    
    def getTransformType(self):
        'getTransformType() -> retval\n.'
        pass
    
    def prepareFrameCache(self, frame, cacheType):
        'prepareFrameCache(frame, cacheType) -> retval\n.'
        pass
    
    def setCameraMatrix(self, val):
        'setCameraMatrix(val) -> None\n.'
        pass
    
    def setIterationCounts(self, val):
        'setIterationCounts(val) -> None\n.'
        pass
    
    def setMaxDepth(self, val):
        'setMaxDepth(val) -> None\n.'
        pass
    
    def setMaxDepthDiff(self, val):
        'setMaxDepthDiff(val) -> None\n.'
        pass
    
    def setMaxPointsPart(self, val):
        'setMaxPointsPart(val) -> None\n.'
        pass
    
    def setMaxRotation(self, val):
        'setMaxRotation(val) -> None\n.'
        pass
    
    def setMaxTranslation(self, val):
        'setMaxTranslation(val) -> None\n.'
        pass
    
    def setMinDepth(self, val):
        'setMinDepth(val) -> None\n.'
        pass
    
    def setTransformType(self, val):
        'setTransformType(val) -> None\n.'
        pass
    

class rgbd_Odometry(Algorithm):
    def DEFAULT_MAX_DEPTH(self):
        'DEFAULT_MAX_DEPTH() -> retval\n.'
        pass
    
    def DEFAULT_MAX_DEPTH_DIFF(self):
        'DEFAULT_MAX_DEPTH_DIFF() -> retval\n.'
        pass
    
    def DEFAULT_MAX_POINTS_PART(self):
        'DEFAULT_MAX_POINTS_PART() -> retval\n.'
        pass
    
    def DEFAULT_MAX_ROTATION(self):
        'DEFAULT_MAX_ROTATION() -> retval\n.'
        pass
    
    def DEFAULT_MAX_TRANSLATION(self):
        'DEFAULT_MAX_TRANSLATION() -> retval\n.'
        pass
    
    def DEFAULT_MIN_DEPTH(self):
        'DEFAULT_MIN_DEPTH() -> retval\n.'
        pass
    
    __class__ = rgbd_Odometry
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def compute(self, srcImage, srcDepth, srcMask, dstImage, dstDepth, dstMask, Rt=None, initRt=None):
        "compute(srcImage, srcDepth, srcMask, dstImage, dstDepth, dstMask[, Rt[, initRt]]) -> retval, Rt\n.   Method to compute a transformation from the source frame to the destination one.\n.   * Some odometry algorithms do not used some data of frames (eg. ICP does not use images).\n.   * In such case corresponding arguments can be set as empty Mat.\n.   * The method returns true if all internal computions were possible (e.g. there were enough correspondences,\n.   * system of equations has a solution, etc) and resulting transformation satisfies some test if it's provided\n.   * by the Odometry inheritor implementation (e.g. thresholds for maximum translation and rotation).\n.   * @param srcImage Image data of the source frame (CV_8UC1)\n.   * @param srcDepth Depth data of the source frame (CV_32FC1, in meters)\n.   * @param srcMask Mask that sets which pixels have to be used from the source frame (CV_8UC1)\n.   * @param dstImage Image data of the destination frame (CV_8UC1)\n.   * @param dstDepth Depth data of the destination frame (CV_32FC1, in meters)\n.   * @param dstMask Mask that sets which pixels have to be used from the destination frame (CV_8UC1)\n.   * @param Rt Resulting transformation from the source frame to the destination one (rigid body motion):\n.   dst_p = Rt * src_p, where dst_p is a homogeneous point in the destination frame and src_p is\n.   homogeneous point in the source frame,\n.   Rt is 4x4 matrix of CV_64FC1 type.\n.   * @param initRt Initial transformation from the source frame to the destination one (optional)"
        pass
    
    def compute2(self, srcFrame, dstFrame, Rt=None, initRt=None):
        'compute2(srcFrame, dstFrame[, Rt[, initRt]]) -> retval, Rt\n.   One more method to compute a transformation from the source frame to the destination one.\n.   * It is designed to save on computing the frame data (image pyramids, normals, etc.).'
        pass
    
    @classmethod
    def create(cls, odometryType):
        'create(odometryType) -> retval\n.'
        pass
    
    def getCameraMatrix(self):
        'getCameraMatrix() -> retval\n.   @see setCameraMatrix'
        pass
    
    def getTransformType(self):
        'getTransformType() -> retval\n.   @see setTransformType'
        pass
    
    def prepareFrameCache(self, frame, cacheType):
        'prepareFrameCache(frame, cacheType) -> retval\n.   Prepare a cache for the frame. The function checks the precomputed/passed data (throws the error if this data\n.   * does not satisfy) and computes all remaining cache data needed for the frame. Returned size is a resolution\n.   * of the prepared frame.\n.   * @param frame The odometry which will process the frame.\n.   * @param cacheType The cache type: CACHE_SRC, CACHE_DST or CACHE_ALL.'
        pass
    
    def setCameraMatrix(self, val):
        'setCameraMatrix(val) -> None\n.   @copybrief getCameraMatrix @see getCameraMatrix'
        pass
    
    def setTransformType(self, val):
        'setTransformType(val) -> None\n.   @copybrief getTransformType @see getTransformType'
        pass
    

class rgbd_OdometryFrame(rgbd_RgbdFrame):
    __class__ = rgbd_OdometryFrame
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, image=None, depth=None, mask=None, normals=None, ID=None):
        'create([, image[, depth[, mask[, normals[, ID]]]]]) -> retval\n.'
        pass
    
    @property
    def pyramidCloud(self):
        'pyramidCloud'
        pass
    
    @property
    def pyramidDepth(self):
        'pyramidDepth'
        pass
    
    @property
    def pyramidImage(self):
        'pyramidImage'
        pass
    
    @property
    def pyramidMask(self):
        'pyramidMask'
        pass
    
    @property
    def pyramidNormals(self):
        'pyramidNormals'
        pass
    
    @property
    def pyramidNormalsMask(self):
        'pyramidNormalsMask'
        pass
    
    @property
    def pyramidTexturedMask(self):
        'pyramidTexturedMask'
        pass
    
    @property
    def pyramid_dI_dx(self):
        'pyramid_dI_dx'
        pass
    
    @property
    def pyramid_dI_dy(self):
        'pyramid_dI_dy'
        pass
    
    def release(self):
        'release() -> None\n.'
        pass
    
    def releasePyramids(self):
        'releasePyramids() -> None\n.'
        pass
    

class rgbd_RgbdFrame(_mod_builtins.object):
    @property
    def ID(self):
        'ID'
        pass
    
    __class__ = rgbd_RgbdFrame
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, image=None, depth=None, mask=None, normals=None, ID=None):
        'create([, image[, depth[, mask[, normals[, ID]]]]]) -> retval\n.'
        pass
    
    @property
    def depth(self):
        'depth'
        pass
    
    @property
    def image(self):
        'image'
        pass
    
    @property
    def mask(self):
        'mask'
        pass
    
    @property
    def normals(self):
        'normals'
        pass
    
    def release(self):
        'release() -> None\n.'
        pass
    

class rgbd_RgbdICPOdometry(rgbd_Odometry):
    __class__ = rgbd_RgbdICPOdometry
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, cameraMatrix=None, minDepth=None, maxDepth=None, maxDepthDiff=None, maxPointsPart=None, iterCounts=None, minGradientMagnitudes=None, transformType=None):
        'create([, cameraMatrix[, minDepth[, maxDepth[, maxDepthDiff[, maxPointsPart[, iterCounts[, minGradientMagnitudes[, transformType]]]]]]]]) -> retval\n.   Constructor.\n.   * @param cameraMatrix Camera matrix\n.   * @param minDepth Pixels with depth less than minDepth will not be used\n.   * @param maxDepth Pixels with depth larger than maxDepth will not be used\n.   * @param maxDepthDiff Correspondences between pixels of two given frames will be filtered out\n.   *                     if their depth difference is larger than maxDepthDiff\n.   * @param maxPointsPart The method uses a random pixels subset of size frameWidth x frameHeight x pointsPart\n.   * @param iterCounts Count of iterations on each pyramid level.\n.   * @param minGradientMagnitudes For each pyramid level the pixels will be filtered out\n.   *                              if they have gradient magnitude less than minGradientMagnitudes[level].\n.   * @param transformType Class of trasformation'
        pass
    
    def getCameraMatrix(self):
        'getCameraMatrix() -> retval\n.'
        pass
    
    def getIterationCounts(self):
        'getIterationCounts() -> retval\n.'
        pass
    
    def getMaxDepth(self):
        'getMaxDepth() -> retval\n.'
        pass
    
    def getMaxDepthDiff(self):
        'getMaxDepthDiff() -> retval\n.'
        pass
    
    def getMaxPointsPart(self):
        'getMaxPointsPart() -> retval\n.'
        pass
    
    def getMaxRotation(self):
        'getMaxRotation() -> retval\n.'
        pass
    
    def getMaxTranslation(self):
        'getMaxTranslation() -> retval\n.'
        pass
    
    def getMinDepth(self):
        'getMinDepth() -> retval\n.'
        pass
    
    def getMinGradientMagnitudes(self):
        'getMinGradientMagnitudes() -> retval\n.'
        pass
    
    def getNormalsComputer(self):
        'getNormalsComputer() -> retval\n.'
        pass
    
    def getTransformType(self):
        'getTransformType() -> retval\n.'
        pass
    
    def prepareFrameCache(self, frame, cacheType):
        'prepareFrameCache(frame, cacheType) -> retval\n.'
        pass
    
    def setCameraMatrix(self, val):
        'setCameraMatrix(val) -> None\n.'
        pass
    
    def setIterationCounts(self, val):
        'setIterationCounts(val) -> None\n.'
        pass
    
    def setMaxDepth(self, val):
        'setMaxDepth(val) -> None\n.'
        pass
    
    def setMaxDepthDiff(self, val):
        'setMaxDepthDiff(val) -> None\n.'
        pass
    
    def setMaxPointsPart(self, val):
        'setMaxPointsPart(val) -> None\n.'
        pass
    
    def setMaxRotation(self, val):
        'setMaxRotation(val) -> None\n.'
        pass
    
    def setMaxTranslation(self, val):
        'setMaxTranslation(val) -> None\n.'
        pass
    
    def setMinDepth(self, val):
        'setMinDepth(val) -> None\n.'
        pass
    
    def setMinGradientMagnitudes(self, val):
        'setMinGradientMagnitudes(val) -> None\n.'
        pass
    
    def setTransformType(self, val):
        'setTransformType(val) -> None\n.'
        pass
    

class rgbd_RgbdNormals(Algorithm):
    __class__ = rgbd_RgbdNormals
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, rows, cols, depth, K, window_size=None, method=None):
        'create(rows, cols, depth, K[, window_size[, method]]) -> retval\n.   Constructor\n.   * @param rows the number of rows of the depth image normals will be computed on\n.   * @param cols the number of cols of the depth image normals will be computed on\n.   * @param depth the depth of the normals (only CV_32F or CV_64F)\n.   * @param K the calibration matrix to use\n.   * @param window_size the window size to compute the normals: can only be 1,3,5 or 7\n.   * @param method one of the methods to use: RGBD_NORMALS_METHOD_SRI, RGBD_NORMALS_METHOD_FALS'
        pass
    
    def getCols(self):
        'getCols() -> retval\n.'
        pass
    
    def getDepth(self):
        'getDepth() -> retval\n.'
        pass
    
    def getK(self):
        'getK() -> retval\n.'
        pass
    
    def getMethod(self):
        'getMethod() -> retval\n.'
        pass
    
    def getRows(self):
        'getRows() -> retval\n.'
        pass
    
    def getWindowSize(self):
        'getWindowSize() -> retval\n.'
        pass
    
    def initialize(self):
        'initialize() -> None\n.   Initializes some data that is cached for later computation\n.   * If that function is not called, it will be called the first time normals are computed'
        pass
    
    def setCols(self, val):
        'setCols(val) -> None\n.'
        pass
    
    def setDepth(self, val):
        'setDepth(val) -> None\n.'
        pass
    
    def setK(self, val):
        'setK(val) -> None\n.'
        pass
    
    def setMethod(self, val):
        'setMethod(val) -> None\n.'
        pass
    
    def setRows(self, val):
        'setRows(val) -> None\n.'
        pass
    
    def setWindowSize(self, val):
        'setWindowSize(val) -> None\n.'
        pass
    

class rgbd_RgbdOdometry(rgbd_Odometry):
    __class__ = rgbd_RgbdOdometry
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, cameraMatrix=None, minDepth=None, maxDepth=None, maxDepthDiff=None, iterCounts=None, minGradientMagnitudes=None, maxPointsPart=None, transformType=None):
        'create([, cameraMatrix[, minDepth[, maxDepth[, maxDepthDiff[, iterCounts[, minGradientMagnitudes[, maxPointsPart[, transformType]]]]]]]]) -> retval\n.   Constructor.\n.   * @param cameraMatrix Camera matrix\n.   * @param minDepth Pixels with depth less than minDepth will not be used (in meters)\n.   * @param maxDepth Pixels with depth larger than maxDepth will not be used (in meters)\n.   * @param maxDepthDiff Correspondences between pixels of two given frames will be filtered out\n.   *                     if their depth difference is larger than maxDepthDiff (in meters)\n.   * @param iterCounts Count of iterations on each pyramid level.\n.   * @param minGradientMagnitudes For each pyramid level the pixels will be filtered out\n.   *                              if they have gradient magnitude less than minGradientMagnitudes[level].\n.   * @param maxPointsPart The method uses a random pixels subset of size frameWidth x frameHeight x pointsPart\n.   * @param transformType Class of transformation'
        pass
    
    def getCameraMatrix(self):
        'getCameraMatrix() -> retval\n.'
        pass
    
    def getIterationCounts(self):
        'getIterationCounts() -> retval\n.'
        pass
    
    def getMaxDepth(self):
        'getMaxDepth() -> retval\n.'
        pass
    
    def getMaxDepthDiff(self):
        'getMaxDepthDiff() -> retval\n.'
        pass
    
    def getMaxPointsPart(self):
        'getMaxPointsPart() -> retval\n.'
        pass
    
    def getMaxRotation(self):
        'getMaxRotation() -> retval\n.'
        pass
    
    def getMaxTranslation(self):
        'getMaxTranslation() -> retval\n.'
        pass
    
    def getMinDepth(self):
        'getMinDepth() -> retval\n.'
        pass
    
    def getMinGradientMagnitudes(self):
        'getMinGradientMagnitudes() -> retval\n.'
        pass
    
    def getTransformType(self):
        'getTransformType() -> retval\n.'
        pass
    
    def prepareFrameCache(self, frame, cacheType):
        'prepareFrameCache(frame, cacheType) -> retval\n.'
        pass
    
    def setCameraMatrix(self, val):
        'setCameraMatrix(val) -> None\n.'
        pass
    
    def setIterationCounts(self, val):
        'setIterationCounts(val) -> None\n.'
        pass
    
    def setMaxDepth(self, val):
        'setMaxDepth(val) -> None\n.'
        pass
    
    def setMaxDepthDiff(self, val):
        'setMaxDepthDiff(val) -> None\n.'
        pass
    
    def setMaxPointsPart(self, val):
        'setMaxPointsPart(val) -> None\n.'
        pass
    
    def setMaxRotation(self, val):
        'setMaxRotation(val) -> None\n.'
        pass
    
    def setMaxTranslation(self, val):
        'setMaxTranslation(val) -> None\n.'
        pass
    
    def setMinDepth(self, val):
        'setMinDepth(val) -> None\n.'
        pass
    
    def setMinGradientMagnitudes(self, val):
        'setMinGradientMagnitudes(val) -> None\n.'
        pass
    
    def setTransformType(self, val):
        'setTransformType(val) -> None\n.'
        pass
    

class rgbd_RgbdPlane(Algorithm):
    __class__ = rgbd_RgbdPlane
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getBlockSize(self):
        'getBlockSize() -> retval\n.   Find The planes in a depth image but without doing a normal check, which is faster but less accurate\n.   * @param points3d the 3d points organized like the depth image: rows x cols with 3 channels\n.   * @param mask An image where each pixel is labeled with the plane it belongs to\n.   *        and 255 if it does not belong to any plane\n.   * @param plane_coefficients the coefficients of the corresponding planes (a,b,c,d) such that ax+by+cz+d=0'
        pass
    
    def getMethod(self):
        'getMethod() -> retval\n.'
        pass
    
    def getMinSize(self):
        'getMinSize() -> retval\n.'
        pass
    
    def getSensorErrorA(self):
        'getSensorErrorA() -> retval\n.'
        pass
    
    def getSensorErrorB(self):
        'getSensorErrorB() -> retval\n.'
        pass
    
    def getSensorErrorC(self):
        'getSensorErrorC() -> retval\n.'
        pass
    
    def getThreshold(self):
        'getThreshold() -> retval\n.'
        pass
    
    def setBlockSize(self, val):
        'setBlockSize(val) -> None\n.'
        pass
    
    def setMethod(self, val):
        'setMethod(val) -> None\n.'
        pass
    
    def setMinSize(self, val):
        'setMinSize(val) -> None\n.'
        pass
    
    def setSensorErrorA(self, val):
        'setSensorErrorA(val) -> None\n.'
        pass
    
    def setSensorErrorB(self, val):
        'setSensorErrorB(val) -> None\n.'
        pass
    
    def setSensorErrorC(self, val):
        'setSensorErrorC(val) -> None\n.'
        pass
    
    def setThreshold(self, val):
        'setThreshold(val) -> None\n.'
        pass
    

def rotate(src, rotateCode, dst=None):
    'rotate(src, rotateCode[, dst]) -> dst\n.   @brief Rotates a 2D array in multiples of 90 degrees.\n.   The function cv::rotate rotates the array in one of three different ways:\n.   *   Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE).\n.   *   Rotate by 180 degrees clockwise (rotateCode = ROTATE_180).\n.   *   Rotate by 270 degrees clockwise (rotateCode = ROTATE_90_COUNTERCLOCKWISE).\n.   @param src input array.\n.   @param dst output array of the same type as src.  The size is the same with ROTATE_180,\n.   and the rows and cols are switched for ROTATE_90_CLOCKWISE and ROTATE_90_COUNTERCLOCKWISE.\n.   @param rotateCode an enum to specify how to rotate the array; see the enum #RotateFlags\n.   @sa transpose , repeat , completeSymm, flip, RotateFlags'
    pass

def rotatedRectangleIntersection(rect1, rect2, intersectingRegion=None):
    'rotatedRectangleIntersection(rect1, rect2[, intersectingRegion]) -> retval, intersectingRegion\n.   @brief Finds out if there is any intersection between two rotated rectangles.\n.   \n.   If there is then the vertices of the intersecting region are returned as well.\n.   \n.   Below are some examples of intersection configurations. The hatched pattern indicates the\n.   intersecting region and the red vertices are returned by the function.\n.   \n.   ![intersection examples](pics/intersection.png)\n.   \n.   @param rect1 First rectangle\n.   @param rect2 Second rectangle\n.   @param intersectingRegion The output array of the vertices of the intersecting region. It returns\n.   at most 8 vertices. Stored as std::vector\\<cv::Point2f\\> or cv::Mat as Mx1 of type CV_32FC2.\n.   @returns One of #RectanglesIntersectTypes'
    pass

class saliency_MotionSaliency(saliency_Saliency):
    __class__ = saliency_MotionSaliency
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class saliency_MotionSaliencyBinWangApr2014(saliency_MotionSaliency):
    __class__ = saliency_MotionSaliencyBinWangApr2014
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSaliency(self, image, saliencyMap=None):
        'computeSaliency(image[, saliencyMap]) -> retval, saliencyMap\n.'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    
    def getImageHeight(self):
        'getImageHeight() -> retval\n.'
        pass
    
    def getImageWidth(self):
        'getImageWidth() -> retval\n.'
        pass
    
    def init(self):
        'init() -> retval\n.   @brief This function allows the correct initialization of all data structures that will be used by the\n.   algorithm.'
        pass
    
    def setImageHeight(self, val):
        'setImageHeight(val) -> None\n.'
        pass
    
    def setImageWidth(self, val):
        'setImageWidth(val) -> None\n.'
        pass
    
    def setImagesize(self):
        'setImagesize(W, H) -> None\n.   @brief This is a utility function that allows to set the correct size (taken from the input image) in the\n.   corresponding variables that will be used to size the data structures of the algorithm.\n.   @param W width of input image\n.   @param H height of input image'
        pass
    

class saliency_Objectness(saliency_Saliency):
    __class__ = saliency_Objectness
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class saliency_ObjectnessBING(saliency_Objectness):
    __class__ = saliency_ObjectnessBING
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSaliency(self, image, saliencyMap=None):
        'computeSaliency(image[, saliencyMap]) -> retval, saliencyMap\n.'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    
    def getBase(self):
        'getBase() -> retval\n.'
        pass
    
    def getNSS(self):
        'getNSS() -> retval\n.'
        pass
    
    def getW(self):
        'getW() -> retval\n.'
        pass
    
    def getobjectnessValues(self):
        "getobjectnessValues() -> retval\n.   @brief Return the list of the rectangles' objectness value,\n.   \n.   in the same order as the *vector\\<Vec4i\\> objectnessBoundingBox* returned by the algorithm (in\n.   computeSaliencyImpl function). The bigger value these scores are, it is more likely to be an\n.   object window."
        pass
    
    def read(self):
        'read() -> None\n.'
        pass
    
    def setBBResDir(self, resultsDir):
        "setBBResDir(resultsDir) -> None\n.   @brief This is a utility function that allows to set an arbitrary path in which the algorithm will save the\n.   optional results\n.   \n.   (ie writing on file the total number and the list of rectangles returned by objectess, one for\n.   each row).\n.   @param resultsDir results' folder path"
        pass
    
    def setBase(self, val):
        'setBase(val) -> None\n.'
        pass
    
    def setNSS(self, val):
        'setNSS(val) -> None\n.'
        pass
    
    def setTrainingPath(self, trainingPath):
        'setTrainingPath(trainingPath) -> None\n.   @brief This is a utility function that allows to set the correct path from which the algorithm will load\n.   the trained model.\n.   @param trainingPath trained model path'
        pass
    
    def setW(self, val):
        'setW(val) -> None\n.'
        pass
    
    def write(self):
        'write() -> None\n.'
        pass
    

class saliency_Saliency(Algorithm):
    __class__ = saliency_Saliency
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSaliency(self, image, saliencyMap=None):
        'computeSaliency(image[, saliencyMap]) -> retval, saliencyMap\n.   * \\brief Compute the saliency\n.   * \\param image        The image.\n.   * \\param saliencyMap      The computed saliency map.\n.   * \\return true if the saliency map is computed, false otherwise'
        pass
    

class saliency_StaticSaliency(saliency_Saliency):
    __class__ = saliency_StaticSaliency
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeBinaryMap(self, _saliencyMap, _binaryMap=None):
        "computeBinaryMap(_saliencyMap[, _binaryMap]) -> retval, _binaryMap\n.   @brief This function perform a binary map of given saliency map. This is obtained in this\n.   way:\n.   \n.   In a first step, to improve the definition of interest areas and facilitate identification of\n.   targets, a segmentation by clustering is performed, using *K-means algorithm*. Then, to gain a\n.   binary representation of clustered saliency map, since values of the map can vary according to\n.   the characteristics of frame under analysis, it is not convenient to use a fixed threshold. So,\n.   *Otsu's algorithm* is used, which assumes that the image to be thresholded contains two classes\n.   of pixels or bi-modal histograms (e.g. foreground and back-ground pixels); later on, the\n.   algorithm calculates the optimal threshold separating those two classes, so that their\n.   intra-class variance is minimal.\n.   \n.   @param _saliencyMap the saliency map obtained through one of the specialized algorithms\n.   @param _binaryMap the binary map"
        pass
    

class saliency_StaticSaliencyFineGrained(saliency_StaticSaliency):
    __class__ = saliency_StaticSaliencyFineGrained
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSaliency(self, image, saliencyMap=None):
        'computeSaliency(image[, saliencyMap]) -> retval, saliencyMap\n.'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    

class saliency_StaticSaliencySpectralResidual(saliency_StaticSaliency):
    __class__ = saliency_StaticSaliencySpectralResidual
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSaliency(self, image, saliencyMap=None):
        'computeSaliency(image[, saliencyMap]) -> retval, saliencyMap\n.'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    
    def getImageHeight(self):
        'getImageHeight() -> retval\n.'
        pass
    
    def getImageWidth(self):
        'getImageWidth() -> retval\n.'
        pass
    
    def read(self, fn):
        'read(fn) -> None\n.'
        pass
    
    def setImageHeight(self, val):
        'setImageHeight(val) -> None\n.'
        pass
    
    def setImageWidth(self, val):
        'setImageWidth(val) -> None\n.'
        pass
    

def sampsonDistance(pt1, pt2, F):
    'sampsonDistance(pt1, pt2, F) -> retval\n.   @brief Calculates the Sampson Distance between two points.\n.   \n.   The function cv::sampsonDistance calculates and returns the first order approximation of the geometric error as:\n.   \\f[\n.   sd( \\texttt{pt1} , \\texttt{pt2} )=\n.   \\frac{(\\texttt{pt2}^t \\cdot \\texttt{F} \\cdot \\texttt{pt1})^2}\n.   {((\\texttt{F} \\cdot \\texttt{pt1})(0))^2 +\n.   ((\\texttt{F} \\cdot \\texttt{pt1})(1))^2 +\n.   ((\\texttt{F}^t \\cdot \\texttt{pt2})(0))^2 +\n.   ((\\texttt{F}^t \\cdot \\texttt{pt2})(1))^2}\n.   \\f]\n.   The fundamental matrix may be calculated using the cv::findFundamentalMat function. See @cite HartleyZ00 11.4.3 for details.\n.   @param pt1 first homogeneous 2d point\n.   @param pt2 second homogeneous 2d point\n.   @param F fundamental matrix\n.   @return The computed Sampson distance.'
    pass

def scaleAdd(src1, alpha, src2, dst=None):
    'scaleAdd(src1, alpha, src2[, dst]) -> dst\n.   @brief Calculates the sum of a scaled array and another array.\n.   \n.   The function scaleAdd is one of the classical primitive linear algebra operations, known as DAXPY\n.   or SAXPY in [BLAS](http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms). It calculates\n.   the sum of a scaled array and another array:\n.   \\f[\\texttt{dst} (I)= \\texttt{scale} \\cdot \\texttt{src1} (I) +  \\texttt{src2} (I)\\f]\n.   The function can also be emulated with a matrix expression, for example:\n.   @code{.cpp}\n.   Mat A(3, 3, CV_64F);\n.   ...\n.   A.row(0) = A.row(1)*2 + A.row(2);\n.   @endcode\n.   @param src1 first input array.\n.   @param alpha scale factor for the first array.\n.   @param src2 second input array of the same size and type as src1.\n.   @param dst output array of the same size and type as src1.\n.   @sa add, addWeighted, subtract, Mat::dot, Mat::convertTo'
    pass

def seamlessClone(src, dst, mask, p, flags, blend=None):
    'seamlessClone(src, dst, mask, p, flags[, blend]) -> blend\n.   @brief Image editing tasks concern either global changes (color/intensity corrections, filters,\n.   deformations) or local changes concerned to a selection. Here we are interested in achieving local\n.   changes, ones that are restricted to a region manually selected (ROI), in a seamless and effortless\n.   manner. The extent of the changes ranges from slight distortions to complete replacement by novel\n.   content @cite PM03 .\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst Input 8-bit 3-channel image.\n.   @param mask Input 8-bit 1 or 3-channel image.\n.   @param p Point in dst image where object is placed.\n.   @param blend Output image with the same size and type as dst.\n.   @param flags Cloning method that could be one of the following:\n.   -   **NORMAL_CLONE** The power of the method is fully expressed when inserting objects with\n.   complex outlines into a new background\n.   -   **MIXED_CLONE** The classic method, color-based selection and alpha masking might be time\n.   consuming and often leaves an undesirable halo. Seamless cloning, even averaged with the\n.   original image, is not effective. Mixed seamless cloning based on a loose selection proves\n.   effective.\n.   -   **MONOCHROME_TRANSFER** Monochrome transfer allows the user to easily replace certain features of\n.   one object by alternative features.'
    pass

def selectROI(windowName, img, showCrosshair=None, fromCenter=None):
    "selectROI(windowName, img[, showCrosshair[, fromCenter]]) -> retval\n.   @brief Selects ROI on the given image.\n.   Function creates a window and allows user to select a ROI using mouse.\n.   Controls: use `space` or `enter` to finish selection, use key `c` to cancel selection (function will return the zero cv::Rect).\n.   \n.   @param windowName name of the window where selection process will be shown.\n.   @param img image to select a ROI.\n.   @param showCrosshair if true crosshair of selection rectangle will be shown.\n.   @param fromCenter if true center of selection will match initial mouse position. In opposite case a corner of\n.   selection rectangle will correspont to the initial mouse position.\n.   @return selected ROI or empty rect if selection canceled.\n.   \n.   @note The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...).\n.   After finish of work an empty callback will be set for the used window.\n\n\n\nselectROI(img[, showCrosshair[, fromCenter]]) -> retval\n.   @overload"
    pass

def selectROIs(windowName, img, showCrosshair=None, fromCenter=None):
    "selectROIs(windowName, img[, showCrosshair[, fromCenter]]) -> boundingBoxes\n.   @brief Selects ROIs on the given image.\n.   Function creates a window and allows user to select a ROIs using mouse.\n.   Controls: use `space` or `enter` to finish current selection and start a new one,\n.   use `esc` to terminate multiple ROI selection process.\n.   \n.   @param windowName name of the window where selection process will be shown.\n.   @param img image to select a ROI.\n.   @param boundingBoxes selected ROIs.\n.   @param showCrosshair if true crosshair of selection rectangle will be shown.\n.   @param fromCenter if true center of selection will match initial mouse position. In opposite case a corner of\n.   selection rectangle will correspont to the initial mouse position.\n.   \n.   @note The function sets it's own mouse callback for specified window using cv::setMouseCallback(windowName, ...).\n.   After finish of work an empty callback will be set for the used window."
    pass

def sepFilter2D(src, ddepth, kernelX, kernelY, dst=None, anchor=None, delta=None, borderType=None):
    'sepFilter2D(src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]]) -> dst\n.   @brief Applies a separable linear filter to an image.\n.   \n.   The function applies a separable linear filter to the image. That is, first, every row of src is\n.   filtered with the 1D kernel kernelX. Then, every column of the result is filtered with the 1D\n.   kernel kernelY. The final result shifted by delta is stored in dst .\n.   \n.   @param src Source image.\n.   @param dst Destination image of the same size and the same number of channels as src .\n.   @param ddepth Destination image depth, see @ref filter_depths "combinations"\n.   @param kernelX Coefficients for filtering each row.\n.   @param kernelY Coefficients for filtering each column.\n.   @param anchor Anchor position within the kernel. The default value \\f$(-1,-1)\\f$ means that the anchor\n.   is at the kernel center.\n.   @param delta Value added to the filtered results before storing them.\n.   @param borderType Pixel extrapolation method, see #BorderTypes\n.   @sa  filter2D, Sobel, GaussianBlur, boxFilter, blur'
    pass

def setIdentity(mtx, s=None):
    'setIdentity(mtx[, s]) -> mtx\n.   @brief Initializes a scaled identity matrix.\n.   \n.   The function cv::setIdentity initializes a scaled identity matrix:\n.   \\f[\\texttt{mtx} (i,j)= \\fork{\\texttt{value}}{ if \\(i=j\\)}{0}{otherwise}\\f]\n.   \n.   The function can also be emulated using the matrix initializers and the\n.   matrix expressions:\n.   @code\n.   Mat A = Mat::eye(4, 3, CV_32F)*5;\n.   // A will be set to [[5, 0, 0], [0, 5, 0], [0, 0, 5], [0, 0, 0]]\n.   @endcode\n.   @param mtx matrix to initialize (not necessarily square).\n.   @param s value to assign to diagonal elements.\n.   @sa Mat::zeros, Mat::ones, Mat::setTo, Mat::operator='
    pass

def setMouseCallback(windowName, onMouse, param=None):
    'setMouseCallback(windowName, onMouse [, param]) -> None'
    pass

def setNumThreads(nthreads):
    "setNumThreads(nthreads) -> None\n.   @brief OpenCV will try to set the number of threads for the next parallel region.\n.   \n.   If threads == 0, OpenCV will disable threading optimizations and run all it's functions\n.   sequentially. Passing threads \\< 0 will reset threads number to system default. This function must\n.   be called outside of parallel region.\n.   \n.   OpenCV will try to run its functions with specified threads number, but some behaviour differs from\n.   framework:\n.   -   `TBB` - User-defined parallel constructions will run with the same threads number, if\n.   another is not specified. If later on user creates his own scheduler, OpenCV will use it.\n.   -   `OpenMP` - No special defined behaviour.\n.   -   `Concurrency` - If threads == 1, OpenCV will disable threading optimizations and run its\n.   functions sequentially.\n.   -   `GCD` - Supports only values \\<= 0.\n.   -   `C=` - No special defined behaviour.\n.   @param nthreads Number of threads used by OpenCV.\n.   @sa getNumThreads, getThreadNum"
    pass

def setRNGSeed(seed):
    'setRNGSeed(seed) -> None\n.   @brief Sets state of default random number generator.\n.   \n.   The function cv::setRNGSeed sets state of default random number generator to custom value.\n.   @param seed new state for default random number generator\n.   @sa RNG, randu, randn'
    pass

def setTrackbarMax(trackbarname, winname, maxval):
    'setTrackbarMax(trackbarname, winname, maxval) -> None\n.   @brief Sets the trackbar maximum position.\n.   \n.   The function sets the maximum position of the specified trackbar in the specified window.\n.   \n.   @note\n.   \n.   [__Qt Backend Only__] winname can be empty (or NULL) if the trackbar is attached to the control\n.   panel.\n.   \n.   @param trackbarname Name of the trackbar.\n.   @param winname Name of the window that is the parent of trackbar.\n.   @param maxval New maximum position.'
    pass

def setTrackbarMin(trackbarname, winname, minval):
    'setTrackbarMin(trackbarname, winname, minval) -> None\n.   @brief Sets the trackbar minimum position.\n.   \n.   The function sets the minimum position of the specified trackbar in the specified window.\n.   \n.   @note\n.   \n.   [__Qt Backend Only__] winname can be empty (or NULL) if the trackbar is attached to the control\n.   panel.\n.   \n.   @param trackbarname Name of the trackbar.\n.   @param winname Name of the window that is the parent of trackbar.\n.   @param minval New minimum position.'
    pass

def setTrackbarPos(trackbarname, winname, pos):
    'setTrackbarPos(trackbarname, winname, pos) -> None\n.   @brief Sets the trackbar position.\n.   \n.   The function sets the position of the specified trackbar in the specified window.\n.   \n.   @note\n.   \n.   [__Qt Backend Only__] winname can be empty (or NULL) if the trackbar is attached to the control\n.   panel.\n.   \n.   @param trackbarname Name of the trackbar.\n.   @param winname Name of the window that is the parent of trackbar.\n.   @param pos New position.'
    pass

def setUseOpenVX(flag):
    'setUseOpenVX(flag) -> None\n.'
    pass

def setUseOptimized(onoff):
    'setUseOptimized(onoff) -> None\n.   @brief Enables or disables the optimized code.\n.   \n.   The function can be used to dynamically turn on and off optimized code (code that uses SSE2, AVX,\n.   and other instructions on the platforms that support it). It sets a global flag that is further\n.   checked by OpenCV functions. Since the flag is not checked in the inner OpenCV loops, it is only\n.   safe to call the function on the very top level in your application where you can be sure that no\n.   other OpenCV function is currently executed.\n.   \n.   By default, the optimized code is enabled unless you disable it in CMake. The current status can be\n.   retrieved using useOptimized.\n.   @param onoff The boolean flag specifying whether the optimized code should be used (onoff=true)\n.   or not (onoff=false).'
    pass

def setWindowProperty(winname, prop_id, prop_value):
    'setWindowProperty(winname, prop_id, prop_value) -> None\n.   @brief Changes parameters of a window dynamically.\n.   \n.   The function setWindowProperty enables changing properties of a window.\n.   \n.   @param winname Name of the window.\n.   @param prop_id Window property to edit. The supported operation flags are: (cv::WindowPropertyFlags)\n.   @param prop_value New value of the window property. The supported flags are: (cv::WindowFlags)'
    pass

def setWindowTitle(winname, title):
    'setWindowTitle(winname, title) -> None\n.   @brief Updates window title\n.   @param winname Name of the window.\n.   @param title New title.'
    pass

def solve(src1, src2, dst=None, flags=None):
    'solve(src1, src2[, dst[, flags]]) -> retval, dst\n.   @brief Solves one or more linear systems or least-squares problems.\n.   \n.   The function cv::solve solves a linear system or least-squares problem (the\n.   latter is possible with SVD or QR methods, or by specifying the flag\n.   #DECOMP_NORMAL ):\n.   \\f[\\texttt{dst} =  \\arg \\min _X \\| \\texttt{src1} \\cdot \\texttt{X} -  \\texttt{src2} \\|\\f]\n.   \n.   If #DECOMP_LU or #DECOMP_CHOLESKY method is used, the function returns 1\n.   if src1 (or \\f$\\texttt{src1}^T\\texttt{src1}\\f$ ) is non-singular. Otherwise,\n.   it returns 0. In the latter case, dst is not valid. Other methods find a\n.   pseudo-solution in case of a singular left-hand side part.\n.   \n.   @note If you want to find a unity-norm solution of an under-defined\n.   singular system \\f$\\texttt{src1}\\cdot\\texttt{dst}=0\\f$ , the function solve\n.   will not do the work. Use SVD::solveZ instead.\n.   \n.   @param src1 input matrix on the left-hand side of the system.\n.   @param src2 input matrix on the right-hand side of the system.\n.   @param dst output solution.\n.   @param flags solution (matrix inversion) method (#DecompTypes)\n.   @sa invert, SVD, eigen'
    pass

def solveCubic(coeffs, roots=None):
    'solveCubic(coeffs[, roots]) -> retval, roots\n.   @brief Finds the real roots of a cubic equation.\n.   \n.   The function solveCubic finds the real roots of a cubic equation:\n.   -   if coeffs is a 4-element vector:\n.   \\f[\\texttt{coeffs} [0] x^3 +  \\texttt{coeffs} [1] x^2 +  \\texttt{coeffs} [2] x +  \\texttt{coeffs} [3] = 0\\f]\n.   -   if coeffs is a 3-element vector:\n.   \\f[x^3 +  \\texttt{coeffs} [0] x^2 +  \\texttt{coeffs} [1] x +  \\texttt{coeffs} [2] = 0\\f]\n.   \n.   The roots are stored in the roots array.\n.   @param coeffs equation coefficients, an array of 3 or 4 elements.\n.   @param roots output array of real roots that has 1 or 3 elements.\n.   @return number of real roots. It can be 0, 1 or 2.'
    pass

def solveLP():
    'solveLP(Func, Constr, z) -> retval\n.   @brief Solve given (non-integer) linear programming problem using the Simplex Algorithm (Simplex Method).\n.   \n.   What we mean here by "linear programming problem" (or LP problem, for short) can be formulated as:\n.   \n.   \\f[\\mbox{Maximize } c\\cdot x\\\\\n.   \\mbox{Subject to:}\\\\\n.   Ax\\leq b\\\\\n.   x\\geq 0\\f]\n.   \n.   Where \\f$c\\f$ is fixed `1`-by-`n` row-vector, \\f$A\\f$ is fixed `m`-by-`n` matrix, \\f$b\\f$ is fixed `m`-by-`1`\n.   column vector and \\f$x\\f$ is an arbitrary `n`-by-`1` column vector, which satisfies the constraints.\n.   \n.   Simplex algorithm is one of many algorithms that are designed to handle this sort of problems\n.   efficiently. Although it is not optimal in theoretical sense (there exist algorithms that can solve\n.   any problem written as above in polynomial time, while simplex method degenerates to exponential\n.   time for some special cases), it is well-studied, easy to implement and is shown to work well for\n.   real-life purposes.\n.   \n.   The particular implementation is taken almost verbatim from **Introduction to Algorithms, third\n.   edition** by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford Stein. In particular, the\n.   Bland\'s rule <http://en.wikipedia.org/wiki/Bland%27s_rule> is used to prevent cycling.\n.   \n.   @param Func This row-vector corresponds to \\f$c\\f$ in the LP problem formulation (see above). It should\n.   contain 32- or 64-bit floating point numbers. As a convenience, column-vector may be also submitted,\n.   in the latter case it is understood to correspond to \\f$c^T\\f$.\n.   @param Constr `m`-by-`n+1` matrix, whose rightmost column corresponds to \\f$b\\f$ in formulation above\n.   and the remaining to \\f$A\\f$. It should contain 32- or 64-bit floating point numbers.\n.   @param z The solution will be returned here as a column-vector - it corresponds to \\f$c\\f$ in the\n.   formulation above. It will contain 64-bit floating point numbers.\n.   @return One of cv::SolveLPResult'
    pass

def solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, flags, rvecs=None, tvecs=None):
    'solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, flags[, rvecs[, tvecs]]) -> retval, rvecs, tvecs\n.   @brief Finds an object pose from 3 3D-2D point correspondences.\n.   \n.   @param objectPoints Array of object points in the object coordinate space, 3x3 1-channel or\n.   1x3/3x1 3-channel. vector\\<Point3f\\> can be also passed here.\n.   @param imagePoints Array of corresponding image points, 3x2 1-channel or 1x3/3x1 2-channel.\n.   vector\\<Point2f\\> can be also passed here.\n.   @param cameraMatrix Input camera matrix \\f$A = \\vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are\n.   assumed.\n.   @param rvecs Output rotation vectors (see Rodrigues ) that, together with tvecs , brings points from\n.   the model coordinate system to the camera coordinate system. A P3P problem has up to 4 solutions.\n.   @param tvecs Output translation vectors.\n.   @param flags Method for solving a P3P problem:\n.   -   **SOLVEPNP_P3P** Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang\n.   "Complete Solution Classification for the Perspective-Three-Point Problem" (@cite gao2003complete).\n.   -   **SOLVEPNP_AP3P** Method is based on the paper of Tong Ke and Stergios I. Roumeliotis.\n.   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17).\n.   \n.   The function estimates the object pose given 3 object points, their corresponding image\n.   projections, as well as the camera matrix and the distortion coefficients.'
    pass

def solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, flags=None):
    'solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, flags]]]]) -> retval, rvec, tvec\n.   @brief Finds an object pose from 3D-2D point correspondences.\n.   \n.   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or\n.   1xN/Nx1 3-channel, where N is the number of points. vector\\<Point3f\\> can be also passed here.\n.   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,\n.   where N is the number of points. vector\\<Point2f\\> can be also passed here.\n.   @param cameraMatrix Input camera matrix \\f$A = \\vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are\n.   assumed.\n.   @param rvec Output rotation vector (see @ref Rodrigues ) that, together with tvec , brings points from\n.   the model coordinate system to the camera coordinate system.\n.   @param tvec Output translation vector.\n.   @param useExtrinsicGuess Parameter used for #SOLVEPNP_ITERATIVE. If true (1), the function uses\n.   the provided rvec and tvec values as initial approximations of the rotation and translation\n.   vectors, respectively, and further optimizes them.\n.   @param flags Method for solving a PnP problem:\n.   -   **SOLVEPNP_ITERATIVE** Iterative method is based on Levenberg-Marquardt optimization. In\n.   this case the function finds such a pose that minimizes reprojection error, that is the sum\n.   of squared distances between the observed projections imagePoints and the projected (using\n.   projectPoints ) objectPoints .\n.   -   **SOLVEPNP_P3P** Method is based on the paper of X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang\n.   "Complete Solution Classification for the Perspective-Three-Point Problem" (@cite gao2003complete).\n.   In this case the function requires exactly four object and image points.\n.   -   **SOLVEPNP_AP3P** Method is based on the paper of T. Ke, S. Roumeliotis\n.   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17).\n.   In this case the function requires exactly four object and image points.\n.   -   **SOLVEPNP_EPNP** Method has been introduced by F.Moreno-Noguer, V.Lepetit and P.Fua in the\n.   paper "EPnP: Efficient Perspective-n-Point Camera Pose Estimation" (@cite lepetit2009epnp).\n.   -   **SOLVEPNP_DLS** Method is based on the paper of Joel A. Hesch and Stergios I. Roumeliotis.\n.   "A Direct Least-Squares (DLS) Method for PnP" (@cite hesch2011direct).\n.   -   **SOLVEPNP_UPNP** Method is based on the paper of A.Penate-Sanchez, J.Andrade-Cetto,\n.   F.Moreno-Noguer. "Exhaustive Linearization for Robust Camera Pose and Focal Length\n.   Estimation" (@cite penate2013exhaustive). In this case the function also estimates the parameters \\f$f_x\\f$ and \\f$f_y\\f$\n.   assuming that both have the same value. Then the cameraMatrix is updated with the estimated\n.   focal length.\n.   -   **SOLVEPNP_AP3P** Method is based on the paper of Tong Ke and Stergios I. Roumeliotis.\n.   "An Efficient Algebraic Solution to the Perspective-Three-Point Problem" (@cite Ke17). In this case the\n.   function requires exactly four object and image points.\n.   \n.   The function estimates the object pose given a set of object points, their corresponding image\n.   projections, as well as the camera matrix and the distortion coefficients, see the figure below\n.   (more precisely, the X-axis of the camera frame is pointing to the right, the Y-axis downward\n.   and the Z-axis forward).\n.   \n.   ![](pnp.jpg)\n.   \n.   Points expressed in the world frame \\f$ \\bf{X}_w \\f$ are projected into the image plane \\f$ \\left[ u, v \\right] \\f$\n.   using the perspective projection model \\f$ \\Pi \\f$ and the camera intrinsic parameters matrix \\f$ \\bf{A} \\f$:\n.   \n.   \\f[\n.   \\begin{align*}\n.   \\begin{bmatrix}\n.   u \\\\\n.   v \\\\\n.   1\n.   \\end{bmatrix} &=\n.   \\bf{A} \\hspace{0.1em} \\Pi \\hspace{0.2em} ^{c}\\bf{M}_w\n.   \\begin{bmatrix}\n.   X_{w} \\\\\n.   Y_{w} \\\\\n.   Z_{w} \\\\\n.   1\n.   \\end{bmatrix} \\\\\n.   \\begin{bmatrix}\n.   u \\\\\n.   v \\\\\n.   1\n.   \\end{bmatrix} &=\n.   \\begin{bmatrix}\n.   f_x & 0 & c_x \\\\\n.   0 & f_y & c_y \\\\\n.   0 & 0 & 1\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   1 & 0 & 0 & 0 \\\\\n.   0 & 1 & 0 & 0 \\\\\n.   0 & 0 & 1 & 0\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   r_{11} & r_{12} & r_{13} & t_x \\\\\n.   r_{21} & r_{22} & r_{23} & t_y \\\\\n.   r_{31} & r_{32} & r_{33} & t_z \\\\\n.   0 & 0 & 0 & 1\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   X_{w} \\\\\n.   Y_{w} \\\\\n.   Z_{w} \\\\\n.   1\n.   \\end{bmatrix}\n.   \\end{align*}\n.   \\f]\n.   \n.   The estimated pose is thus the rotation (`rvec`) and the translation (`tvec`) vectors that allow to transform\n.   a 3D point expressed in the world frame into the camera frame:\n.   \n.   \\f[\n.   \\begin{align*}\n.   \\begin{bmatrix}\n.   X_c \\\\\n.   Y_c \\\\\n.   Z_c \\\\\n.   1\n.   \\end{bmatrix} &=\n.   \\hspace{0.2em} ^{c}\\bf{M}_w\n.   \\begin{bmatrix}\n.   X_{w} \\\\\n.   Y_{w} \\\\\n.   Z_{w} \\\\\n.   1\n.   \\end{bmatrix} \\\\\n.   \\begin{bmatrix}\n.   X_c \\\\\n.   Y_c \\\\\n.   Z_c \\\\\n.   1\n.   \\end{bmatrix} &=\n.   \\begin{bmatrix}\n.   r_{11} & r_{12} & r_{13} & t_x \\\\\n.   r_{21} & r_{22} & r_{23} & t_y \\\\\n.   r_{31} & r_{32} & r_{33} & t_z \\\\\n.   0 & 0 & 0 & 1\n.   \\end{bmatrix}\n.   \\begin{bmatrix}\n.   X_{w} \\\\\n.   Y_{w} \\\\\n.   Z_{w} \\\\\n.   1\n.   \\end{bmatrix}\n.   \\end{align*}\n.   \\f]\n.   \n.   @note\n.   -   An example of how to use solvePnP for planar augmented reality can be found at\n.   opencv_source_code/samples/python/plane_ar.py\n.   -   If you are using Python:\n.   - Numpy array slices won\'t work as input because solvePnP requires contiguous\n.   arrays (enforced by the assertion using cv::Mat::checkVector() around line 55 of\n.   modules/calib3d/src/solvepnp.cpp version 2.4.9)\n.   - The P3P algorithm requires image points to be in an array of shape (N,1,2) due\n.   to its calling of cv::undistortPoints (around line 75 of modules/calib3d/src/solvepnp.cpp version 2.4.9)\n.   which requires 2-channel information.\n.   - Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of\n.   it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints =\n.   np.ascontiguousarray(D[:,:2]).reshape((N,1,2))\n.   -   The methods **SOLVEPNP_DLS** and **SOLVEPNP_UPNP** cannot be used as the current implementations are\n.   unstable and sometimes give completely wrong results. If you pass one of these two\n.   flags, **SOLVEPNP_EPNP** method will be used instead.\n.   -   The minimum number of points is 4 in the general case. In the case of **SOLVEPNP_P3P** and **SOLVEPNP_AP3P**\n.   methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions\n.   of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error).\n.   -   With **SOLVEPNP_ITERATIVE** method and `useExtrinsicGuess=true`, the minimum number of points is 3 (3 points\n.   are sufficient to compute a pose but there are up to 4 solutions). The initial solution should be close to the\n.   global solution to converge.'
    pass

def solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, iterationsCount=None, reprojectionError=None, confidence=None, inliers=None, flags=None):
    'solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, iterationsCount[, reprojectionError[, confidence[, inliers[, flags]]]]]]]]) -> retval, rvec, tvec, inliers\n.   @brief Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.\n.   \n.   @param objectPoints Array of object points in the object coordinate space, Nx3 1-channel or\n.   1xN/Nx1 3-channel, where N is the number of points. vector\\<Point3f\\> can be also passed here.\n.   @param imagePoints Array of corresponding image points, Nx2 1-channel or 1xN/Nx1 2-channel,\n.   where N is the number of points. vector\\<Point2f\\> can be also passed here.\n.   @param cameraMatrix Input camera matrix \\f$A = \\vecthreethree{fx}{0}{cx}{0}{fy}{cy}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are\n.   assumed.\n.   @param rvec Output rotation vector (see Rodrigues ) that, together with tvec , brings points from\n.   the model coordinate system to the camera coordinate system.\n.   @param tvec Output translation vector.\n.   @param useExtrinsicGuess Parameter used for SOLVEPNP_ITERATIVE. If true (1), the function uses\n.   the provided rvec and tvec values as initial approximations of the rotation and translation\n.   vectors, respectively, and further optimizes them.\n.   @param iterationsCount Number of iterations.\n.   @param reprojectionError Inlier threshold value used by the RANSAC procedure. The parameter value\n.   is the maximum allowed distance between the observed and computed point projections to consider it\n.   an inlier.\n.   @param confidence The probability that the algorithm produces a useful result.\n.   @param inliers Output vector that contains indices of inliers in objectPoints and imagePoints .\n.   @param flags Method for solving a PnP problem (see solvePnP ).\n.   \n.   The function estimates an object pose given a set of object points, their corresponding image\n.   projections, as well as the camera matrix and the distortion coefficients. This function finds such\n.   a pose that minimizes reprojection error, that is, the sum of squared distances between the observed\n.   projections imagePoints and the projected (using projectPoints ) objectPoints. The use of RANSAC\n.   makes the function resistant to outliers.\n.   \n.   @note\n.   -   An example of how to use solvePNPRansac for object detection can be found at\n.   opencv_source_code/samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/\n.   -   The default method used to estimate the camera pose for the Minimal Sample Sets step\n.   is #SOLVEPNP_EPNP. Exceptions are:\n.   - if you choose #SOLVEPNP_P3P or #SOLVEPNP_AP3P, these methods will be used.\n.   - if the number of input points is equal to 4, #SOLVEPNP_P3P is used.\n.   -   The method used to estimate the camera pose using all the inliers is defined by the\n.   flags parameters unless it is equal to #SOLVEPNP_P3P or #SOLVEPNP_AP3P. In this case,\n.   the method #SOLVEPNP_EPNP will be used instead.'
    pass

def solvePoly(coeffs, roots=None, maxIters=None):
    'solvePoly(coeffs[, roots[, maxIters]]) -> retval, roots\n.   @brief Finds the real or complex roots of a polynomial equation.\n.   \n.   The function cv::solvePoly finds real and complex roots of a polynomial equation:\n.   \\f[\\texttt{coeffs} [n] x^{n} +  \\texttt{coeffs} [n-1] x^{n-1} + ... +  \\texttt{coeffs} [1] x +  \\texttt{coeffs} [0] = 0\\f]\n.   @param coeffs array of polynomial coefficients.\n.   @param roots output (complex) array of roots.\n.   @param maxIters maximum number of iterations the algorithm does.'
    pass

def sort(src, flags, dst=None):
    'sort(src, flags[, dst]) -> dst\n.   @brief Sorts each row or each column of a matrix.\n.   \n.   The function cv::sort sorts each matrix row or each matrix column in\n.   ascending or descending order. So you should pass two operation flags to\n.   get desired behaviour. If you want to sort matrix rows or columns\n.   lexicographically, you can use STL std::sort generic function with the\n.   proper comparison predicate.\n.   \n.   @param src input single-channel array.\n.   @param dst output array of the same size and type as src.\n.   @param flags operation flags, a combination of #SortFlags\n.   @sa sortIdx, randShuffle'
    pass

def sortIdx(src, flags, dst=None):
    'sortIdx(src, flags[, dst]) -> dst\n.   @brief Sorts each row or each column of a matrix.\n.   \n.   The function cv::sortIdx sorts each matrix row or each matrix column in the\n.   ascending or descending order. So you should pass two operation flags to\n.   get desired behaviour. Instead of reordering the elements themselves, it\n.   stores the indices of sorted elements in the output array. For example:\n.   @code\n.   Mat A = Mat::eye(3,3,CV_32F), B;\n.   sortIdx(A, B, SORT_EVERY_ROW + SORT_ASCENDING);\n.   // B will probably contain\n.   // (because of equal elements in A some permutations are possible):\n.   // [[1, 2, 0], [0, 2, 1], [0, 1, 2]]\n.   @endcode\n.   @param src input single-channel array.\n.   @param dst output integer array of the same size as src.\n.   @param flags operation flags that could be a combination of cv::SortFlags\n.   @sa sort, randShuffle'
    pass

def spatialGradient(src, dx=None, dy=None, ksize=None, borderType=None):
    'spatialGradient(src[, dx[, dy[, ksize[, borderType]]]]) -> dx, dy\n.   @brief Calculates the first order image derivative in both x and y using a Sobel operator\n.   \n.   Equivalent to calling:\n.   \n.   @code\n.   Sobel( src, dx, CV_16SC1, 1, 0, 3 );\n.   Sobel( src, dy, CV_16SC1, 0, 1, 3 );\n.   @endcode\n.   \n.   @param src input image.\n.   @param dx output image with first-order derivative in x.\n.   @param dy output image with first-order derivative in y.\n.   @param ksize size of Sobel kernel. It must be 3.\n.   @param borderType pixel extrapolation method, see #BorderTypes\n.   \n.   @sa Sobel'
    pass

def split(m, mv=None):
    'split(m[, mv]) -> mv\n.   @overload\n.   @param m input multi-channel array.\n.   @param mv output vector of arrays; the arrays themselves are reallocated, if needed.'
    pass

def sqrBoxFilter(_src, ddepth, ksize, _dst=None, anchor=None, normalize=None, borderType=None):
    "sqrBoxFilter(_src, ddepth, ksize[, _dst[, anchor[, normalize[, borderType]]]]) -> _dst\n.   @brief Calculates the normalized sum of squares of the pixel values overlapping the filter.\n.   \n.   For every pixel \\f$ (x, y) \\f$ in the source image, the function calculates the sum of squares of those neighboring\n.   pixel values which overlap the filter placed over the pixel \\f$ (x, y) \\f$.\n.   \n.   The unnormalized square box filter can be useful in computing local image statistics such as the the local\n.   variance and standard deviation around the neighborhood of a pixel.\n.   \n.   @param _src input image\n.   @param _dst output image of the same size and type as _src\n.   @param ddepth the output image depth (-1 to use src.depth())\n.   @param ksize kernel size\n.   @param anchor kernel anchor point. The default value of Point(-1, -1) denotes that the anchor is at the kernel\n.   center.\n.   @param normalize flag, specifying whether the kernel is to be normalized by it's area or not.\n.   @param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes\n.   @sa boxFilter"
    pass

def sqrt(src, dst=None):
    'sqrt(src[, dst]) -> dst\n.   @brief Calculates a square root of array elements.\n.   \n.   The function cv::sqrt calculates a square root of each input array element.\n.   In case of multi-channel arrays, each channel is processed\n.   independently. The accuracy is approximately the same as of the built-in\n.   std::sqrt .\n.   @param src input floating-point array.\n.   @param dst output array of the same size and type as src.'
    pass

def startWindowThread():
    'startWindowThread() -> retval\n.'
    pass

def stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R=None, T=None, E=None, F=None, flags=None, criteria=None):
    'stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize[, R[, T[, E[, F[, flags[, criteria]]]]]]) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F\n.'
    pass

def stereoCalibrateExtended(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E=None, F=None, perViewErrors=None, flags=None, criteria=None):
    'stereoCalibrateExtended(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T[, E[, F[, perViewErrors[, flags[, criteria]]]]]) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F, perViewErrors\n.   @brief Calibrates the stereo camera.\n.   \n.   @param objectPoints Vector of vectors of the calibration pattern points.\n.   @param imagePoints1 Vector of vectors of the projections of the calibration pattern points,\n.   observed by the first camera.\n.   @param imagePoints2 Vector of vectors of the projections of the calibration pattern points,\n.   observed by the second camera.\n.   @param cameraMatrix1 Input/output first camera matrix:\n.   \\f$\\vecthreethree{f_x^{(j)}}{0}{c_x^{(j)}}{0}{f_y^{(j)}}{c_y^{(j)}}{0}{0}{1}\\f$ , \\f$j = 0,\\, 1\\f$ . If\n.   any of CALIB_USE_INTRINSIC_GUESS , CALIB_FIX_ASPECT_RATIO ,\n.   CALIB_FIX_INTRINSIC , or CALIB_FIX_FOCAL_LENGTH are specified, some or all of the\n.   matrix components must be initialized. See the flags description for details.\n.   @param distCoeffs1 Input/output vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$ of\n.   4, 5, 8, 12 or 14 elements. The output vector length depends on the flags.\n.   @param cameraMatrix2 Input/output second camera matrix. The parameter is similar to cameraMatrix1\n.   @param distCoeffs2 Input/output lens distortion coefficients for the second camera. The parameter\n.   is similar to distCoeffs1 .\n.   @param imageSize Size of the image used only to initialize intrinsic camera matrix.\n.   @param R Output rotation matrix between the 1st and the 2nd camera coordinate systems.\n.   @param T Output translation vector between the coordinate systems of the cameras.\n.   @param E Output essential matrix.\n.   @param F Output fundamental matrix.\n.   @param perViewErrors Output vector of the RMS re-projection error estimated for each pattern view.\n.   @param flags Different flags that may be zero or a combination of the following values:\n.   -   **CALIB_FIX_INTRINSIC** Fix cameraMatrix? and distCoeffs? so that only R, T, E , and F\n.   matrices are estimated.\n.   -   **CALIB_USE_INTRINSIC_GUESS** Optimize some or all of the intrinsic parameters\n.   according to the specified flags. Initial values are provided by the user.\n.   -   **CALIB_USE_EXTRINSIC_GUESS** R, T contain valid initial values that are optimized further.\n.   Otherwise R, T are initialized to the median value of the pattern views (each dimension separately).\n.   -   **CALIB_FIX_PRINCIPAL_POINT** Fix the principal points during the optimization.\n.   -   **CALIB_FIX_FOCAL_LENGTH** Fix \\f$f^{(j)}_x\\f$ and \\f$f^{(j)}_y\\f$ .\n.   -   **CALIB_FIX_ASPECT_RATIO** Optimize \\f$f^{(j)}_y\\f$ . Fix the ratio \\f$f^{(j)}_x/f^{(j)}_y\\f$\n.   .\n.   -   **CALIB_SAME_FOCAL_LENGTH** Enforce \\f$f^{(0)}_x=f^{(1)}_x\\f$ and \\f$f^{(0)}_y=f^{(1)}_y\\f$ .\n.   -   **CALIB_ZERO_TANGENT_DIST** Set tangential distortion coefficients for each camera to\n.   zeros and fix there.\n.   -   **CALIB_FIX_K1,...,CALIB_FIX_K6** Do not change the corresponding radial\n.   distortion coefficient during the optimization. If CALIB_USE_INTRINSIC_GUESS is set,\n.   the coefficient from the supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   -   **CALIB_RATIONAL_MODEL** Enable coefficients k4, k5, and k6. To provide the backward\n.   compatibility, this extra flag should be explicitly specified to make the calibration\n.   function use the rational model and return 8 coefficients. If the flag is not set, the\n.   function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_THIN_PRISM_MODEL** Coefficients s1, s2, s3 and s4 are enabled. To provide the\n.   backward compatibility, this extra flag should be explicitly specified to make the\n.   calibration function use the thin prism model and return 12 coefficients. If the flag is not\n.   set, the function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_FIX_S1_S2_S3_S4** The thin prism distortion coefficients are not changed during\n.   the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the\n.   supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   -   **CALIB_TILTED_MODEL** Coefficients tauX and tauY are enabled. To provide the\n.   backward compatibility, this extra flag should be explicitly specified to make the\n.   calibration function use the tilted sensor model and return 14 coefficients. If the flag is not\n.   set, the function computes and returns only 5 distortion coefficients.\n.   -   **CALIB_FIX_TAUX_TAUY** The coefficients of the tilted sensor model are not changed during\n.   the optimization. If CALIB_USE_INTRINSIC_GUESS is set, the coefficient from the\n.   supplied distCoeffs matrix is used. Otherwise, it is set to 0.\n.   @param criteria Termination criteria for the iterative optimization algorithm.\n.   \n.   The function estimates transformation between two cameras making a stereo pair. If you have a stereo\n.   camera where the relative position and orientation of two cameras is fixed, and if you computed\n.   poses of an object relative to the first camera and to the second camera, (R1, T1) and (R2, T2),\n.   respectively (this can be done with solvePnP ), then those poses definitely relate to each other.\n.   This means that, given ( \\f$R_1\\f$,\\f$T_1\\f$ ), it should be possible to compute ( \\f$R_2\\f$,\\f$T_2\\f$ ). You only\n.   need to know the position and orientation of the second camera relative to the first camera. This is\n.   what the described function does. It computes ( \\f$R\\f$,\\f$T\\f$ ) so that:\n.   \n.   \\f[R_2=R*R_1\\f]\n.   \\f[T_2=R*T_1 + T,\\f]\n.   \n.   Optionally, it computes the essential matrix E:\n.   \n.   \\f[E= \\vecthreethree{0}{-T_2}{T_1}{T_2}{0}{-T_0}{-T_1}{T_0}{0} *R\\f]\n.   \n.   where \\f$T_i\\f$ are components of the translation vector \\f$T\\f$ : \\f$T=[T_0, T_1, T_2]^T\\f$ . And the function\n.   can also compute the fundamental matrix F:\n.   \n.   \\f[F = cameraMatrix2^{-T} E cameraMatrix1^{-1}\\f]\n.   \n.   Besides the stereo-related information, the function can also perform a full calibration of each of\n.   two cameras. However, due to the high dimensionality of the parameter space and noise in the input\n.   data, the function can diverge from the correct solution. If the intrinsic parameters can be\n.   estimated with high accuracy for each of the cameras individually (for example, using\n.   calibrateCamera ), you are recommended to do so and then pass CALIB_FIX_INTRINSIC flag to the\n.   function along with the computed intrinsic parameters. Otherwise, if all the parameters are\n.   estimated at once, it makes sense to restrict some parameters, for example, pass\n.   CALIB_SAME_FOCAL_LENGTH and CALIB_ZERO_TANGENT_DIST flags, which is usually a\n.   reasonable assumption.\n.   \n.   Similarly to calibrateCamera , the function minimizes the total re-projection error for all the\n.   points in all the available views from both cameras. The function returns the final value of the\n.   re-projection error.'
    pass

def stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1=None, R2=None, P1=None, P2=None, Q=None, flags=None, alpha=None, newImageSize=None):
    'stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T[, R1[, R2[, P1[, P2[, Q[, flags[, alpha[, newImageSize]]]]]]]]) -> R1, R2, P1, P2, Q, validPixROI1, validPixROI2\n.   @brief Computes rectification transforms for each head of a calibrated stereo camera.\n.   \n.   @param cameraMatrix1 First camera matrix.\n.   @param distCoeffs1 First camera distortion parameters.\n.   @param cameraMatrix2 Second camera matrix.\n.   @param distCoeffs2 Second camera distortion parameters.\n.   @param imageSize Size of the image used for stereo calibration.\n.   @param R Rotation matrix between the coordinate systems of the first and the second cameras.\n.   @param T Translation vector between coordinate systems of the cameras.\n.   @param R1 Output 3x3 rectification transform (rotation matrix) for the first camera.\n.   @param R2 Output 3x3 rectification transform (rotation matrix) for the second camera.\n.   @param P1 Output 3x4 projection matrix in the new (rectified) coordinate systems for the first\n.   camera.\n.   @param P2 Output 3x4 projection matrix in the new (rectified) coordinate systems for the second\n.   camera.\n.   @param Q Output \\f$4 \\times 4\\f$ disparity-to-depth mapping matrix (see reprojectImageTo3D ).\n.   @param flags Operation flags that may be zero or CALIB_ZERO_DISPARITY . If the flag is set,\n.   the function makes the principal points of each camera have the same pixel coordinates in the\n.   rectified views. And if the flag is not set, the function may still shift the images in the\n.   horizontal or vertical direction (depending on the orientation of epipolar lines) to maximize the\n.   useful image area.\n.   @param alpha Free scaling parameter. If it is -1 or absent, the function performs the default\n.   scaling. Otherwise, the parameter should be between 0 and 1. alpha=0 means that the rectified\n.   images are zoomed and shifted so that only valid pixels are visible (no black areas after\n.   rectification). alpha=1 means that the rectified image is decimated and shifted so that all the\n.   pixels from the original images from the cameras are retained in the rectified images (no source\n.   image pixels are lost). Obviously, any intermediate value yields an intermediate result between\n.   those two extreme cases.\n.   @param newImageSize New image resolution after rectification. The same size should be passed to\n.   initUndistortRectifyMap (see the stereo_calib.cpp sample in OpenCV samples directory). When (0,0)\n.   is passed (default), it is set to the original imageSize . Setting it to larger value can help you\n.   preserve details in the original image, especially when there is a big radial distortion.\n.   @param validPixROI1 Optional output rectangles inside the rectified images where all the pixels\n.   are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller\n.   (see the picture below).\n.   @param validPixROI2 Optional output rectangles inside the rectified images where all the pixels\n.   are valid. If alpha=0 , the ROIs cover the whole images. Otherwise, they are likely to be smaller\n.   (see the picture below).\n.   \n.   The function computes the rotation matrices for each camera that (virtually) make both camera image\n.   planes the same plane. Consequently, this makes all the epipolar lines parallel and thus simplifies\n.   the dense stereo correspondence problem. The function takes the matrices computed by stereoCalibrate\n.   as input. As output, it provides two rotation matrices and also two projection matrices in the new\n.   coordinates. The function distinguishes the following two cases:\n.   \n.   -   **Horizontal stereo**: the first and the second camera views are shifted relative to each other\n.   mainly along the x axis (with possible small vertical shift). In the rectified images, the\n.   corresponding epipolar lines in the left and right cameras are horizontal and have the same\n.   y-coordinate. P1 and P2 look like:\n.   \n.   \\f[\\texttt{P1} = \\begin{bmatrix} f & 0 & cx_1 & 0 \\\\ 0 & f & cy & 0 \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}\\f]\n.   \n.   \\f[\\texttt{P2} = \\begin{bmatrix} f & 0 & cx_2 & T_x*f \\\\ 0 & f & cy & 0 \\\\ 0 & 0 & 1 & 0 \\end{bmatrix} ,\\f]\n.   \n.   where \\f$T_x\\f$ is a horizontal shift between the cameras and \\f$cx_1=cx_2\\f$ if\n.   CALIB_ZERO_DISPARITY is set.\n.   \n.   -   **Vertical stereo**: the first and the second camera views are shifted relative to each other\n.   mainly in vertical direction (and probably a bit in the horizontal direction too). The epipolar\n.   lines in the rectified images are vertical and have the same x-coordinate. P1 and P2 look like:\n.   \n.   \\f[\\texttt{P1} = \\begin{bmatrix} f & 0 & cx & 0 \\\\ 0 & f & cy_1 & 0 \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}\\f]\n.   \n.   \\f[\\texttt{P2} = \\begin{bmatrix} f & 0 & cx & 0 \\\\ 0 & f & cy_2 & T_y*f \\\\ 0 & 0 & 1 & 0 \\end{bmatrix} ,\\f]\n.   \n.   where \\f$T_y\\f$ is a vertical shift between the cameras and \\f$cy_1=cy_2\\f$ if CALIB_ZERO_DISPARITY is\n.   set.\n.   \n.   As you can see, the first three columns of P1 and P2 will effectively be the new "rectified" camera\n.   matrices. The matrices, together with R1 and R2 , can then be passed to initUndistortRectifyMap to\n.   initialize the rectification map for each camera.\n.   \n.   See below the screenshot from the stereo_calib.cpp sample. Some red horizontal lines pass through\n.   the corresponding image regions. This means that the images are well rectified, which is what most\n.   stereo correspondence algorithms rely on. The green rectangles are roi1 and roi2 . You see that\n.   their interiors are all valid pixels.\n.   \n.   ![image](pics/stereo_undistort.jpg)'
    pass

def stereoRectifyUncalibrated(points1, points2, F, imgSize, H1=None, H2=None, threshold=None):
    'stereoRectifyUncalibrated(points1, points2, F, imgSize[, H1[, H2[, threshold]]]) -> retval, H1, H2\n.   @brief Computes a rectification transform for an uncalibrated stereo camera.\n.   \n.   @param points1 Array of feature points in the first image.\n.   @param points2 The corresponding points in the second image. The same formats as in\n.   findFundamentalMat are supported.\n.   @param F Input fundamental matrix. It can be computed from the same set of point pairs using\n.   findFundamentalMat .\n.   @param imgSize Size of the image.\n.   @param H1 Output rectification homography matrix for the first image.\n.   @param H2 Output rectification homography matrix for the second image.\n.   @param threshold Optional threshold used to filter out the outliers. If the parameter is greater\n.   than zero, all the point pairs that do not comply with the epipolar geometry (that is, the points\n.   for which \\f$|\\texttt{points2[i]}^T*\\texttt{F}*\\texttt{points1[i]}|>\\texttt{threshold}\\f$ ) are\n.   rejected prior to computing the homographies. Otherwise, all the points are considered inliers.\n.   \n.   The function computes the rectification transformations without knowing intrinsic parameters of the\n.   cameras and their relative position in the space, which explains the suffix "uncalibrated". Another\n.   related difference from stereoRectify is that the function outputs not the rectification\n.   transformations in the object (3D) space, but the planar perspective transformations encoded by the\n.   homography matrices H1 and H2 . The function implements the algorithm @cite Hartley99 .\n.   \n.   @note\n.   While the algorithm does not need to know the intrinsic parameters of the cameras, it heavily\n.   depends on the epipolar geometry. Therefore, if the camera lenses have a significant distortion,\n.   it would be better to correct it before computing the fundamental matrix and calling this\n.   function. For example, distortion coefficients can be estimated for each head of stereo camera\n.   separately by using calibrateCamera . Then, the images can be corrected using undistort , or\n.   just the point coordinates can be corrected with undistortPoints .'
    pass

class structured_light_GrayCodePattern(structured_light_StructuredLightPattern):
    __class__ = structured_light_GrayCodePattern
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, width, height):
        'create(width, height) -> retval\n.   @brief Constructor\n.   @param parameters GrayCodePattern parameters GrayCodePattern::Params: the width and the height of the projector.'
        pass
    
    def getImagesForShadowMasks(self, blackImage, whiteImage):
        "getImagesForShadowMasks(blackImage, whiteImage) -> blackImage, whiteImage\n.   @brief Generates the all-black and all-white images needed for shadowMasks computation.\n.   *\n.   *  To identify shadow regions, the regions of two images where the pixels are not lit by projector's light and thus where there is not coded information,\n.   *  the 3DUNDERWORLD algorithm computes a shadow mask for the two cameras views, starting from a white and a black images captured by each camera.\n.   *  This method generates these two additional images to project.\n.   *\n.   *  @param blackImage The generated all-black CV_8U image, at projector's resolution.\n.   *  @param whiteImage The generated all-white CV_8U image, at projector's resolution."
        pass
    
    def getNumberOfPatternImages(self):
        'getNumberOfPatternImages() -> retval\n.   @brief Get the number of pattern images needed for the graycode pattern.\n.   *\n.   * @return The number of pattern images needed for the graycode pattern.\n.   *'
        pass
    
    def getProjPixel(self, patternImages, x, y):
        "getProjPixel(patternImages, x, y) -> retval, projPix\n.   @brief For a (x,y) pixel of a camera returns the corresponding projector pixel.\n.   *\n.   *  The function decodes each pixel in the pattern images acquired by a camera into their corresponding decimal numbers representing the projector's column and row,\n.   *  providing a mapping between camera's and projector's pixel.\n.   *\n.   *  @param patternImages The pattern images acquired by the camera, stored in a grayscale vector < Mat >.\n.   *  @param x x coordinate of the image pixel.\n.   *  @param y y coordinate of the image pixel.\n.   *  @param projPix Projector's pixel corresponding to the camera's pixel: projPix.x and projPix.y are the image coordinates of the projector's pixel corresponding to the pixel being decoded in a camera."
        pass
    
    def setBlackThreshold(self):
        'setBlackThreshold(value) -> None\n.   @brief Sets the value for black threshold, needed for decoding (shadowsmasks computation).\n.   *\n.   *  Black threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the fully illuminated (white) and the not illuminated images (black); used in computeShadowMasks method.\n.   *\n.   *  @param value The desired black threshold value.\n.   *'
        pass
    
    def setWhiteThreshold(self, value):
        'setWhiteThreshold(value) -> None\n.   @brief Sets the value for white threshold, needed for decoding.\n.   *\n.   *  White threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the graycode pattern and its inverse images; used in getProjPixel method.\n.   *\n.   *  @param value The desired white threshold value.\n.   *'
        pass
    

class structured_light_SinusoidalPattern(structured_light_StructuredLightPattern):
    __class__ = structured_light_SinusoidalPattern
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeDataModulationTerm(self, patternImages, shadowMask, dataModulationTerm=None):
        'computeDataModulationTerm(patternImages, shadowMask[, dataModulationTerm]) -> dataModulationTerm\n.   * @brief compute the data modulation term.\n.   * @param patternImages captured images with projected patterns.\n.   * @param dataModulationTerm Mat where the data modulation term is saved.\n.   * @param shadowMask Mask used to discard shadow regions.'
        pass
    
    def computePhaseMap(self, patternImages, wrappedPhaseMap=None, shadowMask=None, fundamental=None):
        'computePhaseMap(patternImages[, wrappedPhaseMap[, shadowMask[, fundamental]]]) -> wrappedPhaseMap, shadowMask\n.   * @brief Compute a wrapped phase map from sinusoidal patterns.\n.   * @param patternImages Input data to compute the wrapped phase map.\n.   * @param wrappedPhaseMap Wrapped phase map obtained through one of the three methods.\n.   * @param shadowMask Mask used to discard shadow regions.\n.   * @param fundamental Fundamental matrix used to compute epipolar lines and ease the matching step.'
        pass
    
    @classmethod
    def create(cls, parameters=None):
        'create([, parameters]) -> retval\n.   * @brief Constructor.\n.   * @param parameters SinusoidalPattern parameters SinusoidalPattern::Params: width, height of the projector and patterns parameters.\n.   *'
        pass
    
    def findProCamMatches(self, projUnwrappedPhaseMap, camUnwrappedPhaseMap, matches=None):
        "findProCamMatches(projUnwrappedPhaseMap, camUnwrappedPhaseMap[, matches]) -> matches\n.   * @brief Find correspondences between the two devices thanks to unwrapped phase maps.\n.   * @param projUnwrappedPhaseMap Projector's unwrapped phase map.\n.   * @param camUnwrappedPhaseMap Camera's unwrapped phase map.\n.   * @param matches Images used to display correspondences map."
        pass
    
    def unwrapPhaseMap(self, wrappedPhaseMap, camSize, unwrappedPhaseMap=None, shadowMask=None):
        'unwrapPhaseMap(wrappedPhaseMap, camSize[, unwrappedPhaseMap[, shadowMask]]) -> unwrappedPhaseMap\n.   * @brief Unwrap the wrapped phase map to remove phase ambiguities.\n.   * @param wrappedPhaseMap The wrapped phase map computed from the pattern.\n.   * @param unwrappedPhaseMap The unwrapped phase map used to find correspondences between the two devices.\n.   * @param camSize Resolution of the camera.\n.   * @param shadowMask Mask used to discard shadow regions.'
        pass
    

class structured_light_SinusoidalPattern_Params(_mod_builtins.object):
    __class__ = structured_light_SinusoidalPattern_Params
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @property
    def height(self):
        'height'
        pass
    
    @property
    def horizontal(self):
        'horizontal'
        pass
    
    @property
    def methodId(self):
        'methodId'
        pass
    
    @property
    def nbrOfPeriods(self):
        'nbrOfPeriods'
        pass
    
    @property
    def nbrOfPixelsBetweenMarkers(self):
        'nbrOfPixelsBetweenMarkers'
        pass
    
    @property
    def setMarkers(self):
        'setMarkers'
        pass
    
    @property
    def shiftValue(self):
        'shiftValue'
        pass
    
    @property
    def width(self):
        'width'
        pass
    

class structured_light_StructuredLightPattern(_mod_builtins.object):
    __class__ = structured_light_StructuredLightPattern
    def __delattr__(self, name):
        'Implement delattr(self, name).'
        return None
    
    def __eq__(self, value):
        'Return self==value.'
        return False
    
    def __ge__(self, value):
        'Return self>=value.'
        return False
    
    def __getattribute__(self, name):
        'Return getattr(self, name).'
        pass
    
    def __gt__(self, value):
        'Return self>value.'
        return False
    
    def __hash__(self):
        'Return hash(self).'
        return 0
    
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __le__(self, value):
        'Return self<=value.'
        return False
    
    def __lt__(self, value):
        'Return self<value.'
        return False
    
    def __ne__(self, value):
        'Return self!=value.'
        return False
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    def __setattr__(self, name, value):
        'Implement setattr(self, name, value).'
        return None
    
    def __str__(self):
        'Return str(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def decode(self, patternImages, disparityMap=None, blackImages=None, whiteImages=None, flags=None):
        'decode(patternImages[, disparityMap[, blackImages[, whiteImages[, flags]]]]) -> retval, disparityMap\n.   @brief Decodes the structured light pattern, generating a disparity map\n.   \n.   @param patternImages The acquired pattern images to decode (vector<vector<Mat>>), loaded as grayscale and previously rectified.\n.   @param disparityMap The decoding result: a CV_64F Mat at image resolution, storing the computed disparity map.\n.   @param blackImages The all-black images needed for shadowMasks computation.\n.   @param whiteImages The all-white images needed for shadowMasks computation.\n.   @param flags Flags setting decoding algorithms. Default: DECODE_3D_UNDERWORLD.\n.   @note All the images must be at the same resolution.'
        pass
    
    def generate(self, patternImages=None):
        "generate([, patternImages]) -> retval, patternImages\n.   @brief Generates the structured light pattern to project.\n.   \n.   @param patternImages The generated pattern: a vector<Mat>, in which each image is a CV_8U Mat at projector's resolution."
        pass
    

def stylization(src, dst=None, sigma_s=None, sigma_r=None):
    'stylization(src[, dst[, sigma_s[, sigma_r]]]) -> dst\n.   @brief Stylization aims to produce digital imagery with a wide variety of effects not focused on\n.   photorealism. Edge-aware filters are ideal for stylization, as they can abstract regions of low\n.   contrast while preserving, or enhancing, high-contrast features.\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param dst Output image with the same size and type as src.\n.   @param sigma_s Range between 0 to 200.\n.   @param sigma_r Range between 0 to 1.'
    pass

def subtract(src1, src2, dst=None, mask=None, dtype=None):
    'subtract(src1, src2[, dst[, mask[, dtype]]]) -> dst\n.   @brief Calculates the per-element difference between two arrays or array and a scalar.\n.   \n.   The function subtract calculates:\n.   - Difference between two arrays, when both input arrays have the same size and the same number of\n.   channels:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) -  \\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   - Difference between an array and a scalar, when src2 is constructed from Scalar or has the same\n.   number of elements as `src1.channels()`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) -  \\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   - Difference between a scalar and an array, when src1 is constructed from Scalar or has the same\n.   number of elements as `src2.channels()`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1} -  \\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   - The reverse difference between a scalar and an array in the case of `SubRS`:\n.   \\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src2} -  \\texttt{src1}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n.   where I is a multi-dimensional index of array elements. In case of multi-channel arrays, each\n.   channel is processed independently.\n.   \n.   The first function in the list above can be replaced with matrix expressions:\n.   @code{.cpp}\n.   dst = src1 - src2;\n.   dst -= src1; // equivalent to subtract(dst, src1, dst);\n.   @endcode\n.   The input arrays and the output array can all have the same or different depths. For example, you\n.   can subtract to 8-bit unsigned arrays and store the difference in a 16-bit signed array. Depth of\n.   the output array is determined by dtype parameter. In the second and third cases above, as well as\n.   in the first case, when src1.depth() == src2.depth(), dtype can be set to the default -1. In this\n.   case the output array will have the same depth as the input array, be it src1, src2 or both.\n.   @note Saturation is not applied when the output array has the depth CV_32S. You may even get\n.   result of an incorrect sign in the case of overflow.\n.   @param src1 first input array or a scalar.\n.   @param src2 second input array or a scalar.\n.   @param dst output array of the same size and the same number of channels as the input array.\n.   @param mask optional operation mask; this is an 8-bit single channel array that specifies elements\n.   of the output array to be changed.\n.   @param dtype optional depth of the output array\n.   @sa  add, addWeighted, scaleAdd, Mat::convertTo'
    pass

def sumElems(src):
    'sumElems(src) -> retval\n.   @brief Calculates the sum of array elements.\n.   \n.   The function cv::sum calculates and returns the sum of array elements,\n.   independently for each channel.\n.   @param src input array that must have from 1 to 4 channels.\n.   @sa  countNonZero, mean, meanStdDev, norm, minMaxLoc, reduce'
    pass

class text_BaseOCR(_mod_builtins.object):
    __class__ = text_BaseOCR
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class text_ERFilter(Algorithm):
    __class__ = text_ERFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class text_ERFilter_Callback(_mod_builtins.object):
    __class__ = text_ERFilter_Callback
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class text_OCRBeamSearchDecoder(text_BaseOCR):
    __class__ = text_OCRBeamSearchDecoder
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode=None, beam_size=None):
        'create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table[, mode[, beam_size]]) -> retval\n.   @brief Creates an instance of the OCRBeamSearchDecoder class. Initializes HMMDecoder.\n.   \n.   @param classifier The character classifier with built in feature extractor.\n.   \n.   @param vocabulary The language vocabulary (chars when ASCII English text). vocabulary.size()\n.   must be equal to the number of classes of the classifier.\n.   \n.   @param transition_probabilities_table Table with transition probabilities between character\n.   pairs. cols == rows == vocabulary.size().\n.   \n.   @param emission_probabilities_table Table with observation emission probabilities. cols ==\n.   rows == vocabulary.size().\n.   \n.   @param mode HMM Decoding algorithm. Only OCR_DECODER_VITERBI is available for the moment\n.   (<http://en.wikipedia.org/wiki/Viterbi_algorithm>).\n.   \n.   @param beam_size Size of the beam in Beam Search algorithm.\n\n\n\ncreate(filename, vocabulary, transition_probabilities_table, emission_probabilities_table[, mode[, beam_size]]) -> retval\n.   @brief Creates an instance of the OCRBeamSearchDecoder class. Initializes HMMDecoder from the specified path.\n.   \n.   @overload'
        pass
    
    def run(self, image, min_confidence, component_level=None):
        'run(image, min_confidence[, component_level]) -> retval\n.   @brief Recognize text using Beam Search.\n.   \n.   Takes image on input and returns recognized text in the output_text parameter. Optionally\n.   provides also the Rects for individual text elements found (e.g. words), and the list of those\n.   text elements with their confidence values.\n.   \n.   @param image Input binary image CV_8UC1 with a single text line (or word).\n.   \n.   @param output_text Output text. Most likely character sequence found by the HMM decoder.\n.   \n.   @param component_rects If provided the method will output a list of Rects for the individual\n.   text elements found (e.g. words).\n.   \n.   @param component_texts If provided the method will output a list of text strings for the\n.   recognition of individual text elements found (e.g. words).\n.   \n.   @param component_confidences If provided the method will output a list of confidence values\n.   for the recognition of individual text elements found (e.g. words).\n.   \n.   @param component_level Only OCR_LEVEL_WORD is supported.\n\n\n\nrun(image, mask, min_confidence[, component_level]) -> retval\n.'
        pass
    

class text_OCRBeamSearchDecoder_ClassifierCallback(_mod_builtins.object):
    __class__ = text_OCRBeamSearchDecoder_ClassifierCallback
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class text_OCRHMMDecoder(text_BaseOCR):
    __class__ = text_OCRHMMDecoder
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, classifier, vocabulary, transition_probabilities_table, emission_probabilities_table, mode=None):
        'create(classifier, vocabulary, transition_probabilities_table, emission_probabilities_table[, mode]) -> retval\n.   @brief Creates an instance of the OCRHMMDecoder class. Initializes HMMDecoder.\n.   \n.   @param classifier The character classifier with built in feature extractor.\n.   \n.   @param vocabulary The language vocabulary (chars when ascii english text). vocabulary.size()\n.   must be equal to the number of classes of the classifier.\n.   \n.   @param transition_probabilities_table Table with transition probabilities between character\n.   pairs. cols == rows == vocabulary.size().\n.   \n.   @param emission_probabilities_table Table with observation emission probabilities. cols ==\n.   rows == vocabulary.size().\n.   \n.   @param mode HMM Decoding algorithm. Only OCR_DECODER_VITERBI is available for the moment\n.   (<http://en.wikipedia.org/wiki/Viterbi_algorithm>).\n\n\n\ncreate(filename, vocabulary, transition_probabilities_table, emission_probabilities_table[, mode[, classifier]]) -> retval\n.   @brief Creates an instance of the OCRHMMDecoder class. Loads and initializes HMMDecoder from the specified path\n.   \n.   @overload'
        pass
    
    def run(self, image, min_confidence, component_level=None):
        'run(image, min_confidence[, component_level]) -> retval\n.   @brief Recognize text using HMM.\n.   \n.   Takes an image and a mask (where each connected component corresponds to a segmented character)\n.   on input and returns recognized text in the output_text parameter. Optionally\n.   provides also the Rects for individual text elements found (e.g. words), and the list of those\n.   text elements with their confidence values.\n.   \n.   @param image Input image CV_8UC1 or CV_8UC3 with a single text line (or word).\n.   @param mask Input binary image CV_8UC1 same size as input image. Each connected component in mask corresponds to a segmented character in the input image.\n.   \n.   @param output_text Output text. Most likely character sequence found by the HMM decoder.\n.   \n.   @param component_rects If provided the method will output a list of Rects for the individual\n.   text elements found (e.g. words).\n.   \n.   @param component_texts If provided the method will output a list of text strings for the\n.   recognition of individual text elements found (e.g. words).\n.   \n.   @param component_confidences If provided the method will output a list of confidence values\n.   for the recognition of individual text elements found (e.g. words).\n.   \n.   @param component_level Only OCR_LEVEL_WORD is supported.\n\n\n\nrun(image, mask, min_confidence[, component_level]) -> retval\n.'
        pass
    

class text_OCRHMMDecoder_ClassifierCallback(_mod_builtins.object):
    __class__ = text_OCRHMMDecoder_ClassifierCallback
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class text_OCRTesseract(text_BaseOCR):
    __class__ = text_OCRTesseract
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, datapath=None, language=None, char_whitelist=None, oem=None, psmode=None):
        'create([, datapath[, language[, char_whitelist[, oem[, psmode]]]]]) -> retval\n.   @brief Creates an instance of the OCRTesseract class. Initializes Tesseract.\n.   \n.   @param datapath the name of the parent directory of tessdata ended with "/", or NULL to use the\n.   system\'s default directory.\n.   @param language an ISO 639-3 code or NULL will default to "eng".\n.   @param char_whitelist specifies the list of characters used for recognition. NULL defaults to\n.   "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".\n.   @param oem tesseract-ocr offers different OCR Engine Modes (OEM), by default\n.   tesseract::OEM_DEFAULT is used. See the tesseract-ocr API documentation for other possible\n.   values.\n.   @param psmode tesseract-ocr offers different Page Segmentation Modes (PSM) tesseract::PSM_AUTO\n.   (fully automatic layout analysis) is used. See the tesseract-ocr API documentation for other\n.   possible values.'
        pass
    
    def run(self, image, min_confidence, component_level=None):
        'run(image, min_confidence[, component_level]) -> retval\n.   @brief Recognize text using the tesseract-ocr API.\n.   \n.   Takes image on input and returns recognized text in the output_text parameter. Optionally\n.   provides also the Rects for individual text elements found (e.g. words), and the list of those\n.   text elements with their confidence values.\n.   \n.   @param image Input image CV_8UC1 or CV_8UC3\n.   @param output_text Output text of the tesseract-ocr.\n.   @param component_rects If provided the method will output a list of Rects for the individual\n.   text elements found (e.g. words or text lines).\n.   @param component_texts If provided the method will output a list of text strings for the\n.   recognition of individual text elements found (e.g. words or text lines).\n.   @param component_confidences If provided the method will output a list of confidence values\n.   for the recognition of individual text elements found (e.g. words or text lines).\n.   @param component_level OCR_LEVEL_WORD (by default), or OCR_LEVEL_TEXTLINE.\n\n\n\nrun(image, mask, min_confidence[, component_level]) -> retval\n.'
        pass
    
    def setWhiteList(self, char_whitelist):
        'setWhiteList(char_whitelist) -> None\n.'
        pass
    

class text_TextDetector(_mod_builtins.object):
    __class__ = text_TextDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def detect(self, inputImage):
        'detect(inputImage) -> Bbox, confidence\n.   @brief Method that provides a quick and simple interface to detect text inside an image\n.   \n.   @param inputImage an image to process\n.   @param Bbox a vector of Rect that will store the detected word bounding box\n.   @param confidence a vector of float that will be updated with the confidence the classifier has for the selected bounding box'
        pass
    

class text_TextDetectorCNN(text_TextDetector):
    __class__ = text_TextDetectorCNN
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, modelArchFilename, modelWeightsFilename):
        'create(modelArchFilename, modelWeightsFilename) -> retval\n.   @overload'
        pass
    
    def detect(self, inputImage):
        'detect(inputImage) -> Bbox, confidence\n.   @overload\n.   \n.   @param inputImage an image expected to be a CV_U8C3 of any size\n.   @param Bbox a vector of Rect that will store the detected word bounding box\n.   @param confidence a vector of float that will be updated with the confidence the classifier has for the selected bounding box'
        pass
    

def textureFlattening(src, mask, dst=None, low_threshold=None, high_threshold=None, kernel_size=None):
    "textureFlattening(src, mask[, dst[, low_threshold[, high_threshold[, kernel_size]]]]) -> dst\n.   @brief By retaining only the gradients at edge locations, before integrating with the Poisson solver, one\n.   washes out the texture of the selected region, giving its contents a flat aspect. Here Canny Edge\n.   Detector is used.\n.   \n.   @param src Input 8-bit 3-channel image.\n.   @param mask Input 8-bit 1 or 3-channel image.\n.   @param dst Output image with the same size and type as src.\n.   @param low_threshold Range from 0 to 100.\n.   @param high_threshold Value \\> 100.\n.   @param kernel_size The size of the Sobel kernel to be used.\n.   \n.   **NOTE:**\n.   \n.   The algorithm assumes that the color of the source image is close to that of the destination. This\n.   assumption means that when the colors don't match, the source image color gets tinted toward the\n.   color of the destination image."
    pass

def threshold(src, thresh, maxval, type, dst=None):
    "threshold(src, thresh, maxval, type[, dst]) -> retval, dst\n.   @brief Applies a fixed-level threshold to each array element.\n.   \n.   The function applies fixed-level thresholding to a multiple-channel array. The function is typically\n.   used to get a bi-level (binary) image out of a grayscale image ( #compare could be also used for\n.   this purpose) or for removing a noise, that is, filtering out pixels with too small or too large\n.   values. There are several types of thresholding supported by the function. They are determined by\n.   type parameter.\n.   \n.   Also, the special values #THRESH_OTSU or #THRESH_TRIANGLE may be combined with one of the\n.   above values. In these cases, the function determines the optimal threshold value using the Otsu's\n.   or Triangle algorithm and uses it instead of the specified thresh.\n.   \n.   @note Currently, the Otsu's and Triangle methods are implemented only for 8-bit single-channel images.\n.   \n.   @param src input array (multiple-channel, 8-bit or 32-bit floating point).\n.   @param dst output array of the same size  and type and the same number of channels as src.\n.   @param thresh threshold value.\n.   @param maxval maximum value to use with the #THRESH_BINARY and #THRESH_BINARY_INV thresholding\n.   types.\n.   @param type thresholding type (see #ThresholdTypes).\n.   @return the computed threshold value if Otsu's or Triangle methods used.\n.   \n.   @sa  adaptiveThreshold, findContours, compare, min, max"
    pass

def trace(mtx):
    'trace(mtx) -> retval\n.   @brief Returns the trace of a matrix.\n.   \n.   The function cv::trace returns the sum of the diagonal elements of the\n.   matrix mtx .\n.   \\f[\\mathrm{tr} ( \\texttt{mtx} ) =  \\sum _i  \\texttt{mtx} (i,i)\\f]\n.   @param mtx input matrix.'
    pass

def transform(src, m, dst=None):
    'transform(src, m[, dst]) -> dst\n.   @brief Performs the matrix transformation of every array element.\n.   \n.   The function cv::transform performs the matrix transformation of every\n.   element of the array src and stores the results in dst :\n.   \\f[\\texttt{dst} (I) =  \\texttt{m} \\cdot \\texttt{src} (I)\\f]\n.   (when m.cols=src.channels() ), or\n.   \\f[\\texttt{dst} (I) =  \\texttt{m} \\cdot [ \\texttt{src} (I); 1]\\f]\n.   (when m.cols=src.channels()+1 )\n.   \n.   Every element of the N -channel array src is interpreted as N -element\n.   vector that is transformed using the M x N or M x (N+1) matrix m to\n.   M-element vector - the corresponding element of the output array dst .\n.   \n.   The function may be used for geometrical transformation of\n.   N -dimensional points, arbitrary linear color space transformation (such\n.   as various kinds of RGB to YUV transforms), shuffling the image\n.   channels, and so forth.\n.   @param src input array that must have as many channels (1 to 4) as\n.   m.cols or m.cols-1.\n.   @param dst output array of the same size and depth as src; it has as\n.   many channels as m.rows.\n.   @param m transformation 2x2 or 2x3 floating-point matrix.\n.   @sa perspectiveTransform, getAffineTransform, estimateAffine2D, warpAffine, warpPerspective'
    pass

def transpose(src, dst=None):
    'transpose(src[, dst]) -> dst\n.   @brief Transposes a matrix.\n.   \n.   The function cv::transpose transposes the matrix src :\n.   \\f[\\texttt{dst} (i,j) =  \\texttt{src} (j,i)\\f]\n.   @note No complex conjugation is done in case of a complex matrix. It\n.   should be done separately if needed.\n.   @param src input array.\n.   @param dst output array of the same type as src.'
    pass

def triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D=None):
    'triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2[, points4D]) -> points4D\n.   @brief Reconstructs points by triangulation.\n.   \n.   @param projMatr1 3x4 projection matrix of the first camera.\n.   @param projMatr2 3x4 projection matrix of the second camera.\n.   @param projPoints1 2xN array of feature points in the first image. In case of c++ version it can\n.   be also a vector of feature points or two-channel matrix of size 1xN or Nx1.\n.   @param projPoints2 2xN array of corresponding points in the second image. In case of c++ version\n.   it can be also a vector of feature points or two-channel matrix of size 1xN or Nx1.\n.   @param points4D 4xN array of reconstructed points in homogeneous coordinates.\n.   \n.   The function reconstructs 3-dimensional points (in homogeneous coordinates) by using their\n.   observations with a stereo camera. Projections matrices can be obtained from stereoRectify.\n.   \n.   @note\n.   Keep in mind that all input data should be of float type in order for this function to work.\n.   \n.   @sa\n.   reprojectImageTo3D'
    pass

def undistort(src, cameraMatrix, distCoeffs, dst=None, newCameraMatrix=None):
    'undistort(src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]) -> dst\n.   @brief Transforms an image to compensate for lens distortion.\n.   \n.   The function transforms an image to compensate radial and tangential lens distortion.\n.   \n.   The function is simply a combination of #initUndistortRectifyMap (with unity R ) and #remap\n.   (with bilinear interpolation). See the former function for details of the transformation being\n.   performed.\n.   \n.   Those pixels in the destination image, for which there is no correspondent pixels in the source\n.   image, are filled with zeros (black color).\n.   \n.   A particular subset of the source image that will be visible in the corrected image can be regulated\n.   by newCameraMatrix. You can use #getOptimalNewCameraMatrix to compute the appropriate\n.   newCameraMatrix depending on your requirements.\n.   \n.   The camera matrix and the distortion parameters can be determined using #calibrateCamera. If\n.   the resolution of images is different from the resolution used at the calibration stage, \\f$f_x,\n.   f_y, c_x\\f$ and \\f$c_y\\f$ need to be scaled accordingly, while the distortion coefficients remain\n.   the same.\n.   \n.   @param src Input (distorted) image.\n.   @param dst Output (corrected) image that has the same size and type as src .\n.   @param cameraMatrix Input camera matrix \\f$A = \\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$\n.   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.\n.   @param newCameraMatrix Camera matrix of the distorted image. By default, it is the same as\n.   cameraMatrix but you may additionally scale and shift the result by using a different matrix.'
    pass

def undistortPoints(src, cameraMatrix, distCoeffs, dst=None, R=None, P=None):
    'undistortPoints(src, cameraMatrix, distCoeffs[, dst[, R[, P]]]) -> dst\n.   @brief Computes the ideal point coordinates from the observed point coordinates.\n.   \n.   The function is similar to #undistort and #initUndistortRectifyMap but it operates on a\n.   sparse set of points instead of a raster image. Also the function performs a reverse transformation\n.   to projectPoints. In case of a 3D object, it does not reconstruct its 3D coordinates, but for a\n.   planar object, it does, up to a translation vector, if the proper R is specified.\n.   \n.   For each observed point coordinate \\f$(u, v)\\f$ the function computes:\n.   \\f[\n.   \\begin{array}{l}\n.   x^{"}  \\leftarrow (u - c_x)/f_x  \\\\\n.   y^{"}  \\leftarrow (v - c_y)/f_y  \\\\\n.   (x\',y\') = undistort(x^{"},y^{"}, \\texttt{distCoeffs}) \\\\\n.   {[X\\,Y\\,W]} ^T  \\leftarrow R*[x\' \\, y\' \\, 1]^T  \\\\\n.   x  \\leftarrow X/W  \\\\\n.   y  \\leftarrow Y/W  \\\\\n.   \\text{only performed if P is specified:} \\\\\n.   u\'  \\leftarrow x {f\'}_x + {c\'}_x  \\\\\n.   v\'  \\leftarrow y {f\'}_y + {c\'}_y\n.   \\end{array}\n.   \\f]\n.   \n.   where *undistort* is an approximate iterative algorithm that estimates the normalized original\n.   point coordinates out of the normalized distorted point coordinates ("normalized" means that the\n.   coordinates do not depend on the camera matrix).\n.   \n.   The function can be used for both a stereo camera head or a monocular camera (when R is empty).\n.   \n.   @param src Observed point coordinates, 1xN or Nx1 2-channel (CV_32FC2 or CV_64FC2).\n.   @param dst Output ideal point coordinates after undistortion and reverse perspective\n.   transformation. If matrix P is identity or omitted, dst will contain normalized point coordinates.\n.   @param cameraMatrix Camera matrix \\f$\\vecthreethree{f_x}{0}{c_x}{0}{f_y}{c_y}{0}{0}{1}\\f$ .\n.   @param distCoeffs Input vector of distortion coefficients\n.   \\f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6[, s_1, s_2, s_3, s_4[, \\tau_x, \\tau_y]]]])\\f$\n.   of 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are assumed.\n.   @param R Rectification transformation in the object space (3x3 matrix). R1 or R2 computed by\n.   #stereoRectify can be passed here. If the matrix is empty, the identity transformation is used.\n.   @param P New camera matrix (3x3) or new projection matrix (3x4) \\f$\\begin{bmatrix} {f\'}_x & 0 & {c\'}_x & t_x \\\\ 0 & {f\'}_y & {c\'}_y & t_y \\\\ 0 & 0 & 1 & t_z \\end{bmatrix}\\f$. P1 or P2 computed by\n.   #stereoRectify can be passed here. If the matrix is empty, the identity new camera matrix is used.'
    pass

def undistortPointsIter(src, cameraMatrix, distCoeffs, R, P, criteria, dst=None):
    'undistortPointsIter(src, cameraMatrix, distCoeffs, R, P, criteria[, dst]) -> dst\n.   @overload\n.   @note Default version of #undistortPoints does 5 iterations to compute undistorted points.'
    pass

def useOpenVX():
    'useOpenVX() -> retval\n.'
    pass

def useOptimized():
    'useOptimized() -> retval\n.   @brief Returns the status of optimized code usage.\n.   \n.   The function returns true if the optimized code is enabled. Otherwise, it returns false.'
    pass

def validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp=None):
    'validateDisparity(disparity, cost, minDisparity, numberOfDisparities[, disp12MaxDisp]) -> disparity\n.'
    pass

def vconcat(src, dst=None):
    'vconcat(src[, dst]) -> dst\n.   @overload\n.   @code{.cpp}\n.   std::vector<cv::Mat> matrices = { cv::Mat(1, 4, CV_8UC1, cv::Scalar(1)),\n.   cv::Mat(1, 4, CV_8UC1, cv::Scalar(2)),\n.   cv::Mat(1, 4, CV_8UC1, cv::Scalar(3)),};\n.   \n.   cv::Mat out;\n.   cv::vconcat( matrices, out );\n.   //out:\n.   //[1,   1,   1,   1;\n.   // 2,   2,   2,   2;\n.   // 3,   3,   3,   3]\n.   @endcode\n.   @param src input array or vector of matrices. all of the matrices must have the same number of cols and the same depth\n.   @param dst output array. It has the same number of cols and depth as the src, and the sum of rows of the src.\n.   same depth.'
    pass

def waitKey(delay=None):
    'waitKey([, delay]) -> retval\n.   @brief Waits for a pressed key.\n.   \n.   The function waitKey waits for a key event infinitely (when \\f$\\texttt{delay}\\leq 0\\f$ ) or for delay\n.   milliseconds, when it is positive. Since the OS has a minimum time between switching threads, the\n.   function will not wait exactly delay ms, it will wait at least delay ms, depending on what else is\n.   running on your computer at that time. It returns the code of the pressed key or -1 if no key was\n.   pressed before the specified time had elapsed.\n.   \n.   @note\n.   \n.   This function is the only method in HighGUI that can fetch and handle events, so it needs to be\n.   called periodically for normal event processing unless HighGUI is used within an environment that\n.   takes care of event processing.\n.   \n.   @note\n.   \n.   The function only works if there is at least one HighGUI window created and the window is active.\n.   If there are several HighGUI windows, any of them can be active.\n.   \n.   @param delay Delay in milliseconds. 0 is the special value that means "forever".'
    pass

def waitKeyEx(delay=None):
    'waitKeyEx([, delay]) -> retval\n.   @brief Similar to #waitKey, but returns full key code.\n.   \n.   @note\n.   \n.   Key code is implementation specific and depends on used backend: QT/GTK/Win32/etc'
    pass

def warpAffine(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None):
    'warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst\n.   @brief Applies an affine transformation to an image.\n.   \n.   The function warpAffine transforms the source image using the specified matrix:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\texttt{src} ( \\texttt{M} _{11} x +  \\texttt{M} _{12} y +  \\texttt{M} _{13}, \\texttt{M} _{21} x +  \\texttt{M} _{22} y +  \\texttt{M} _{23})\\f]\n.   \n.   when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted\n.   with #invertAffineTransform and then put in the formula above instead of M. The function cannot\n.   operate in-place.\n.   \n.   @param src input image.\n.   @param dst output image that has the size dsize and the same type as src .\n.   @param M \\f$2\\times 3\\f$ transformation matrix.\n.   @param dsize size of the output image.\n.   @param flags combination of interpolation methods (see #InterpolationFlags) and the optional\n.   flag #WARP_INVERSE_MAP that means that M is the inverse transformation (\n.   \\f$\\texttt{dst}\\rightarrow\\texttt{src}\\f$ ).\n.   @param borderMode pixel extrapolation method (see #BorderTypes); when\n.   borderMode=#BORDER_TRANSPARENT, it means that the pixels in the destination image corresponding to\n.   the "outliers" in the source image are not modified by the function.\n.   @param borderValue value used in case of a constant border; by default, it is 0.\n.   \n.   @sa  warpPerspective, resize, remap, getRectSubPix, transform'
    pass

def warpPerspective(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None):
    'warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst\n.   @brief Applies a perspective transformation to an image.\n.   \n.   The function warpPerspective transforms the source image using the specified matrix:\n.   \n.   \\f[\\texttt{dst} (x,y) =  \\texttt{src} \\left ( \\frac{M_{11} x + M_{12} y + M_{13}}{M_{31} x + M_{32} y + M_{33}} ,\n.   \\frac{M_{21} x + M_{22} y + M_{23}}{M_{31} x + M_{32} y + M_{33}} \\right )\\f]\n.   \n.   when the flag #WARP_INVERSE_MAP is set. Otherwise, the transformation is first inverted with invert\n.   and then put in the formula above instead of M. The function cannot operate in-place.\n.   \n.   @param src input image.\n.   @param dst output image that has the size dsize and the same type as src .\n.   @param M \\f$3\\times 3\\f$ transformation matrix.\n.   @param dsize size of the output image.\n.   @param flags combination of interpolation methods (#INTER_LINEAR or #INTER_NEAREST) and the\n.   optional flag #WARP_INVERSE_MAP, that sets M as the inverse transformation (\n.   \\f$\\texttt{dst}\\rightarrow\\texttt{src}\\f$ ).\n.   @param borderMode pixel extrapolation method (#BORDER_CONSTANT or #BORDER_REPLICATE).\n.   @param borderValue value used in case of a constant border; by default, it equals 0.\n.   \n.   @sa  warpAffine, resize, remap, getRectSubPix, perspectiveTransform'
    pass

def warpPolar(src, dsize, center, maxRadius, flags, dst=None):
    'warpPolar(src, dsize, center, maxRadius, flags[, dst]) -> dst\n.   \\brief Remaps an image to polar or semilog-polar coordinates space\n.   \n.   @anchor polar_remaps_reference_image\n.   ![Polar remaps reference](pics/polar_remap_doc.png)\n.   \n.   Transform the source image using the following transformation:\n.   \\f[\n.   dst(\\rho , \\phi ) = src(x,y)\n.   \\f]\n.   \n.   where\n.   \\f[\n.   \\begin{array}{l}\n.   \\vec{I} = (x - center.x, \\;y - center.y) \\\\\n.   \\phi = Kangle \\cdot \\texttt{angle} (\\vec{I}) \\\\\n.   \\rho = \\left\\{\\begin{matrix}\n.   Klin \\cdot \\texttt{magnitude} (\\vec{I}) & default \\\\\n.   Klog \\cdot log_e(\\texttt{magnitude} (\\vec{I})) & if \\; semilog \\\\\n.   \\end{matrix}\\right.\n.   \\end{array}\n.   \\f]\n.   \n.   and\n.   \\f[\n.   \\begin{array}{l}\n.   Kangle = dsize.height / 2\\Pi \\\\\n.   Klin = dsize.width / maxRadius \\\\\n.   Klog = dsize.width / log_e(maxRadius) \\\\\n.   \\end{array}\n.   \\f]\n.   \n.   \n.   \\par Linear vs semilog mapping\n.   \n.   Polar mapping can be linear or semi-log. Add one of #WarpPolarMode to `flags` to specify the polar mapping mode.\n.   \n.   Linear is the default mode.\n.   \n.   The semilog mapping emulates the human "foveal" vision that permit very high acuity on the line of sight (central vision)\n.   in contrast to peripheral vision where acuity is minor.\n.   \n.   \\par Option on `dsize`:\n.   \n.   - if both values in `dsize <=0 ` (default),\n.   the destination image will have (almost) same area of source bounding circle:\n.   \\f[\\begin{array}{l}\n.   dsize.area  \\leftarrow (maxRadius^2 \\cdot \\Pi) \\\\\n.   dsize.width = \\texttt{cvRound}(maxRadius) \\\\\n.   dsize.height = \\texttt{cvRound}(maxRadius \\cdot \\Pi) \\\\\n.   \\end{array}\\f]\n.   \n.   \n.   - if only `dsize.height <= 0`,\n.   the destination image area will be proportional to the bounding circle area but scaled by `Kx * Kx`:\n.   \\f[\\begin{array}{l}\n.   dsize.height = \\texttt{cvRound}(dsize.width \\cdot \\Pi) \\\\\n.   \\end{array}\n.   \\f]\n.   \n.   - if both values in `dsize > 0 `,\n.   the destination image will have the given size therefore the area of the bounding circle will be scaled to `dsize`.\n.   \n.   \n.   \\par Reverse mapping\n.   \n.   You can get reverse mapping adding #WARP_INVERSE_MAP to `flags`\n.   \\snippet polar_transforms.cpp InverseMap\n.   \n.   In addiction, to calculate the original coordinate from a polar mapped coordinate \\f$(rho, phi)->(x, y)\\f$:\n.   \\snippet polar_transforms.cpp InverseCoordinate\n.   \n.   @param src Source image.\n.   @param dst Destination image. It will have same type as src.\n.   @param dsize The destination image size (see description for valid options).\n.   @param center The transformation center.\n.   @param maxRadius The radius of the bounding circle to transform. It determines the inverse magnitude scale parameter too.\n.   @param flags A combination of interpolation methods, #InterpolationFlags + #WarpPolarMode.\n.   - Add #WARP_POLAR_LINEAR to select linear polar mapping (default)\n.   - Add #WARP_POLAR_LOG to select semilog polar mapping\n.   - Add #WARP_INVERSE_MAP for reverse mapping.\n.   @note\n.   -  The function can not operate in-place.\n.   -  To calculate magnitude and angle in degrees #cartToPolar is used internally thus angles are measured from 0 to 360 with accuracy about 0.3 degrees.\n.   -  This function uses #remap. Due to current implementation limitations the size of an input and output images should be less than 32767x32767.\n.   \n.   @sa cv::remap'
    pass

def watershed(image, markers):
    'watershed(image, markers) -> markers\n.   @brief Performs a marker-based image segmentation using the watershed algorithm.\n.   \n.   The function implements one of the variants of watershed, non-parametric marker-based segmentation\n.   algorithm, described in @cite Meyer92 .\n.   \n.   Before passing the image to the function, you have to roughly outline the desired regions in the\n.   image markers with positive (\\>0) indices. So, every region is represented as one or more connected\n.   components with the pixel values 1, 2, 3, and so on. Such markers can be retrieved from a binary\n.   mask using #findContours and #drawContours (see the watershed.cpp demo). The markers are "seeds" of\n.   the future image regions. All the other pixels in markers , whose relation to the outlined regions\n.   is not known and should be defined by the algorithm, should be set to 0\'s. In the function output,\n.   each pixel in markers is set to a value of the "seed" components or to -1 at boundaries between the\n.   regions.\n.   \n.   @note Any two neighbor connected components are not necessarily separated by a watershed boundary\n.   (-1\'s pixels); for example, they can touch each other in the initial marker image passed to the\n.   function.\n.   \n.   @param image Input 8-bit 3-channel image.\n.   @param markers Input/output 32-bit single-channel image (map) of markers. It should have the same\n.   size as image .\n.   \n.   @sa findContours\n.   \n.   @ingroup imgproc_misc'
    pass

class xfeatures2d_BoostDesc(Feature2D):
    __class__ = xfeatures2d_BoostDesc
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, desc=None, use_scale_orientation=None, scale_factor=None):
        'create([, desc[, use_scale_orientation[, scale_factor]]]) -> retval\n.'
        pass
    
    def getScaleFactor(self):
        'getScaleFactor() -> retval\n.'
        pass
    
    def getUseScaleOrientation(self):
        'getUseScaleOrientation() -> retval\n.'
        pass
    
    def setScaleFactor(self, scale_factor):
        'setScaleFactor(scale_factor) -> None\n.'
        pass
    
    def setUseScaleOrientation(self, use_scale_orientation):
        'setUseScaleOrientation(use_scale_orientation) -> None\n.'
        pass
    

class xfeatures2d_BriefDescriptorExtractor(Feature2D):
    __class__ = xfeatures2d_BriefDescriptorExtractor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, bytes=None, use_orientation=None):
        'create([, bytes[, use_orientation]]) -> retval\n.'
        pass
    

class xfeatures2d_DAISY(Feature2D):
    __class__ = xfeatures2d_DAISY
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, radius=None, q_radius=None, q_theta=None, q_hist=None, norm=None, H=None, interpolation=None, use_orientation=None):
        'create([, radius[, q_radius[, q_theta[, q_hist[, norm[, H[, interpolation[, use_orientation]]]]]]]]) -> retval\n.'
        pass
    

class xfeatures2d_FREAK(Feature2D):
    __class__ = xfeatures2d_FREAK
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, orientationNormalized=None, scaleNormalized=None, patternScale=None, nOctaves=None, selectedPairs=None):
        'create([, orientationNormalized[, scaleNormalized[, patternScale[, nOctaves[, selectedPairs]]]]]) -> retval\n.   @param orientationNormalized Enable orientation normalization.\n.   @param scaleNormalized Enable scale normalization.\n.   @param patternScale Scaling of the description pattern.\n.   @param nOctaves Number of octaves covered by the detected keypoints.\n.   @param selectedPairs (Optional) user defined selected pairs indexes,'
        pass
    

class xfeatures2d_HarrisLaplaceFeatureDetector(Feature2D):
    __class__ = xfeatures2d_HarrisLaplaceFeatureDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, numOctaves=None, corn_thresh=None, DOG_thresh=None, maxCorners=None, num_layers=None):
        'create([, numOctaves[, corn_thresh[, DOG_thresh[, maxCorners[, num_layers]]]]]) -> retval\n.   * @brief Creates a new implementation instance.\n.   *\n.   * @param numOctaves the number of octaves in the scale-space pyramid\n.   * @param corn_thresh the threshold for the Harris cornerness measure\n.   * @param DOG_thresh the threshold for the Difference-of-Gaussians scale selection\n.   * @param maxCorners the maximum number of corners to consider\n.   * @param num_layers the number of intermediate scales per octave'
        pass
    

class xfeatures2d_LATCH(Feature2D):
    __class__ = xfeatures2d_LATCH
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, bytes=None, rotationInvariance=None, half_ssd_size=None, sigma=None):
        'create([, bytes[, rotationInvariance[, half_ssd_size[, sigma]]]]) -> retval\n.'
        pass
    

class xfeatures2d_LUCID(Feature2D):
    __class__ = xfeatures2d_LUCID
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, lucid_kernel=None, blur_kernel=None):
        'create([, lucid_kernel[, blur_kernel]]) -> retval\n.   * @param lucid_kernel kernel for descriptor construction, where 1=3x3, 2=5x5, 3=7x7 and so forth\n.   * @param blur_kernel kernel for blurring image prior to descriptor construction, where 1=3x3, 2=5x5, 3=7x7 and so forth'
        pass
    

class xfeatures2d_MSDDetector(Feature2D):
    __class__ = xfeatures2d_MSDDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class xfeatures2d_PCTSignatures(Algorithm):
    __class__ = xfeatures2d_PCTSignatures
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeSignature(self, image, signature=None):
        'computeSignature(image[, signature]) -> signature\n.   * @brief Computes signature of given image.\n.   * @param image Input image of CV_8U type.\n.   * @param signature Output computed signature.'
        pass
    
    def computeSignatures(self, images, signatures):
        'computeSignatures(images, signatures) -> None\n.   * @brief Computes signatures for multiple images in parallel.\n.   * @param images Vector of input images of CV_8U type.\n.   * @param signatures Vector of computed signatures.'
        pass
    
    @classmethod
    def create(cls, initSampleCount=None, initSeedCount=None, pointDistribution=None):
        'create([, initSampleCount[, initSeedCount[, pointDistribution]]]) -> retval\n.   * @brief Creates PCTSignatures algorithm using sample and seed count.\n.   *       It generates its own sets of sampling points and clusterization seed indexes.\n.   * @param initSampleCount Number of points used for image sampling.\n.   * @param initSeedCount Number of initial clusterization seeds.\n.   *       Must be lower or equal to initSampleCount\n.   * @param pointDistribution Distribution of generated points. Default: UNIFORM.\n.   *       Available: UNIFORM, REGULAR, NORMAL.\n.   * @return Created algorithm.\n\n\n\ncreate(initSamplingPoints, initSeedCount) -> retval\n.   * @brief Creates PCTSignatures algorithm using pre-generated sampling points\n.   *       and number of clusterization seeds. It uses the provided\n.   *       sampling points and generates its own clusterization seed indexes.\n.   * @param initSamplingPoints Sampling points used in image sampling.\n.   * @param initSeedCount Number of initial clusterization seeds.\n.   *       Must be lower or equal to initSamplingPoints.size().\n.   * @return Created algorithm.\n\n\n\ncreate(initSamplingPoints, initClusterSeedIndexes) -> retval\n.   * @brief Creates PCTSignatures algorithm using pre-generated sampling points\n.   *       and clusterization seeds indexes.\n.   * @param initSamplingPoints Sampling points used in image sampling.\n.   * @param initClusterSeedIndexes Indexes of initial clusterization seeds.\n.   *       Its size must be lower or equal to initSamplingPoints.size().\n.   * @return Created algorithm.'
        pass
    
    @classmethod
    def drawSignature(cls, source, signature, result=None, radiusToShorterSideRatio=None, borderThickness=None):
        'drawSignature(source, signature[, result[, radiusToShorterSideRatio[, borderThickness]]]) -> result\n.   * @brief Draws signature in the source image and outputs the result.\n.   *       Signatures are visualized as a circle\n.   *       with radius based on signature weight\n.   *       and color based on signature color.\n.   *       Contrast and entropy are not visualized.\n.   * @param source Source image.\n.   * @param signature Image signature.\n.   * @param result Output result.\n.   * @param radiusToShorterSideRatio Determines maximal radius of signature in the output image.\n.   * @param borderThickness Border thickness of the visualized signature.'
        pass
    
    @classmethod
    def generateInitPoints(cls, initPoints, count, pointDistribution):
        'generateInitPoints(initPoints, count, pointDistribution) -> None\n.   * @brief Generates initial sampling points according to selected point distribution.\n.   * @param initPoints Output vector where the generated points will be saved.\n.   * @param count Number of points to generate.\n.   * @param pointDistribution Point distribution selector.\n.   *       Available: UNIFORM, REGULAR, NORMAL.\n.   * @note Generated coordinates are in range [0..1)'
        pass
    
    def getClusterMinSize(self):
        'getClusterMinSize() -> retval\n.   * @brief This parameter multiplied by the index of iteration gives lower limit for cluster size.\n.   *       Clusters containing fewer points than specified by the limit have their centroid dismissed\n.   *       and points are reassigned.'
        pass
    
    def getDistanceFunction(self):
        'getDistanceFunction() -> retval\n.   * @brief Distance function selector used for measuring distance between two points in k-means.'
        pass
    
    def getDropThreshold(self):
        'getDropThreshold() -> retval\n.   * @brief Remove centroids in k-means whose weight is lesser or equal to given threshold.'
        pass
    
    def getGrayscaleBits(self):
        'getGrayscaleBits() -> retval\n.   * @brief Color resolution of the greyscale bitmap represented in allocated bits\n.   *       (i.e., value 4 means that 16 shades of grey are used).\n.   *       The greyscale bitmap is used for computing contrast and entropy values.'
        pass
    
    def getInitSeedCount(self):
        'getInitSeedCount() -> retval\n.   * @brief Number of initial seeds (initial number of clusters) for the k-means algorithm.'
        pass
    
    def getInitSeedIndexes(self):
        'getInitSeedIndexes() -> retval\n.   * @brief Initial seeds (initial number of clusters) for the k-means algorithm.'
        pass
    
    def getIterationCount(self):
        'getIterationCount() -> retval\n.   * @brief Number of iterations of the k-means clustering.\n.   *       We use fixed number of iterations, since the modified clustering is pruning clusters\n.   *       (not iteratively refining k clusters).'
        pass
    
    def getJoiningDistance(self):
        'getJoiningDistance() -> retval\n.   * @brief Threshold euclidean distance between two centroids.\n.   *       If two cluster centers are closer than this distance,\n.   *       one of the centroid is dismissed and points are reassigned.'
        pass
    
    def getMaxClustersCount(self):
        'getMaxClustersCount() -> retval\n.   * @brief Maximal number of generated clusters. If the number is exceeded,\n.   *       the clusters are sorted by their weights and the smallest clusters are cropped.'
        pass
    
    def getSampleCount(self):
        'getSampleCount() -> retval\n.   * @brief Number of initial samples taken from the image.'
        pass
    
    def getSamplingPoints(self):
        'getSamplingPoints() -> retval\n.   * @brief Initial samples taken from the image.\n.   *       These sampled features become the input for clustering.'
        pass
    
    def getWeightA(self):
        'getWeightA() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightB(self):
        'getWeightB() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightContrast(self):
        'getWeightContrast() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightEntropy(self):
        'getWeightEntropy() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightL(self):
        'getWeightL() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightX(self):
        'getWeightX() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWeightY(self):
        'getWeightY() -> retval\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def getWindowRadius(self):
        'getWindowRadius() -> retval\n.   * @brief Size of the texture sampling window used to compute contrast and entropy\n.   *       (center of the window is always in the pixel selected by x,y coordinates\n.   *       of the corresponding feature sample).'
        pass
    
    def setClusterMinSize(self, clusterMinSize):
        'setClusterMinSize(clusterMinSize) -> None\n.   * @brief This parameter multiplied by the index of iteration gives lower limit for cluster size.\n.   *       Clusters containing fewer points than specified by the limit have their centroid dismissed\n.   *       and points are reassigned.'
        pass
    
    def setDistanceFunction(self, distanceFunction):
        'setDistanceFunction(distanceFunction) -> None\n.   * @brief Distance function selector used for measuring distance between two points in k-means.\n.   *       Available: L0_25, L0_5, L1, L2, L2SQUARED, L5, L_INFINITY.'
        pass
    
    def setDropThreshold(self, dropThreshold):
        'setDropThreshold(dropThreshold) -> None\n.   * @brief Remove centroids in k-means whose weight is lesser or equal to given threshold.'
        pass
    
    def setGrayscaleBits(self, grayscaleBits):
        'setGrayscaleBits(grayscaleBits) -> None\n.   * @brief Color resolution of the greyscale bitmap represented in allocated bits\n.   *       (i.e., value 4 means that 16 shades of grey are used).\n.   *       The greyscale bitmap is used for computing contrast and entropy values.'
        pass
    
    def setInitSeedIndexes(self, initSeedIndexes):
        'setInitSeedIndexes(initSeedIndexes) -> None\n.   * @brief Initial seed indexes for the k-means algorithm.'
        pass
    
    def setIterationCount(self, iterationCount):
        'setIterationCount(iterationCount) -> None\n.   * @brief Number of iterations of the k-means clustering.\n.   *       We use fixed number of iterations, since the modified clustering is pruning clusters\n.   *       (not iteratively refining k clusters).'
        pass
    
    def setJoiningDistance(self, joiningDistance):
        'setJoiningDistance(joiningDistance) -> None\n.   * @brief Threshold euclidean distance between two centroids.\n.   *       If two cluster centers are closer than this distance,\n.   *       one of the centroid is dismissed and points are reassigned.'
        pass
    
    def setMaxClustersCount(self, maxClustersCount):
        'setMaxClustersCount(maxClustersCount) -> None\n.   * @brief Maximal number of generated clusters. If the number is exceeded,\n.   *       the clusters are sorted by their weights and the smallest clusters are cropped.'
        pass
    
    def setSamplingPoints(self, samplingPoints):
        'setSamplingPoints(samplingPoints) -> None\n.   * @brief Sets sampling points used to sample the input image.\n.   * @param samplingPoints Vector of sampling points in range [0..1)\n.   * @note Number of sampling points must be greater or equal to clusterization seed count.'
        pass
    
    def setTranslation(self, idx, value):
        'setTranslation(idx, value) -> None\n.   * @brief Translations of the individual axes of the feature space.\n.   * @param idx ID of the translation\n.   * @param value Value of the translation\n.   * @note\n.   *       WEIGHT_IDX = 0;\n.   *       X_IDX = 1;\n.   *       Y_IDX = 2;\n.   *       L_IDX = 3;\n.   *       A_IDX = 4;\n.   *       B_IDX = 5;\n.   *       CONTRAST_IDX = 6;\n.   *       ENTROPY_IDX = 7;'
        pass
    
    def setTranslations(self, translations):
        'setTranslations(translations) -> None\n.   * @brief Translations of the individual axes of the feature space.\n.   * @param translations Values of all translations.\n.   * @note\n.   *       WEIGHT_IDX = 0;\n.   *       X_IDX = 1;\n.   *       Y_IDX = 2;\n.   *       L_IDX = 3;\n.   *       A_IDX = 4;\n.   *       B_IDX = 5;\n.   *       CONTRAST_IDX = 6;\n.   *       ENTROPY_IDX = 7;'
        pass
    
    def setWeight(self):
        'setWeight(idx, value) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space.\n.   * @param idx ID of the weight\n.   * @param value Value of the weight\n.   * @note\n.   *       WEIGHT_IDX = 0;\n.   *       X_IDX = 1;\n.   *       Y_IDX = 2;\n.   *       L_IDX = 3;\n.   *       A_IDX = 4;\n.   *       B_IDX = 5;\n.   *       CONTRAST_IDX = 6;\n.   *       ENTROPY_IDX = 7;'
        pass
    
    def setWeightA(self):
        'setWeightA(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightB(self):
        'setWeightB(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightContrast(self):
        'setWeightContrast(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightEntropy(self):
        'setWeightEntropy(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightL(self):
        'setWeightL(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightX(self):
        'setWeightX(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeightY(self):
        'setWeightY(weight) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space\n.   *       (x,y = position; L,a,b = color in CIE Lab space; c = contrast. e = entropy)'
        pass
    
    def setWeights(self):
        'setWeights(weights) -> None\n.   * @brief Weights (multiplicative constants) that linearly stretch individual axes of the feature space.\n.   * @param weights Values of all weights.\n.   * @note\n.   *       WEIGHT_IDX = 0;\n.   *       X_IDX = 1;\n.   *       Y_IDX = 2;\n.   *       L_IDX = 3;\n.   *       A_IDX = 4;\n.   *       B_IDX = 5;\n.   *       CONTRAST_IDX = 6;\n.   *       ENTROPY_IDX = 7;'
        pass
    
    def setWindowRadius(self, radius):
        'setWindowRadius(radius) -> None\n.   * @brief Size of the texture sampling window used to compute contrast and entropy\n.   *       (center of the window is always in the pixel selected by x,y coordinates\n.   *       of the corresponding feature sample).'
        pass
    

class xfeatures2d_PCTSignaturesSQFD(Algorithm):
    __class__ = xfeatures2d_PCTSignaturesSQFD
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeQuadraticFormDistance(self, _signature0, _signature1):
        'computeQuadraticFormDistance(_signature0, _signature1) -> retval\n.   * @brief Computes Signature Quadratic Form Distance of two signatures.\n.   * @param _signature0 The first signature.\n.   * @param _signature1 The second signature.'
        pass
    
    def computeQuadraticFormDistances(self, sourceSignature, imageSignatures, distances):
        'computeQuadraticFormDistances(sourceSignature, imageSignatures, distances) -> None\n.   * @brief Computes Signature Quadratic Form Distance between the reference signature\n.   *       and each of the other image signatures.\n.   * @param sourceSignature The signature to measure distance of other signatures from.\n.   * @param imageSignatures Vector of signatures to measure distance from the source signature.\n.   * @param distances Output vector of measured distances.'
        pass
    
    @classmethod
    def create(cls, distanceFunction=None, similarityFunction=None, similarityParameter=None):
        'create([, distanceFunction[, similarityFunction[, similarityParameter]]]) -> retval\n.   * @brief Creates the algorithm instance using selected distance function,\n.   *       similarity function and similarity function parameter.\n.   * @param distanceFunction Distance function selector. Default: L2\n.   *       Available: L0_25, L0_5, L1, L2, L2SQUARED, L5, L_INFINITY\n.   * @param similarityFunction Similarity function selector. Default: HEURISTIC\n.   *       Available: MINUS, GAUSSIAN, HEURISTIC\n.   * @param similarityParameter Parameter of the similarity function.'
        pass
    

class xfeatures2d_SIFT(Feature2D):
    __class__ = xfeatures2d_SIFT
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, nfeatures=None, nOctaveLayers=None, contrastThreshold=None, edgeThreshold=None, sigma=None):
        'create([, nfeatures[, nOctaveLayers[, contrastThreshold[, edgeThreshold[, sigma]]]]]) -> retval\n.   @param nfeatures The number of best features to retain. The features are ranked by their scores\n.   (measured in SIFT algorithm as the local contrast)\n.   \n.   @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The\n.   number of octaves is computed automatically from the image resolution.\n.   \n.   @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform\n.   (low-contrast) regions. The larger the threshold, the less features are produced by the detector.\n.   \n.   @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning\n.   is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are\n.   filtered out (more features are retained).\n.   \n.   @param sigma The sigma of the Gaussian applied to the input image at the octave \\#0. If your image\n.   is captured with a weak camera with soft lenses, you might want to reduce the number.'
        pass
    

class xfeatures2d_SURF(Feature2D):
    __class__ = xfeatures2d_SURF
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, hessianThreshold=None, nOctaves=None, nOctaveLayers=None, extended=None, upright=None):
        'create([, hessianThreshold[, nOctaves[, nOctaveLayers[, extended[, upright]]]]]) -> retval\n.   @param hessianThreshold Threshold for hessian keypoint detector used in SURF.\n.   @param nOctaves Number of pyramid octaves the keypoint detector will use.\n.   @param nOctaveLayers Number of octave layers within each octave.\n.   @param extended Extended descriptor flag (true - use extended 128-element descriptors; false - use\n.   64-element descriptors).\n.   @param upright Up-right or rotated features flag (true - do not compute orientation of features;\n.   false - compute orientation).'
        pass
    
    def getExtended(self):
        'getExtended() -> retval\n.'
        pass
    
    def getHessianThreshold(self):
        'getHessianThreshold() -> retval\n.'
        pass
    
    def getNOctaveLayers(self):
        'getNOctaveLayers() -> retval\n.'
        pass
    
    def getNOctaves(self):
        'getNOctaves() -> retval\n.'
        pass
    
    def getUpright(self):
        'getUpright() -> retval\n.'
        pass
    
    def setExtended(self, extended):
        'setExtended(extended) -> None\n.'
        pass
    
    def setHessianThreshold(self, hessianThreshold):
        'setHessianThreshold(hessianThreshold) -> None\n.'
        pass
    
    def setNOctaveLayers(self, nOctaveLayers):
        'setNOctaveLayers(nOctaveLayers) -> None\n.'
        pass
    
    def setNOctaves(self, nOctaves):
        'setNOctaves(nOctaves) -> None\n.'
        pass
    
    def setUpright(self, upright):
        'setUpright(upright) -> None\n.'
        pass
    

class xfeatures2d_StarDetector(Feature2D):
    __class__ = xfeatures2d_StarDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, maxSize=None, responseThreshold=None, lineThresholdProjected=None, lineThresholdBinarized=None, suppressNonmaxSize=None):
        'create([, maxSize[, responseThreshold[, lineThresholdProjected[, lineThresholdBinarized[, suppressNonmaxSize]]]]]) -> retval\n.'
        pass
    

class xfeatures2d_VGG(Feature2D):
    __class__ = xfeatures2d_VGG
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, desc=None, isigma=None, img_normalize=None, use_scale_orientation=None, scale_factor=None, dsc_normalize=None):
        'create([, desc[, isigma[, img_normalize[, use_scale_orientation[, scale_factor[, dsc_normalize]]]]]]) -> retval\n.'
        pass
    
    def getScaleFactor(self):
        'getScaleFactor() -> retval\n.'
        pass
    
    def getSigma(self):
        'getSigma() -> retval\n.'
        pass
    
    def getUseNormalizeDescriptor(self):
        'getUseNormalizeDescriptor() -> retval\n.'
        pass
    
    def getUseNormalizeImage(self):
        'getUseNormalizeImage() -> retval\n.'
        pass
    
    def getUseScaleOrientation(self):
        'getUseScaleOrientation() -> retval\n.'
        pass
    
    def setScaleFactor(self, scale_factor):
        'setScaleFactor(scale_factor) -> None\n.'
        pass
    
    def setSigma(self, isigma):
        'setSigma(isigma) -> None\n.'
        pass
    
    def setUseNormalizeDescriptor(self, dsc_normalize):
        'setUseNormalizeDescriptor(dsc_normalize) -> None\n.'
        pass
    
    def setUseNormalizeImage(self, img_normalize):
        'setUseNormalizeImage(img_normalize) -> None\n.'
        pass
    
    def setUseScaleOrientation(self, use_scale_orientation):
        'setUseScaleOrientation(use_scale_orientation) -> None\n.'
        pass
    

class ximgproc_AdaptiveManifoldFilter(Algorithm):
    __class__ = ximgproc_AdaptiveManifoldFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def collectGarbage(self):
        'collectGarbage() -> None\n.'
        pass
    
    @classmethod
    def create(cls):
        'create() -> retval\n.'
        pass
    
    def filter(self, src, dst=None, joint=None):
        'filter(src[, dst[, joint]]) -> dst\n.   @brief Apply high-dimensional filtering using adaptive manifolds.\n.   \n.   @param src filtering image with any numbers of channels.\n.   \n.   @param dst output image.\n.   \n.   @param joint optional joint (also called as guided) image with any numbers of channels.'
        pass
    

class ximgproc_ContourFitting(Algorithm):
    __class__ = ximgproc_ContourFitting
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def estimateTransformation(self, src, dst, alphaPhiST=None, fdContour=None):
        'estimateTransformation(src, dst[, alphaPhiST[, fdContour]]) -> alphaPhiST, dist\n.   @brief Fit two closed curves using fourier descriptors. More details in @cite PersoonFu1977 and @cite BergerRaghunathan1998\n.   \n.   @param src Contour defining first shape.\n.   @param dst Contour defining second shape (Target).\n.   @param alphaPhiST : \\f$ \\alpha \\f$=alphaPhiST(0,0), \\f$ \\phi \\f$=alphaPhiST(0,1) (in radian), s=alphaPhiST(0,2), Tx=alphaPhiST(0,3), Ty=alphaPhiST(0,4) rotation center\n.   @param dist distance between src and dst after matching.\n.   @param fdContour false then src and dst are contours and true src and dst are fourier descriptors.'
        pass
    
    def getCtrSize(self):
        'getCtrSize() -> retval\n.   @returns number of fourier descriptors'
        pass
    
    def getFDSize(self):
        'getFDSize() -> retval\n.   @returns number of fourier descriptors used for optimal curve matching'
        pass
    
    def setCtrSize(self, n):
        'setCtrSize(n) -> None\n.   @brief set number of Fourier descriptors used in estimateTransformation\n.   \n.   @param n number of Fourier descriptors equal to number of contour points after resampling.'
        pass
    
    def setFDSize(self, n):
        'setFDSize(n) -> None\n.   @brief set number of Fourier descriptors when estimateTransformation used vector<Point>\n.   \n.   @param n number of fourier descriptors used for optimal curve matching.'
        pass
    

class ximgproc_DTFilter(Algorithm):
    __class__ = ximgproc_DTFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def filter(self, src, dst=None, dDepth=None):
        'filter(src[, dst[, dDepth]]) -> dst\n.   @brief Produce domain transform filtering operation on source image.\n.   \n.   @param src filtering image with unsigned 8-bit or floating-point 32-bit depth and up to 4 channels.\n.   \n.   @param dst destination image.\n.   \n.   @param dDepth optional depth of the output image. dDepth can be set to -1, which will be equivalent\n.   to src.depth().'
        pass
    

class ximgproc_DisparityFilter(Algorithm):
    __class__ = ximgproc_DisparityFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def filter(self, disparity_map_left, left_view, filtered_disparity_map=None, disparity_map_right=None, ROI=None, right_view=None):
        'filter(disparity_map_left, left_view[, filtered_disparity_map[, disparity_map_right[, ROI[, right_view]]]]) -> filtered_disparity_map\n.   @brief Apply filtering to the disparity map.\n.   \n.   @param disparity_map_left disparity map of the left view, 1 channel, CV_16S type. Implicitly assumes that disparity\n.   values are scaled by 16 (one-pixel disparity corresponds to the value of 16 in the disparity map). Disparity map\n.   can have any resolution, it will be automatically resized to fit left_view resolution.\n.   \n.   @param left_view left view of the original stereo-pair to guide the filtering process, 8-bit single-channel\n.   or three-channel image.\n.   \n.   @param filtered_disparity_map output disparity map.\n.   \n.   @param disparity_map_right optional argument, some implementations might also use the disparity map\n.   of the right view to compute confidence maps, for instance.\n.   \n.   @param ROI region of the disparity map to filter. Optional, usually it should be set automatically.\n.   \n.   @param right_view optional argument, some implementations might also use the right view of the original\n.   stereo-pair.'
        pass
    

class ximgproc_DisparityWLSFilter(ximgproc_DisparityFilter):
    __class__ = ximgproc_DisparityWLSFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getConfidenceMap(self):
        'getConfidenceMap() -> retval\n.   @brief Get the confidence map that was used in the last filter call. It is a CV_32F one-channel image\n.   with values ranging from 0.0 (totally untrusted regions of the raw disparity map) to 255.0 (regions containing\n.   correct disparity values with a high degree of confidence).'
        pass
    
    def getDepthDiscontinuityRadius(self):
        'getDepthDiscontinuityRadius() -> retval\n.   @brief DepthDiscontinuityRadius is a parameter used in confidence computation. It defines the size of\n.   low-confidence regions around depth discontinuities.'
        pass
    
    def getLRCthresh(self):
        'getLRCthresh() -> retval\n.   @brief LRCthresh is a threshold of disparity difference used in left-right-consistency check during\n.   confidence map computation. The default value of 24 (1.5 pixels) is virtually always good enough.'
        pass
    
    def getLambda(self):
        'getLambda() -> retval\n.   @brief Lambda is a parameter defining the amount of regularization during filtering. Larger values force\n.   filtered disparity map edges to adhere more to source image edges. Typical value is 8000.'
        pass
    
    def getROI(self):
        'getROI() -> retval\n.   @brief Get the ROI used in the last filter call'
        pass
    
    def getSigmaColor(self):
        'getSigmaColor() -> retval\n.   @brief SigmaColor is a parameter defining how sensitive the filtering process is to source image edges.\n.   Large values can lead to disparity leakage through low-contrast edges. Small values can make the filter too\n.   sensitive to noise and textures in the source image. Typical values range from 0.8 to 2.0.'
        pass
    
    def setDepthDiscontinuityRadius(self, _disc_radius):
        'setDepthDiscontinuityRadius(_disc_radius) -> None\n.   @see getDepthDiscontinuityRadius'
        pass
    
    def setLRCthresh(self, _LRC_thresh):
        'setLRCthresh(_LRC_thresh) -> None\n.   @see getLRCthresh'
        pass
    
    def setLambda(self, _lambda):
        'setLambda(_lambda) -> None\n.   @see getLambda'
        pass
    
    def setSigmaColor(self, _sigma_color):
        'setSigmaColor(_sigma_color) -> None\n.   @see getSigmaColor'
        pass
    

class ximgproc_EdgeAwareInterpolator(ximgproc_SparseMatchInterpolator):
    __class__ = ximgproc_EdgeAwareInterpolator
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getFGSLambda(self):
        'getFGSLambda() -> retval\n.   @see setFGSLambda'
        pass
    
    def getFGSSigma(self):
        'getFGSSigma() -> retval\n.   @see setFGSLambda'
        pass
    
    def getK(self):
        'getK() -> retval\n.   @see setK'
        pass
    
    def getLambda(self):
        'getLambda() -> retval\n.   @see setLambda'
        pass
    
    def getSigma(self):
        'getSigma() -> retval\n.   @see setSigma'
        pass
    
    def getUsePostProcessing(self):
        'getUsePostProcessing() -> retval\n.   @see setUsePostProcessing'
        pass
    
    def setFGSLambda(self):
        'setFGSLambda(_lambda) -> None\n.   @brief Sets the respective fastGlobalSmootherFilter() parameter.'
        pass
    
    def setFGSSigma(self, _sigma):
        'setFGSSigma(_sigma) -> None\n.   @see setFGSLambda'
        pass
    
    def setK(self, _k):
        'setK(_k) -> None\n.   @brief K is a number of nearest-neighbor matches considered, when fitting a locally affine\n.   model. Usually it should be around 128. However, lower values would make the interpolation\n.   noticeably faster.'
        pass
    
    def setLambda(self, _lambda):
        'setLambda(_lambda) -> None\n.   @brief Lambda is a parameter defining the weight of the edge-aware term in geodesic distance,\n.   should be in the range of 0 to 1000.'
        pass
    
    def setSigma(self, _sigma):
        'setSigma(_sigma) -> None\n.   @brief Sigma is a parameter defining how fast the weights decrease in the locally-weighted affine\n.   fitting. Higher values can help preserve fine details, lower values can help to get rid of noise in the\n.   output flow.'
        pass
    
    def setUsePostProcessing(self):
        'setUsePostProcessing(_use_post_proc) -> None\n.   @brief Sets whether the fastGlobalSmootherFilter() post-processing is employed. It is turned on by\n.   default.'
        pass
    

class ximgproc_EdgeBoxes(Algorithm):
    __class__ = ximgproc_EdgeBoxes
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getAlpha(self):
        'getAlpha() -> retval\n.   @brief Returns the step size of sliding window search.'
        pass
    
    def getBeta(self):
        'getBeta() -> retval\n.   @brief Returns the nms threshold for object proposals.'
        pass
    
    def getBoundingBoxes(self, edge_map, orientation_map):
        'getBoundingBoxes(edge_map, orientation_map) -> boxes\n.   @brief Returns array containing proposal boxes.\n.   \n.   @param edge_map edge image.\n.   @param orientation_map orientation map.\n.   @param boxes proposal boxes.'
        pass
    
    def getClusterMinMag(self):
        'getClusterMinMag() -> retval\n.   @brief Returns the cluster min magnitude.'
        pass
    
    def getEdgeMergeThr(self):
        'getEdgeMergeThr() -> retval\n.   @brief Returns the edge merge threshold.'
        pass
    
    def getEdgeMinMag(self):
        'getEdgeMinMag() -> retval\n.   @brief Returns the edge min magnitude.'
        pass
    
    def getEta(self):
        'getEta() -> retval\n.   @brief Returns adaptation rate for nms threshold.'
        pass
    
    def getGamma(self):
        'getGamma() -> retval\n.   @brief Returns the affinity sensitivity.'
        pass
    
    def getKappa(self):
        'getKappa() -> retval\n.   @brief Returns the scale sensitivity.'
        pass
    
    def getMaxAspectRatio(self):
        'getMaxAspectRatio() -> retval\n.   @brief Returns the max aspect ratio of boxes.'
        pass
    
    def getMaxBoxes(self):
        'getMaxBoxes() -> retval\n.   @brief Returns the max number of boxes to detect.'
        pass
    
    def getMinBoxArea(self):
        'getMinBoxArea() -> retval\n.   @brief Returns the minimum area of boxes.'
        pass
    
    def getMinScore(self):
        'getMinScore() -> retval\n.   @brief Returns the min score of boxes to detect.'
        pass
    
    def setAlpha(self, value):
        'setAlpha(value) -> None\n.   @brief Sets the step size of sliding window search.'
        pass
    
    def setBeta(self, value):
        'setBeta(value) -> None\n.   @brief Sets the nms threshold for object proposals.'
        pass
    
    def setClusterMinMag(self, value):
        'setClusterMinMag(value) -> None\n.   @brief Sets the cluster min magnitude.'
        pass
    
    def setEdgeMergeThr(self, value):
        'setEdgeMergeThr(value) -> None\n.   @brief Sets the edge merge threshold.'
        pass
    
    def setEdgeMinMag(self, value):
        'setEdgeMinMag(value) -> None\n.   @brief Sets the edge min magnitude.'
        pass
    
    def setEta(self, value):
        'setEta(value) -> None\n.   @brief Sets the adaptation rate for nms threshold.'
        pass
    
    def setGamma(self, value):
        'setGamma(value) -> None\n.   @brief Sets the affinity sensitivity'
        pass
    
    def setKappa(self, value):
        'setKappa(value) -> None\n.   @brief Sets the scale sensitivity.'
        pass
    
    def setMaxAspectRatio(self, value):
        'setMaxAspectRatio(value) -> None\n.   @brief Sets the max aspect ratio of boxes.'
        pass
    
    def setMaxBoxes(self, value):
        'setMaxBoxes(value) -> None\n.   @brief Sets max number of boxes to detect.'
        pass
    
    def setMinBoxArea(self, value):
        'setMinBoxArea(value) -> None\n.   @brief Sets the minimum area of boxes.'
        pass
    
    def setMinScore(self, value):
        'setMinScore(value) -> None\n.   @brief Sets the min score of boxes to detect.'
        pass
    

class ximgproc_FastGlobalSmootherFilter(Algorithm):
    __class__ = ximgproc_FastGlobalSmootherFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def filter(self, src, dst=None):
        'filter(src[, dst]) -> dst\n.   @brief Apply smoothing operation to the source image.\n.   \n.   @param src source image for filtering with unsigned 8-bit or signed 16-bit or floating-point 32-bit depth and up to 4 channels.\n.   \n.   @param dst destination image.'
        pass
    

class ximgproc_FastLineDetector(Algorithm):
    __class__ = ximgproc_FastLineDetector
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def detect(self, _image, _lines=None):
        'detect(_image[, _lines]) -> _lines\n.   @brief Finds lines in the input image.\n.   This is the output of the default parameters of the algorithm on the above\n.   shown image.\n.   \n.   ![image](pics/corridor_fld.jpg)\n.   \n.   @param _image A grayscale (CV_8UC1) input image. If only a roi needs to be\n.   selected, use: `fld_ptr-\\>detect(image(roi), lines, ...);\n.   lines += Scalar(roi.x, roi.y, roi.x, roi.y);`\n.   @param _lines A vector of Vec4f elements specifying the beginning\n.   and ending point of a line.  Where Vec4f is (x1, y1, x2, y2), point\n.   1 is the start, point 2 - end. Returned lines are directed so that the\n.   brighter side is on their left.'
        pass
    
    def drawSegments(self, _image, lines, draw_arrow=None):
        'drawSegments(_image, lines[, draw_arrow]) -> _image\n.   @brief Draws the line segments on a given image.\n.   @param _image The image, where the lines will be drawn. Should be bigger\n.   or equal to the image, where the lines were found.\n.   @param lines A vector of the lines that needed to be drawn.\n.   @param draw_arrow If true, arrow heads will be drawn.'
        pass
    

class ximgproc_GuidedFilter(Algorithm):
    __class__ = ximgproc_GuidedFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def filter(self, src, dst=None, dDepth=None):
        'filter(src[, dst[, dDepth]]) -> dst\n.   @brief Apply Guided Filter to the filtering image.\n.   \n.   @param src filtering image with any numbers of channels.\n.   \n.   @param dst output image.\n.   \n.   @param dDepth optional depth of the output image. dDepth can be set to -1, which will be equivalent\n.   to src.depth().'
        pass
    

class ximgproc_RFFeatureGetter(Algorithm):
    __class__ = ximgproc_RFFeatureGetter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getFeatures(self, src, features, gnrmRad, gsmthRad, shrink, outNum, gradNum):
        'getFeatures(src, features, gnrmRad, gsmthRad, shrink, outNum, gradNum) -> None\n.'
        pass
    

class ximgproc_RidgeDetectionFilter(Algorithm):
    __class__ = ximgproc_RidgeDetectionFilter
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    @classmethod
    def create(cls, ddepth=None, dx=None, dy=None, ksize=None, out_dtype=None, scale=None, delta=None, borderType=None):
        'create([, ddepth[, dx[, dy[, ksize[, out_dtype[, scale[, delta[, borderType]]]]]]]]) -> retval\n.   @brief Create pointer to the Ridge detection filter.\n.   @param ddepth  Specifies output image depth. Defualt is CV_32FC1\n.   @param dx Order of derivative x, default is 1\n.   @param dy  Order of derivative y, default is 1\n.   @param ksize Sobel kernel size , default is 3\n.   @param out_dtype Converted format for output, default is CV_8UC1\n.   @param scale Optional scale value for derivative values, default is 1\n.   @param delta  Optional bias added to output, default is 0\n.   @param borderType Pixel extrapolation method, default is BORDER_DEFAULT\n.   @see Sobel, threshold, getStructuringElement, morphologyEx.( for additional refinement)'
        pass
    
    def getRidgeFilteredImage(self, _img, out=None):
        'getRidgeFilteredImage(_img[, out]) -> out\n.   @brief Apply Ridge detection filter on input image.\n.   @param _img InputArray as supported by Sobel. img can be 1-Channel or 3-Channels.\n.   @param out OutputAray of structure as RidgeDetectionFilter::ddepth. Output image with ridges.'
        pass
    

class ximgproc_SparseMatchInterpolator(Algorithm):
    __class__ = ximgproc_SparseMatchInterpolator
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def interpolate(self, from_image, from_points, to_image, to_points, dense_flow=None):
        "interpolate(from_image, from_points, to_image, to_points[, dense_flow]) -> dense_flow\n.   @brief Interpolate input sparse matches.\n.   \n.   @param from_image first of the two matched images, 8-bit single-channel or three-channel.\n.   \n.   @param from_points points of the from_image for which there are correspondences in the\n.   to_image (Point2f vector, size shouldn't exceed 32767)\n.   \n.   @param to_image second of the two matched images, 8-bit single-channel or three-channel.\n.   \n.   @param to_points points in the to_image corresponding to from_points\n.   (Point2f vector, size shouldn't exceed 32767)\n.   \n.   @param dense_flow output dense matching (two-channel CV_32F image)"
        pass
    

class ximgproc_StructuredEdgeDetection(Algorithm):
    __class__ = ximgproc_StructuredEdgeDetection
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def computeOrientation(self, _src, _dst=None):
        'computeOrientation(_src[, _dst]) -> _dst\n.   @brief The function computes orientation from edge image.\n.   \n.   @param _src edge image.\n.   @param _dst orientation image.'
        pass
    
    def detectEdges(self, _src, _dst=None):
        'detectEdges(_src[, _dst]) -> _dst\n.   @brief The function detects edges in src and draw them to dst.\n.   \n.   The algorithm underlies this function is much more robust to texture presence, than common\n.   approaches, e.g. Sobel\n.   @param _src source image (RGB, float, in [0;1]) to detect edges\n.   @param _dst destination image (grayscale, float, in [0;1]) where edges are drawn\n.   @sa Sobel, Canny'
        pass
    
    def edgesNms(self, edge_image, orientation_image, _dst=None, r=None, s=None, m=None, isParallel=None):
        'edgesNms(edge_image, orientation_image[, _dst[, r[, s[, m[, isParallel]]]]]) -> _dst\n.   @brief The function edgenms in edge image and suppress edges where edge is stronger in orthogonal direction.\n.   \n.   @param edge_image edge image from detectEdges function.\n.   @param orientation_image orientation image from computeOrientation function.\n.   @param _dst suppressed image (grayscale, float, in [0;1])\n.   @param r radius for NMS suppression.\n.   @param s radius for boundary suppression.\n.   @param m multiplier for conservative suppression.\n.   @param isParallel enables/disables parallel computing.'
        pass
    

class ximgproc_SuperpixelLSC(Algorithm):
    __class__ = ximgproc_SuperpixelLSC
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def enforceLabelConnectivity(self, min_element_size=None):
        'enforceLabelConnectivity([, min_element_size]) -> None\n.   @brief Enforce label connectivity.\n.   \n.   @param min_element_size The minimum element size in percents that should be absorbed into a bigger\n.   superpixel. Given resulted average superpixel size valid value should be in 0-100 range, 25 means\n.   that less then a quarter sized superpixel should be absorbed, this is default.\n.   \n.   The function merge component that is too small, assigning the previously found adjacent label\n.   to this component. Calling this function may change the final number of superpixels.'
        pass
    
    def getLabelContourMask(self, image=None, thick_line=None):
        'getLabelContourMask([, image[, thick_line]]) -> image\n.   @brief Returns the mask of the superpixel segmentation stored in SuperpixelLSC object.\n.   \n.   @param image Return: CV_8U1 image mask where -1 indicates that the pixel is a superpixel border,\n.   and 0 otherwise.\n.   \n.   @param thick_line If false, the border is only one pixel wide, otherwise all pixels at the border\n.   are masked.\n.   \n.   The function return the boundaries of the superpixel segmentation.'
        pass
    
    def getLabels(self, labels_out=None):
        'getLabels([, labels_out]) -> labels_out\n.   @brief Returns the segmentation labeling of the image.\n.   \n.   Each label represents a superpixel, and each pixel is assigned to one superpixel label.\n.   \n.   @param labels_out Return: A CV_32SC1 integer array containing the labels of the superpixel\n.   segmentation. The labels are in the range [0, getNumberOfSuperpixels()].\n.   \n.   The function returns an image with the labels of the superpixel segmentation. The labels are in\n.   the range [0, getNumberOfSuperpixels()].'
        pass
    
    def getNumberOfSuperpixels(self):
        'getNumberOfSuperpixels() -> retval\n.   @brief Calculates the actual amount of superpixels on a given segmentation computed\n.   and stored in SuperpixelLSC object.'
        pass
    
    def iterate(self, num_iterations=None):
        'iterate([, num_iterations]) -> None\n.   @brief Calculates the superpixel segmentation on a given image with the initialized\n.   parameters in the SuperpixelLSC object.\n.   \n.   This function can be called again without the need of initializing the algorithm with\n.   createSuperpixelLSC(). This save the computational cost of allocating memory for all the\n.   structures of the algorithm.\n.   \n.   @param num_iterations Number of iterations. Higher number improves the result.\n.   \n.   The function computes the superpixels segmentation of an image with the parameters initialized\n.   with the function createSuperpixelLSC(). The algorithms starts from a grid of superpixels and\n.   then refines the boundaries by proposing updates of edges boundaries.'
        pass
    

class ximgproc_SuperpixelSEEDS(Algorithm):
    __class__ = ximgproc_SuperpixelSEEDS
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getLabelContourMask(self, image=None, thick_line=None):
        'getLabelContourMask([, image[, thick_line]]) -> image\n.   @brief Returns the mask of the superpixel segmentation stored in SuperpixelSEEDS object.\n.   \n.   @param image Return: CV_8UC1 image mask where -1 indicates that the pixel is a superpixel border,\n.   and 0 otherwise.\n.   \n.   @param thick_line If false, the border is only one pixel wide, otherwise all pixels at the border\n.   are masked.\n.   \n.   The function return the boundaries of the superpixel segmentation.\n.   \n.   @note\n.   -   (Python) A demo on how to generate superpixels in images from the webcam can be found at\n.   opencv_source_code/samples/python2/seeds.py\n.   -   (cpp) A demo on how to generate superpixels in images from the webcam can be found at\n.   opencv_source_code/modules/ximgproc/samples/seeds.cpp. By adding a file image as a command\n.   line argument, the static image will be used instead of the webcam.\n.   -   It will show a window with the video from the webcam with the superpixel boundaries marked\n.   in red (see below). Use Space to switch between different output modes. At the top of the\n.   window there are 4 sliders, from which the user can change on-the-fly the number of\n.   superpixels, the number of block levels, the strength of the boundary prior term to modify\n.   the shape, and the number of iterations at pixel level. This is useful to play with the\n.   parameters and set them to the user convenience. In the console the frame-rate of the\n.   algorithm is indicated.\n.   \n.   ![image](pics/superpixels_demo.png)'
        pass
    
    def getLabels(self, labels_out=None):
        'getLabels([, labels_out]) -> labels_out\n.   @brief Returns the segmentation labeling of the image.\n.   \n.   Each label represents a superpixel, and each pixel is assigned to one superpixel label.\n.   \n.   @param labels_out Return: A CV_32UC1 integer array containing the labels of the superpixel\n.   segmentation. The labels are in the range [0, getNumberOfSuperpixels()].\n.   \n.   The function returns an image with ssthe labels of the superpixel segmentation. The labels are in\n.   the range [0, getNumberOfSuperpixels()].'
        pass
    
    def getNumberOfSuperpixels(self):
        'getNumberOfSuperpixels() -> retval\n.   @brief Calculates the superpixel segmentation on a given image stored in SuperpixelSEEDS object.\n.   \n.   The function computes the superpixels segmentation of an image with the parameters initialized\n.   with the function createSuperpixelSEEDS().'
        pass
    
    def iterate(self, img, num_iterations=None):
        'iterate(img[, num_iterations]) -> None\n.   @brief Calculates the superpixel segmentation on a given image with the initialized\n.   parameters in the SuperpixelSEEDS object.\n.   \n.   This function can be called again for other images without the need of initializing the\n.   algorithm with createSuperpixelSEEDS(). This save the computational cost of allocating memory\n.   for all the structures of the algorithm.\n.   \n.   @param img Input image. Supported formats: CV_8U, CV_16U, CV_32F. Image size & number of\n.   channels must match with the initialized image size & channels with the function\n.   createSuperpixelSEEDS(). It should be in HSV or Lab color space. Lab is a bit better, but also\n.   slower.\n.   \n.   @param num_iterations Number of pixel level iterations. Higher number improves the result.\n.   \n.   The function computes the superpixels segmentation of an image with the parameters initialized\n.   with the function createSuperpixelSEEDS(). The algorithms starts from a grid of superpixels and\n.   then refines the boundaries by proposing updates of blocks of pixels that lie at the boundaries\n.   from large to smaller size, finalizing with proposing pixel updates. An illustrative example\n.   can be seen below.\n.   \n.   ![image](pics/superpixels_blocks2.png)'
        pass
    

class ximgproc_SuperpixelSLIC(Algorithm):
    __class__ = ximgproc_SuperpixelSLIC
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def enforceLabelConnectivity(self, min_element_size=None):
        'enforceLabelConnectivity([, min_element_size]) -> None\n.   @brief Enforce label connectivity.\n.   \n.   @param min_element_size The minimum element size in percents that should be absorbed into a bigger\n.   superpixel. Given resulted average superpixel size valid value should be in 0-100 range, 25 means\n.   that less then a quarter sized superpixel should be absorbed, this is default.\n.   \n.   The function merge component that is too small, assigning the previously found adjacent label\n.   to this component. Calling this function may change the final number of superpixels.'
        pass
    
    def getLabelContourMask(self, image=None, thick_line=None):
        'getLabelContourMask([, image[, thick_line]]) -> image\n.   @brief Returns the mask of the superpixel segmentation stored in SuperpixelSLIC object.\n.   \n.   @param image Return: CV_8U1 image mask where -1 indicates that the pixel is a superpixel border,\n.   and 0 otherwise.\n.   \n.   @param thick_line If false, the border is only one pixel wide, otherwise all pixels at the border\n.   are masked.\n.   \n.   The function return the boundaries of the superpixel segmentation.'
        pass
    
    def getLabels(self, labels_out=None):
        'getLabels([, labels_out]) -> labels_out\n.   @brief Returns the segmentation labeling of the image.\n.   \n.   Each label represents a superpixel, and each pixel is assigned to one superpixel label.\n.   \n.   @param labels_out Return: A CV_32SC1 integer array containing the labels of the superpixel\n.   segmentation. The labels are in the range [0, getNumberOfSuperpixels()].\n.   \n.   The function returns an image with the labels of the superpixel segmentation. The labels are in\n.   the range [0, getNumberOfSuperpixels()].'
        pass
    
    def getNumberOfSuperpixels(self):
        'getNumberOfSuperpixels() -> retval\n.   @brief Calculates the actual amount of superpixels on a given segmentation computed\n.   and stored in SuperpixelSLIC object.'
        pass
    
    def iterate(self, num_iterations=None):
        'iterate([, num_iterations]) -> None\n.   @brief Calculates the superpixel segmentation on a given image with the initialized\n.   parameters in the SuperpixelSLIC object.\n.   \n.   This function can be called again without the need of initializing the algorithm with\n.   createSuperpixelSLIC(). This save the computational cost of allocating memory for all the\n.   structures of the algorithm.\n.   \n.   @param num_iterations Number of iterations. Higher number improves the result.\n.   \n.   The function computes the superpixels segmentation of an image with the parameters initialized\n.   with the function createSuperpixelSLIC(). The algorithms starts from a grid of superpixels and\n.   then refines the boundaries by proposing updates of edges boundaries.'
        pass
    

class ximgproc_segmentation_GraphSegmentation(Algorithm):
    __class__ = ximgproc_segmentation_GraphSegmentation
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getK(self):
        'getK() -> retval\n.'
        pass
    
    def getMinSize(self):
        'getMinSize() -> retval\n.'
        pass
    
    def getSigma(self):
        'getSigma() -> retval\n.'
        pass
    
    def processImage(self, src, dst=None):
        "processImage(src[, dst]) -> dst\n.   @brief Segment an image and store output in dst\n.   @param src The input image. Any number of channel (1 (Eg: Gray), 3 (Eg: RGB), 4 (Eg: RGB-D)) can be provided\n.   @param dst The output segmentation. It's a CV_32SC1 Mat with the same number of cols and rows as input image, with an unique, sequential, id for each pixel."
        pass
    
    def setK(self, k):
        'setK(k) -> None\n.'
        pass
    
    def setMinSize(self, min_size):
        'setMinSize(min_size) -> None\n.'
        pass
    
    def setSigma(self, sigma):
        'setSigma(sigma) -> None\n.'
        pass
    

class ximgproc_segmentation_SelectiveSearchSegmentation(Algorithm):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentation
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def addGraphSegmentation(self, g):
        'addGraphSegmentation(g) -> None\n.   @brief Add a new graph segmentation in the list of graph segementations to process.\n.   @param g The graph segmentation'
        pass
    
    def addImage(self, img):
        'addImage(img) -> None\n.   @brief Add a new image in the list of images to process.\n.   @param img The image'
        pass
    
    def addStrategy(self, s):
        'addStrategy(s) -> None\n.   @brief Add a new strategy in the list of strategy to process.\n.   @param s The strategy'
        pass
    
    def clearGraphSegmentations(self):
        'clearGraphSegmentations() -> None\n.   @brief Clear the list of graph segmentations to process;'
        pass
    
    def clearImages(self):
        'clearImages() -> None\n.   @brief Clear the list of images to process'
        pass
    
    def clearStrategies(self):
        'clearStrategies() -> None\n.   @brief Clear the list of strategy to process;'
        pass
    
    def process(self):
        'process() -> rects\n.   @brief Based on all images, graph segmentations and stragies, computes all possible rects and return them\n.   @param rects The list of rects. The first ones are more relevents than the lasts ones.'
        pass
    
    def setBaseImage(self, img):
        'setBaseImage(img) -> None\n.   @brief Set a image used by switch* functions to initialize the class\n.   @param img The image'
        pass
    
    def switchToSelectiveSearchFast(self, base_k=None, inc_k=None, sigma=None):
        "switchToSelectiveSearchFast([, base_k[, inc_k[, sigma]]]) -> None\n.   @brief Initialize the class with the 'Selective search fast' parameters describled in @cite uijlings2013selective.\n.   @param base_k The k parameter for the first graph segmentation\n.   @param inc_k The increment of the k parameter for all graph segmentations\n.   @param sigma The sigma parameter for the graph segmentation"
        pass
    
    def switchToSelectiveSearchQuality(self, base_k=None, inc_k=None, sigma=None):
        "switchToSelectiveSearchQuality([, base_k[, inc_k[, sigma]]]) -> None\n.   @brief Initialize the class with the 'Selective search fast' parameters describled in @cite uijlings2013selective.\n.   @param base_k The k parameter for the first graph segmentation\n.   @param inc_k The increment of the k parameter for all graph segmentations\n.   @param sigma The sigma parameter for the graph segmentation"
        pass
    
    def switchToSingleStrategy(self, k=None, sigma=None):
        "switchToSingleStrategy([, k[, sigma]]) -> None\n.   @brief Initialize the class with the 'Single stragegy' parameters describled in @cite uijlings2013selective.\n.   @param k The k parameter for the graph segmentation\n.   @param sigma The sigma parameter for the graph segmentation"
        pass
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategy(Algorithm):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategy
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def get(self):
        'get(r1, r2) -> retval\n.   @brief Return the score between two regions (between 0 and 1)\n.   @param r1 The first region\n.   @param r2 The second region'
        pass
    
    def merge(self, r1, r2):
        'merge(r1, r2) -> None\n.   @brief Inform the strategy that two regions will be merged\n.   @param r1 The first region\n.   @param r2 The second region'
        pass
    
    def setImage(self, img, regions, sizes, image_id=None):
        'setImage(img, regions, sizes[, image_id]) -> None\n.   @brief Set a initial image, with a segementation.\n.   @param img The input image. Any number of channel can be provided\n.   @param regions A segementation of the image. The parameter must be the same size of img.\n.   @param sizes The sizes of different regions\n.   @param image_id If not set to -1, try to cache pre-computations. If the same set og (img, regions, size) is used, the image_id need to be the same.'
        pass
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategyColor(ximgproc_segmentation_SelectiveSearchSegmentationStrategy):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategyColor
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategyFill(ximgproc_segmentation_SelectiveSearchSegmentationStrategy):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategyFill
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple(ximgproc_segmentation_SelectiveSearchSegmentationStrategy):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def addStrategy(self, g, weight):
        'addStrategy(g, weight) -> None\n.   @brief Add a new sub-strategy\n.   @param g The strategy\n.   @param weight The weight of the strategy'
        pass
    
    def clearStrategies(self):
        'clearStrategies() -> None\n.   @brief Remove all sub-strategies'
        pass
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategySize(ximgproc_segmentation_SelectiveSearchSegmentationStrategy):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategySize
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class ximgproc_segmentation_SelectiveSearchSegmentationStrategyTexture(ximgproc_segmentation_SelectiveSearchSegmentationStrategy):
    __class__ = ximgproc_segmentation_SelectiveSearchSegmentationStrategyTexture
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    

class xphoto_GrayworldWB(xphoto_WhiteBalancer):
    __class__ = xphoto_GrayworldWB
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getSaturationThreshold(self):
        'getSaturationThreshold() -> retval\n.   @brief Maximum saturation for a pixel to be included in the\n.   gray-world assumption\n.   @see setSaturationThreshold'
        pass
    
    def setSaturationThreshold(self, val):
        'setSaturationThreshold(val) -> None\n.   @copybrief getSaturationThreshold @see getSaturationThreshold'
        pass
    

class xphoto_LearningBasedWB(xphoto_WhiteBalancer):
    __class__ = xphoto_LearningBasedWB
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def extractSimpleFeatures(self, src, dst=None):
        'extractSimpleFeatures(src[, dst]) -> dst\n.   @brief Implements the feature extraction part of the algorithm.\n.   \n.   In accordance with @cite Cheng2015 , computes the following features for the input image:\n.   1. Chromaticity of an average (R,G,B) tuple\n.   2. Chromaticity of the brightest (R,G,B) tuple (while ignoring saturated pixels)\n.   3. Chromaticity of the dominant (R,G,B) tuple (the one that has the highest value in the RGB histogram)\n.   4. Mode of the chromaticity palette, that is constructed by taking 300 most common colors according to\n.   the RGB histogram and projecting them on the chromaticity plane. Mode is the most high-density point\n.   of the palette, which is computed by a straightforward fixed-bandwidth kernel density estimator with\n.   a Epanechnikov kernel function.\n.   \n.   @param src Input three-channel image (BGR color space is assumed).\n.   @param dst An array of four (r,g) chromaticity tuples corresponding to the features listed above.'
        pass
    
    def getHistBinNum(self):
        'getHistBinNum() -> retval\n.   @brief Defines the size of one dimension of a three-dimensional RGB histogram that is used internally\n.   by the algorithm. It often makes sense to increase the number of bins for images with higher bit depth\n.   (e.g. 256 bins for a 12 bit image).\n.   @see setHistBinNum'
        pass
    
    def getRangeMaxVal(self):
        'getRangeMaxVal() -> retval\n.   @brief Maximum possible value of the input image (e.g. 255 for 8 bit images,\n.   4095 for 12 bit images)\n.   @see setRangeMaxVal'
        pass
    
    def getSaturationThreshold(self):
        'getSaturationThreshold() -> retval\n.   @brief Threshold that is used to determine saturated pixels, i.e. pixels where at least one of the\n.   channels exceeds \\f$\\texttt{saturation_threshold}\\times\\texttt{range_max_val}\\f$ are ignored.\n.   @see setSaturationThreshold'
        pass
    
    def setHistBinNum(self, val):
        'setHistBinNum(val) -> None\n.   @copybrief getHistBinNum @see getHistBinNum'
        pass
    
    def setRangeMaxVal(self, val):
        'setRangeMaxVal(val) -> None\n.   @copybrief getRangeMaxVal @see getRangeMaxVal'
        pass
    
    def setSaturationThreshold(self, val):
        'setSaturationThreshold(val) -> None\n.   @copybrief getSaturationThreshold @see getSaturationThreshold'
        pass
    

class xphoto_SimpleWB(xphoto_WhiteBalancer):
    __class__ = xphoto_SimpleWB
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def getInputMax(self):
        'getInputMax() -> retval\n.   @brief Input image range maximum value\n.   @see setInputMax'
        pass
    
    def getInputMin(self):
        'getInputMin() -> retval\n.   @brief Input image range minimum value\n.   @see setInputMin'
        pass
    
    def getOutputMax(self):
        'getOutputMax() -> retval\n.   @brief Output image range maximum value\n.   @see setOutputMax'
        pass
    
    def getOutputMin(self):
        'getOutputMin() -> retval\n.   @brief Output image range minimum value\n.   @see setOutputMin'
        pass
    
    def getP(self):
        'getP() -> retval\n.   @brief Percent of top/bottom values to ignore\n.   @see setP'
        pass
    
    def setInputMax(self, val):
        'setInputMax(val) -> None\n.   @copybrief getInputMax @see getInputMax'
        pass
    
    def setInputMin(self, val):
        'setInputMin(val) -> None\n.   @copybrief getInputMin @see getInputMin'
        pass
    
    def setOutputMax(self, val):
        'setOutputMax(val) -> None\n.   @copybrief getOutputMax @see getOutputMax'
        pass
    
    def setOutputMin(self, val):
        'setOutputMin(val) -> None\n.   @copybrief getOutputMin @see getOutputMin'
        pass
    
    def setP(self, val):
        'setP(val) -> None\n.   @copybrief getP @see getP'
        pass
    

class xphoto_WhiteBalancer(Algorithm):
    __class__ = xphoto_WhiteBalancer
    def __init__(self, *args, **kwargs):
        pass
    
    @classmethod
    def __init_subclass__(cls):
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        return None
    
    def __repr__(self):
        'Return repr(self).'
        return ''
    
    @classmethod
    def __subclasshook__(cls, subclass):
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        return False
    
    def balanceWhite(self, src, dst=None):
        'balanceWhite(src[, dst]) -> dst\n.   @brief Applies white balancing to the input image\n.   \n.   @param src Input image\n.   @param dst White balancing result\n.   @sa cvtColor, equalizeHist'
        pass
    

